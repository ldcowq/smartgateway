###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.1.10194/W32 for 8051         09/Dec/2021  00:14:25 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\Source\cJSON.c       #
#    Command line       =  -f D:\developer_tool_install\IAR\ZStack-CC2530-2.5 #
#                          .1a\Projects\zstack\Samples\SMGW\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ           #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f D:\developer_tool_install\IAR\ZStack-CC2530-2.5 #
#                          .1a\Projects\zstack\Samples\SMGW\CC2530DB\..\..\.. #
#                          \Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO         #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00010000                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF3                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 D:\developer_tool_install\I #
#                          AR\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SM #
#                          GW\Source\cJSON.c -D ZTOOL_P1 -D xMT_TASK -D       #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\Coordinator #
#                          EB\List\ -lA D:\developer_tool_install\IAR\ZStack- #
#                          CC2530-2.5.1a\Projects\zstack\Samples\SMGW\CC2530D #
#                          B\CoordinatorEB\List\ --diag_suppress Pe001,Pa010  #
#                          -o D:\developer_tool_install\IAR\ZStack-CC2530-2.5 #
#                          .1a\Projects\zstack\Samples\SMGW\CC2530DB\Coordina #
#                          torEB\Obj\ -e --no_code_motion --debug             #
#                          --core=plain --dptr=16,1 --data_model=large        #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I D:\developer_tool_install\ #
#                          IAR\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\S #
#                          MGW\CC2530DB\ -I D:\developer_tool_install\IAR\ZSt #
#                          ack-CC2530-2.5.1a\Projects\zstack\Samples\SMGW\CC2 #
#                          530DB\..\Source\ -I D:\developer_tool_install\IAR\ #
#                          ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SMGW\ #
#                          CC2530DB\..\..\..\ZMain\TI2530DB\ -I               #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\include\ -I                     #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\hal\target\CC2530EB\ -I             #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\include\ -I                     #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\high_level\ -I                  #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\ -I             #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\mac\low_level\srf04\single_chip\    #
#                          -I D:\developer_tool_install\IAR\ZStack-CC2530-2.5 #
#                          .1a\Projects\zstack\Samples\SMGW\CC2530DB\..\..\.. #
#                          \..\..\Components\mt\ -I                           #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\osal\include\ -I                    #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\services\saddr\ -I                  #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\services\sdata\ -I                  #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\af\ -I                        #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\nwk\ -I                       #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sapi\ -I                      #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sec\ -I                       #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\sys\ -I                       #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\stack\zdo\ -I                       #
#                          D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\..\..\..\.. #
#                          \..\Components\zmac\ -I D:\developer_tool_install\ #
#                          IAR\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\S #
#                          MGW\CC2530DB\..\..\..\..\..\Components\zmac\f8w\   #
#                          -Ohz --require_prototypes                          #
#    List file          =  D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\Coordinator #
#                          EB\List\cJSON.lst                                  #
#    Object file        =  D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a #
#                          \Projects\zstack\Samples\SMGW\CC2530DB\Coordinator #
#                          EB\Obj\cJSON.r51                                   #
#                                                                             #
#                                                                             #
###############################################################################

D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SMGW\Source\cJSON.c
      1          /*
      2            Copyright (c) 2009-2017 Dave Gamble and cJSON contributors
      3          
      4            Permission is hereby granted, free of charge, to any person obtaining a copy
      5            of this software and associated documentation files (the "Software"), to deal
      6            in the Software without restriction, including without limitation the rights
      7            to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
      8            copies of the Software, and to permit persons to whom the Software is
      9            furnished to do so, subject to the following conditions:
     10          
     11            The above copyright notice and this permission notice shall be included in
     12            all copies or substantial portions of the Software.
     13          
     14            THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     15            IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     16            FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     17            AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     18            LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     19            OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
     20            THE SOFTWARE.
     21          */
     22          
     23          /* cJSON */
     24          /* JSON parser in C. */
     25          
     26          /* disable warnings about old C89 functions in MSVC */
     27          #if !defined(_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER)
     28          #define _CRT_SECURE_NO_DEPRECATE
     29          #endif
     30          
     31          #ifdef __GNUC__
     32          #pragma GCC visibility push(default)
     33          #endif
     34          #if defined(_MSC_VER)
     35          #pragma warning (push)
     36          /* disable warning about single line comments in system headers */
     37          #pragma warning (disable : 4001)
     38          #endif
     39          
     40          #include <string.h>
     41          #include <stdio.h>
     42          #include <math.h>
     43          #include <stdlib.h>

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void *malloc(size_t)
   \                     malloc:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function __xdata_malloc
   \   000004   12....       LCALL   ??__xdata_malloc?relay
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void *realloc(void *, size_t)
   \                     realloc:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function __xdata_realloc
   \   000004   12....       LCALL   ??__xdata_realloc?relay
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \   __banked_func __xdata_reentrant void free(void *)
   \                     free:
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004                ; Setup parameters for call to function __xdata_free
   \   000004   12....       LCALL   ??__xdata_free?relay
   \   000007   D083         POP     DPH
   \   000009   D082         POP     DPL
   \   00000B   02....       LJMP    ?BRET
     44          #include <limits.h>
     45          #include <ctype.h>
     46          #include <float.h>
     47          
     48          #ifdef ENABLE_LOCALES
     49          #include <locale.h>
     50          #endif
     51          
     52          #if defined(_MSC_VER)
     53          #pragma warning (pop)
     54          #endif
     55          #ifdef __GNUC__
     56          #pragma GCC visibility pop
     57          #endif
     58          
     59          #include "cJSON.h"

  /*
   ^
"D:\developer_tool_install\IAR\ZStack-CC2530-2.5.1a\Projects\zstack\Samples\SMGW\Source\cJSON.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     60          
     61          /* define our own boolean type */
     62          #ifdef true
     63          #undef true
     64          #endif
     65          #define true ((cJSON_bool)1)
     66          
     67          #ifdef false
     68          #undef false
     69          #endif
     70          #define false ((cJSON_bool)0)
     71          
     72          /* define isnan and isinf for ANSI C, if in C99 or above, isnan and isinf has been defined in math.h */
     73          #ifndef isinf
     74          #define isinf(d) (isnan((d - d)) && !isnan(d))
     75          #endif
     76          #ifndef isnan
     77          #define isnan(d) (d != d)
     78          #endif
     79          
     80          #ifndef NAN
     81          #ifdef _WIN32
     82          #define NAN sqrt(-1.0)
     83          #else
     84          #define NAN 0.0/0.0
     85          #endif
     86          #endif
     87          
     88          typedef struct {
     89              const unsigned char *json;
     90              size_t position;
     91          } error;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          static error global_error = { NULL, 0 };
   \                     global_error:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
     93          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     94          CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void)
   \                     cJSON_GetErrorPtr:
     95          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     96              return (const char*) (global_error.json + global_error.position);
   \   000004   90....       MOV     DPTR,#global_error + 2
   \   000007   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_608:
   \   00000A   90....       MOV     DPTR,#global_error
   \   00000D   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000010   FB           MOV     R3,A
   \   000011   02....       LJMP    ??Subroutine204_0 & 0xFFFF
     97          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine147:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   39           ADDC    A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine201_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine204_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine226_0:
   \   000000   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_635:
   \   000003   22           RET
     98          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     99          CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item) 
   \                     cJSON_GetStringValue:
    100          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    101              if (!cJSON_IsString(item)) 
   \   000009                ; Setup parameters for call to function cJSON_IsString
   \   000009   12....       LCALL   ??cJSON_IsString?relay
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EA           MOV     A,R2
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   7006         JNZ     ??cJSON_GetStringValue_0
    102              {
    103                  return NULL;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8007         SJMP    ??CrossCallReturnLabel_390
    104              }
    105          
    106              return item->valuestring;
   \                     ??cJSON_GetStringValue_0:
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000020   02....       LJMP    ??Subroutine160_0 & 0xFFFF
    107          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine187_0
   \   000004                ; // Fall through to label ??Subroutine187_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine187_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine188_0
   \   000004                ; // Fall through to label ??Subroutine188_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine188_0:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_539:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine211_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    108          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    109          CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item) 
   \                     cJSON_GetNumberValue:
    110          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    111              if (!cJSON_IsNumber(item)) 
   \   000009                ; Setup parameters for call to function cJSON_IsNumber
   \   000009   12....       LCALL   ??cJSON_IsNumber?relay
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EA           MOV     A,R2
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   7025         JNZ     ??cJSON_GetNumberValue_0
    112              {
    113                  return (double) NAN;
                                         ^
Warning[Pe222]: floating-point operation result is out of range
   \   000013   75..00       MOV     ?V0 + 0,#0x0
   \   000016   75..00       MOV     ?V0 + 1,#0x0
   \   000019   75..00       MOV     ?V0 + 2,#0x0
   \   00001C   75..00       MOV     ?V0 + 3,#0x0
   \   00001F   90....       MOV     DPTR,#__Constant_0
   \   000022   78..         MOV     R0,#?V0 + 4
   \   000024   12....       LCALL   ?L_MOV_X
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   79..         MOV     R1,#?V0 + 4
   \   00002B   12....       LCALL   ?FLT_DIV
   \   00002E   AA..         MOV     R2,?V0 + 0
   \   000030   AB..         MOV     R3,?V0 + 1
   \   000032   AC..         MOV     R4,?V0 + 2
   \   000034   AD..         MOV     R5,?V0 + 3
   \   000036   8006         SJMP    ??cJSON_GetNumberValue_1
    114              }
    115          
    116              return item->valuedouble;
   \                     ??cJSON_GetNumberValue_0:
   \   000038   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   00003B   12....       LCALL   ?XLOAD_R2345
   \                     ??cJSON_GetNumberValue_1:
   \   00003E   02....       LJMP    ??Subroutine151_0 & 0xFFFF
    117          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   EE           MOV     A,R6
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_645:
   \   000009   22           RET
    118          
    119          /* This is a safeguard to prevent copy-pasters from using incompatible C and header files */
    120          #if (CJSON_VERSION_MAJOR != 1) || (CJSON_VERSION_MINOR != 7) || (CJSON_VERSION_PATCH != 15)
    121              #error cJSON.h and cJSON.c have different versions. Make sure that both have the same.
    122          #endif
    123          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    124          CJSON_PUBLIC(const char*) cJSON_Version(void)
   \                     cJSON_Version:
    125          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    126              static char version[15];
    127              sprintf(version, "%i.%i.%i", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);
   \   000005                ; Setup parameters for call to function sprintf
   \   000005   75..0F       MOV     ?V0 + 0,#0xf
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   75..07       MOV     ?V0 + 0,#0x7
   \   000013   78..         MOV     R0,#?V0 + 0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   75..01       MOV     ?V0 + 0,#0x1
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7C..         MOV     R4,#`?<Constant "%i.%i.%i">` & 0xff
   \   000022   7D..         MOV     R5,#(`?<Constant "%i.%i.%i">` >> 8) & 0xff
   \   000024   7A..         MOV     R2,#??version & 0xff
   \   000026   7B..         MOV     R3,#(??version >> 8) & 0xff
   \   000028   12....       LCALL   ??sprintf?relay
   \   00002B   7406         MOV     A,#0x6
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
    128          
    129              return version;
   \   000030   7A..         MOV     R2,#??version & 0xff
   \   000032   7B..         MOV     R3,#(??version >> 8) & 0xff
   \   000034   02....       LJMP    ??Subroutine160_0 & 0xFFFF
    130          }

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??version:
   \   000000                DS 15
   \   00000F                REQUIRE __INIT_XDATA_Z
    131          
    132          /* Case insensitive string comparison, doesn't consider two NULL pointers equal though */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    133          static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
   \                     case_insensitive_strcmp:
    134          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    135              if ((string1 == NULL) || (string2 == NULL))
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6004         JZ      ??case_insensitive_strcmp_0
   \   000009   EC           MOV     A,R4
   \   00000A   4D           ORL     A,R5
   \   00000B   7006         JNZ     ??case_insensitive_strcmp_1
    136              {
    137                  return 1;
   \                     ??case_insensitive_strcmp_0:
   \   00000D   7A01         MOV     R2,#0x1
   \                     ??case_insensitive_strcmp_2:
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   8079         SJMP    ??case_insensitive_strcmp_3
    138              }
    139          
    140              if (string1 == string2)
   \                     ??case_insensitive_strcmp_1:
   \   000013   EC           MOV     A,R4
   \   000014   6A           XRL     A,R2
   \   000015   7002         JNZ     ??case_insensitive_strcmp_4
   \   000017   ED           MOV     A,R5
   \   000018   6B           XRL     A,R3
   \                     ??case_insensitive_strcmp_4:
   \   000019   7015         JNZ     ??case_insensitive_strcmp_5
    141              {
    142                  return 0;
   \                     ??case_insensitive_strcmp_6:
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   80F0         SJMP    ??case_insensitive_strcmp_2
    143              }
    144          
    145              for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    146              {
    147                  if (*string1 == '\0')
   \                     ??case_insensitive_strcmp_7:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   60F9         JZ      ??case_insensitive_strcmp_6
    148                  {
    149                      return 0;
    150                  }
    151              }
   \   000022   A3           INC     DPTR
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   AC82         MOV     R4,DPL
   \   00002E   AD83         MOV     R5,DPH
   \                     ??case_insensitive_strcmp_5:
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000037   8A82         MOV     DPL,R2
   \   000039   8B83         MOV     DPH,R3
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   5002         JNC     ??case_insensitive_strcmp_8
   \   00003E   4420         ORL     A,#0x20
   \                     ??case_insensitive_strcmp_8:
   \   000040   FE           MOV     R6,A
   \   000041   8C82         MOV     DPL,R4
   \   000043   8D83         MOV     DPH,R5
   \   000045   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000048   5008         JNC     ??case_insensitive_strcmp_9
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   4420         ORL     A,#0x20
   \   000051   F8           MOV     R0,A
   \                     ??case_insensitive_strcmp_9:
   \   000052   E8           MOV     A,R0
   \   000053   6E           XRL     A,R6
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   60C5         JZ      ??case_insensitive_strcmp_7
    152          
    153              return tolower(*string1) - tolower(*string2);
   \   00005A   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00005D   5008         JNC     ??case_insensitive_strcmp_10
   \   00005F   8A82         MOV     DPL,R2
   \   000061   8B83         MOV     DPH,R3
   \   000063   E0           MOVX    A,@DPTR
   \   000064   4420         ORL     A,#0x20
   \   000066   F8           MOV     R0,A
   \                     ??case_insensitive_strcmp_10:
   \   000067   8C82         MOV     DPL,R4
   \   000069   8D83         MOV     DPH,R5
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   FA           MOV     R2,A
   \   00006D   74..         MOV     A,#(_Small_Ctype + 1) & 0xff
   \   00006F   2A           ADD     A,R2
   \   000070   F582         MOV     DPL,A
   \   000072   74..         MOV     A,#((_Small_Ctype + 1) >> 8) & 0xff
   \   000074   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000077   E4           CLR     A
   \   000078   93           MOVC    A,@A+DPTR
   \   000079   A2E0         MOV     C,0xE0 /* A   */.0
   \   00007B   5008         JNC     ??case_insensitive_strcmp_11
   \   00007D   8C82         MOV     DPL,R4
   \   00007F   8D83         MOV     DPH,R5
   \   000081   E0           MOVX    A,@DPTR
   \   000082   4420         ORL     A,#0x20
   \   000084   FA           MOV     R2,A
   \                     ??case_insensitive_strcmp_11:
   \   000085   E8           MOV     A,R0
   \   000086   C3           CLR     C
   \   000087   9A           SUBB    A,R2
   \   000088   FA           MOV     R2,A
   \   000089   95E0         SUBB    A,0xE0 /* A   */
   \   00008B   FB           MOV     R3,A
   \                     ??case_insensitive_strcmp_3:
   \   00008C   02....       LJMP    ??Subroutine186_0 & 0xFFFF
    154          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   74..         MOV     A,#(_Small_Ctype + 1) & 0xff
   \   000004   28           ADD     A,R0
   \   000005   F582         MOV     DPL,A
   \   000007   74..         MOV     A,#((_Small_Ctype + 1) >> 8) & 0xff
   \   000009   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_644:
   \   00000C   E4           CLR     A
   \   00000D   93           MOVC    A,@A+DPTR
   \   00000E   A2E0         MOV     C,0xE0 /* A   */.0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_650:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    155          
    156          typedef struct internal_hooks
    157          {
    158              void *(CJSON_CDECL *allocate)(size_t size);
    159              void (CJSON_CDECL *deallocate)(void *pointer);
    160              void *(CJSON_CDECL *reallocate)(void *pointer, size_t size);
    161          } internal_hooks;
    162          
    163          #if defined(_MSC_VER)
    164          /* work around MSVC error C2322: '...' address of dllimport '...' is not static */
    165          static void * CJSON_CDECL internal_malloc(size_t size)
    166          {
    167              return malloc(size);
    168          }
    169          static void CJSON_CDECL internal_free(void *pointer)
    170          {
    171              free(pointer);
    172          }
    173          static void * CJSON_CDECL internal_realloc(void *pointer, size_t size)
    174          {
    175              return realloc(pointer, size);
    176          }
    177          #else
    178          #define internal_malloc malloc
    179          #define internal_free free
    180          #define internal_realloc realloc
    181          #endif
    182          
    183          /* strlen of character literals resolved at compile time */
    184          #define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))
    185          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    186          static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };
   \                     global_hooks:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for global_hooks>`
   \   000006                REQUIRE __INIT_XDATA_I
    187          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
   \                     cJSON_strdup:
    189          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
    190              size_t length = 0;
    191              unsigned char *copy = NULL;
    192          
    193              if (string == NULL)
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   7006         JNZ     ??cJSON_strdup_0
    194              {
    195                  return NULL;
   \                     ??cJSON_strdup_1:
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   802F         SJMP    ??cJSON_strdup_2
    196              }
    197          
    198              length = strlen((const char*)string) + sizeof("");
   \                     ??cJSON_strdup_0:
   \   000017                ; Setup parameters for call to function strlen
   \   000017   12....       LCALL   ??strlen?relay
   \   00001A   12....       LCALL   ?Subroutine90 & 0xFFFF
    199              copy = (unsigned char*)hooks->allocate(length);
   \                     ??CrossCallReturnLabel_145:
   \   00001D                ; Setup parameters for indirect call
   \   00001D   0A           INC     R2
   \   00001E   FB           MOV     R3,A
   \   00001F   85..82       MOV     DPL,?V0 + 0
   \   000022   85..83       MOV     DPH,?V0 + 1
   \   000025   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000028   12....       LCALL   ?CALL_IND
   \   00002B   8A..         MOV     ?V0 + 0,R2
   \   00002D   8B..         MOV     ?V0 + 1,R3
    200              if (copy == NULL)
   \   00002F   EA           MOV     A,R2
   \   000030   45..         ORL     A,?V0 + 1
   \   000032   60DD         JZ      ??cJSON_strdup_1
    201              {
    202                  return NULL;
    203              }
    204              memcpy(copy, string, length);
   \   000034                ; Setup parameters for call to function memcpy
   \   000034   78..         MOV     R0,#?V0 + 2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   EE           MOV     A,R6
   \   00003A   FC           MOV     R4,A
   \   00003B   EF           MOV     A,R7
   \   00003C   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
    205          
    206              return copy;
   \   000042   AA..         MOV     R2,?V0 + 0
   \   000044   AB..         MOV     R3,?V0 + 1
   \                     ??cJSON_strdup_2:
   \   000046   02....       LJMP    ??Subroutine189_0 & 0xFFFF
    207          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   FD           MOV     R5,A
   \   000001                REQUIRE ??Subroutine163_0
   \   000001                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   12....       LCALL   ??memcpy?relay
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_605:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine146:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine164_0
   \   000001                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   F5..         MOV     ?V0 + 2,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine189_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    208          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    209          CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks)
   \                     cJSON_InitHooks:
    210          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    211              if (hooks == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   90....       MOV     DPTR,#global_hooks
   \   000009   7012         JNZ     ??cJSON_InitHooks_0
    212              {
    213                  /* Reset hooks */
    214                  global_hooks.allocate = malloc;
   \   00000B   74..         MOV     A,#??malloc?relay & 0xff
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   A3           INC     DPTR
   \   00000F   74..         MOV     A,#(??malloc?relay >> 8) & 0xff
   \   000011   F0           MOVX    @DPTR,A
    215                  global_hooks.deallocate = free;
   \   000012   A3           INC     DPTR
   \   000013   74..         MOV     A,#??free?relay & 0xff
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   74..         MOV     A,#(??free?relay >> 8) & 0xff
   \   000019   F0           MOVX    @DPTR,A
    216                  global_hooks.reallocate = realloc;
   \   00001A   A3           INC     DPTR
   \   00001B   8051         SJMP    ??cJSON_InitHooks_1
    217                  return;
    218              }
    219          
    220              global_hooks.allocate = malloc;
   \                     ??cJSON_InitHooks_0:
   \   00001D   74..         MOV     A,#??malloc?relay & 0xff
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   A3           INC     DPTR
   \   000021   74..         MOV     A,#(??malloc?relay >> 8) & 0xff
   \   000023   12....       LCALL   ?Subroutine102 & 0xFFFF
    221              if (hooks->malloc_fn != NULL)
   \                     ??CrossCallReturnLabel_159:
   \   000026   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000029   6006         JZ      ??CrossCallReturnLabel_414
    222              {
    223                  global_hooks.allocate = hooks->malloc_fn;
   \   00002B   90....       MOV     DPTR,#global_hooks
   \   00002E   12....       LCALL   ??Subroutine195_0 & 0xFFFF
    224              }
    225          
    226              global_hooks.deallocate = free;
   \                     ??CrossCallReturnLabel_414:
   \   000031   90....       MOV     DPTR,#global_hooks + 2
   \   000034   74..         MOV     A,#??free?relay & 0xff
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   74..         MOV     A,#(??free?relay >> 8) & 0xff
   \   00003A   12....       LCALL   ?Subroutine102 & 0xFFFF
    227              if (hooks->free_fn != NULL)
   \                     ??CrossCallReturnLabel_160:
   \   00003D   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000040   6006         JZ      ??CrossCallReturnLabel_415
    228              {
    229                  global_hooks.deallocate = hooks->free_fn;
   \   000042   90....       MOV     DPTR,#global_hooks + 2
   \   000045   12....       LCALL   ??Subroutine195_0 & 0xFFFF
    230              }
    231          
    232              /* use realloc only if both free and malloc are used */
    233              global_hooks.reallocate = NULL;
   \                     ??CrossCallReturnLabel_415:
   \   000048   90....       MOV     DPTR,#global_hooks + 4
   \   00004B   E4           CLR     A
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   F0           MOVX    @DPTR,A
    234              if ((global_hooks.allocate == malloc) && (global_hooks.deallocate == free))
   \   00004F   90....       MOV     DPTR,#global_hooks
   \   000052   E0           MOVX    A,@DPTR
   \   000053   64..         XRL     A,#??malloc?relay & 0xff
   \   000055   7004         JNZ     ??cJSON_InitHooks_2
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   64..         XRL     A,#(??malloc?relay >> 8) & 0xff
   \                     ??cJSON_InitHooks_2:
   \   00005B   7018         JNZ     ??cJSON_InitHooks_3
   \   00005D   90....       MOV     DPTR,#global_hooks + 2
   \   000060   E0           MOVX    A,@DPTR
   \   000061   64..         XRL     A,#??free?relay & 0xff
   \   000063   7004         JNZ     ??cJSON_InitHooks_4
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   64..         XRL     A,#(??free?relay >> 8) & 0xff
   \                     ??cJSON_InitHooks_4:
   \   000069   700A         JNZ     ??cJSON_InitHooks_3
    235              {
    236                  global_hooks.reallocate = realloc;
   \   00006B   90....       MOV     DPTR,#global_hooks + 4
   \                     ??cJSON_InitHooks_1:
   \   00006E   74..         MOV     A,#??realloc?relay & 0xff
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   74..         MOV     A,#(??realloc?relay >> 8) & 0xff
   \   000074   F0           MOVX    @DPTR,A
    237              }
   \                     ??cJSON_InitHooks_3:
   \   000075   02....       LJMP    ??Subroutine204_0 & 0xFFFF
    238          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine195_0:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine199_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine200_0
   \   000002                ; // Fall through to label ??Subroutine200_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine200_0:
   \   000000   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_634:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
    239          
    240          /* Internal constructor. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    241          static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
   \                     cJSON_New_Item:
    242          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
    243              cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
   \   000009                ; Setup parameters for indirect call
   \   000009   7A12         MOV     R2,#0x12
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000010   12....       LCALL   ?CALL_IND
   \   000013   8A..         MOV     ?V0 + 0,R2
   \   000015   8B..         MOV     ?V0 + 1,R3
   \   000017   AE..         MOV     R6,?V0 + 0
   \   000019   AF..         MOV     R7,?V0 + 1
    244              if (node)
   \   00001B   EE           MOV     A,R6
   \   00001C   4F           ORL     A,R7
   \   00001D   6017         JZ      ??cJSON_New_Item_0
    245              {
    246                  memset(node, '\0', sizeof(cJSON));
   \   00001F                ; Setup parameters for call to function memset
   \   00001F   75..12       MOV     ?V0 + 0,#0x12
   \   000022   75..00       MOV     ?V0 + 1,#0x0
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   7C00         MOV     R4,#0x0
   \   00002C   7D00         MOV     R5,#0x0
   \   00002E   12....       LCALL   ??memset?relay
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
    247              }
    248          
    249              return node;
   \                     ??cJSON_New_Item_0:
   \   000036   EE           MOV     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   02....       LJMP    ??Subroutine160_0 & 0xFFFF
    250          }
    251          
    252          /* Delete a cJSON structure. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
   \                     cJSON_Delete:
    254          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    255              cJSON *next = NULL;
   \   000009   02....       LJMP    ??cJSON_Delete_0 & 0xFFFF
    256              while (item != NULL)
    257              {
    258                  next = item->next;
   \                     ??cJSON_Delete_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \   000010   12....       LCALL   ?Subroutine38 & 0xFFFF
    259                  if (!(item->type & cJSON_IsReference) && (item->child != NULL))
   \                     ??CrossCallReturnLabel_54:
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   5401         ANL     A,#0x1
   \   000019   7013         JNZ     ??cJSON_Delete_2
   \   00001B   8E82         MOV     DPL,R6
   \   00001D   8F83         MOV     DPH,R7
   \   00001F   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000022   600A         JZ      ??cJSON_Delete_2
    260                  {
    261                      cJSON_Delete(item->child);
   \   000024                ; Setup parameters for call to function cJSON_Delete
   \   000024   8E82         MOV     DPL,R6
   \   000026   8F83         MOV     DPH,R7
   \   000028   12....       LCALL   ??Subroutine187_0 & 0xFFFF
    262                  }
   \                     ??CrossCallReturnLabel_388:
   \   00002B   12....       LCALL   ??cJSON_Delete?relay
    263                  if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
   \                     ??cJSON_Delete_2:
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   5401         ANL     A,#0x1
   \   00003C   701B         JNZ     ??cJSON_Delete_3
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_480:
   \   000045   6012         JZ      ??cJSON_Delete_3
    264                  {
    265                      global_hooks.deallocate(item->valuestring);
   \   000047                ; Setup parameters for indirect call
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   12....       LCALL   ?Subroutine23 & 0xFFFF
    266                  }
   \                     ??CrossCallReturnLabel_23:
   \   000056   12....       LCALL   ?CALL_IND
    267                  if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   \                     ??cJSON_Delete_3:
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   5402         ANL     A,#0x2
   \   000067   7019         JNZ     ??cJSON_Delete_4
   \   000069   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_641:
   \   00006C   EF           MOV     A,R7
   \   00006D   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000070   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000073   600D         JZ      ??cJSON_Delete_4
    268                  {
    269                      global_hooks.deallocate(item->string);
   \   000075                ; Setup parameters for indirect call
   \   000075   12....       LCALL   ?Subroutine144 & 0xFFFF
    270                  }
   \                     ??CrossCallReturnLabel_642:
   \   000078   EF           MOV     A,R7
   \   000079   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   00007C   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00007F   12....       LCALL   ?CALL_IND
    271                  global_hooks.deallocate(item);
   \                     ??cJSON_Delete_4:
   \   000082                ; Setup parameters for indirect call
   \   000082   EE           MOV     A,R6
   \   000083   FA           MOV     R2,A
   \   000084   EF           MOV     A,R7
   \   000085   FB           MOV     R3,A
   \   000086   90....       MOV     DPTR,#global_hooks + 2
   \   000089   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   00008C   12....       LCALL   ?CALL_IND
    272                  item = next;
   \   00008F   AE..         MOV     R6,?V0 + 0
   \   000091   AF..         MOV     R7,?V0 + 1
    273              }
   \                     ??cJSON_Delete_0:
   \   000093   EE           MOV     A,R6
   \   000094   4F           ORL     A,R7
   \   000095   6003         JZ      $+5
   \   000097   02....       LJMP    ??cJSON_Delete_1 & 0xFFFF
    274          }
   \   00009A   02....       LJMP    ??Subroutine160_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_531:
   \   000003   90....       MOV     DPTR,#global_hooks + 2
   \   000006   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine197_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine198_0
   \   000004                ; // Fall through to label ??Subroutine198_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine198_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine199_0
   \   000002                ; // Fall through to label ??Subroutine199_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine144:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine227_0
   \   000001                ; // Fall through to label ??Subroutine227_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine227_0:
   \   000000   2410         ADD     A,#0x10
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_518:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET
    275          
    276          /* get the decimal point character of the current locale */
    277          static unsigned char get_decimal_point(void)
    278          {
    279          #ifdef ENABLE_LOCALES
    280              struct lconv *lconv = localeconv();
    281              return (unsigned char) lconv->decimal_point[0];
    282          #else
    283              return '.';
    284          #endif
    285          }
    286          
    287          typedef struct
    288          {
    289              const unsigned char *content;
    290              size_t length;
    291              size_t offset;
    292              size_t depth; /* How deeply nested (in arrays/objects) is the input at the current offset. */
    293              internal_hooks hooks;
    294          } parse_buffer;
    295          
    296          /* check if the given size is left to read in a given parse buffer (starting with 1) */
    297          #define can_read(buffer, size) ((buffer != NULL) && (((buffer)->offset + size) <= (buffer)->length))
    298          /* check if the buffer can be accessed at the given index (starting with 0) */
    299          #define can_access_at_index(buffer, index) ((buffer != NULL) && (((buffer)->offset + index) < (buffer)->length))
    300          #define cannot_access_at_index(buffer, index) (!can_access_at_index(buffer, index))
    301          /* get a pointer to the buffer at the position */
    302          #define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)
    303          
    304          /* Parse the input text to generate a number, and populate the result into item. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    305          static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_number:
    306          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 66
   \   000005   74BE         MOV     A,#-0x42
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
    307              double number = 0;
    308              unsigned char *after_end = NULL;
   \   000012   85..82       MOV     DPL,?XSP + 0
   \   000015   85..83       MOV     DPH,?XSP + 1
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
    309              unsigned char number_c_string[64];
    310              unsigned char decimal_point = get_decimal_point();
    311              size_t i = 0;
    312          
    313              if ((input_buffer == NULL) || (input_buffer->content == NULL))
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   6009         JZ      ??parse_number_0
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   000027   7005         JNZ     ??parse_number_1
    314              {
    315                  return false;
   \                     ??parse_number_0:
   \   000029   7A00         MOV     R2,#0x0
   \   00002B   02....       LJMP    ??parse_number_2 & 0xFFFF
    316              }
    317          
    318              /* copy the number into a temporary buffer and replace '.' with the decimal point
    319               * of the current locale (for strtod)
    320               * This also takes care of '\0' not necessarily being available for marking the end of the input */
    321              for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
   \                     ??parse_number_1:
   \   00002E   7800         MOV     R0,#0x0
   \   000030   7900         MOV     R1,#0x0
   \                     ??parse_number_3:
   \   000032   8E82         MOV     DPL,R6
   \   000034   8F83         MOV     DPH,R7
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   28           ADD     A,R0
   \   00003C   FC           MOV     R4,A
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   39           ADDC    A,R1
   \   000040   FD           MOV     R5,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000048   5044         JNC     ??parse_number_4
    322              {
    323                  switch (buffer_at_offset(input_buffer)[i])
   \   00004A   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   00004D   12....       LCALL   ?UC_SWITCH_SPARSE
   \                     `?<Jumptable for parse_number>_0`:
   \   000050   01           DB        1
   \   000051   30           DB        48
   \   000052   39           DB        57
   \   000053   ....         DW        ??parse_number_5
   \   000055   05           DB        5
   \   000056   2B           DB        43
   \   000057   ....         DW        ??parse_number_5
   \   000059   2D           DB        45
   \   00005A   ....         DW        ??parse_number_5
   \   00005C   2E           DB        46
   \   00005D   ....         DW        ??parse_number_6
   \   00005F   45           DB        69
   \   000060   ....         DW        ??parse_number_5
   \   000062   65           DB        101
   \   000063   ....         DW        ??parse_number_5
   \   000065   ....         DW        ??parse_number_4
    324                  {
    325                      case '0':
    326                      case '1':
    327                      case '2':
    328                      case '3':
    329                      case '4':
    330                      case '5':
    331                      case '6':
    332                      case '7':
    333                      case '8':
    334                      case '9':
    335                      case '+':
    336                      case '-':
    337                      case 'e':
    338                      case 'E':
    339                          number_c_string[i] = buffer_at_offset(input_buffer)[i];
   \                     ??parse_number_5:
   \   000067   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   00006A   C0E0         PUSH    A
   \   00006C   7402         MOV     A,#0x2
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000074   D0E0         POP     A
   \   000076   800A         SJMP    ??parse_number_7
    340                          break;
    341          
    342                      case '.':
    343                          number_c_string[i] = decimal_point;
   \                     ??parse_number_6:
   \   000078   7402         MOV     A,#0x2
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ?Subroutine78 & 0xFFFF
    344                          break;
    345          
    346                      default:
    347                          goto loop_end;
    348                  }
    349              }
   \                     ??CrossCallReturnLabel_121:
   \   000080   742E         MOV     A,#0x2e
   \                     ??parse_number_7:
   \   000082   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000085   C3           CLR     C
   \   000086   E8           MOV     A,R0
   \   000087   943F         SUBB    A,#0x3f
   \   000089   E9           MOV     A,R1
   \   00008A   9400         SUBB    A,#0x0
   \   00008C   40A4         JC      ??parse_number_3
    350          loop_end:
    351              number_c_string[i] = '\0';
   \                     ??parse_number_4:
   \   00008E   7402         MOV     A,#0x2
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000096   E4           CLR     A
   \   000097   12....       LCALL   ??Subroutine165_0 & 0xFFFF
    352          
    353              number = strtod((const char*)number_c_string, (char**)&after_end);
   \                     ??CrossCallReturnLabel_286:
   \   00009A   AC82         MOV     R4,DPL
   \   00009C   AD83         MOV     R5,DPH
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   AA82         MOV     R2,DPL
   \   0000A5   AB83         MOV     R3,DPH
   \   0000A7   12....       LCALL   ??strtod?relay
   \   0000AA   8A..         MOV     ?V0 + 4,R2
   \   0000AC   8B..         MOV     ?V0 + 5,R3
   \   0000AE   8C..         MOV     ?V0 + 6,R4
   \   0000B0   8D..         MOV     ?V0 + 7,R5
    354              if (number_c_string == after_end)
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   C082         PUSH    DPL
   \   0000B9   C083         PUSH    DPH
   \   0000BB   85..82       MOV     DPL,?XSP + 0
   \   0000BE   85..83       MOV     DPH,?XSP + 1
   \   0000C1   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_609:
   \   0000C4   D083         POP     DPH
   \   0000C6   D082         POP     DPL
   \   0000C8   E582         MOV     A,DPL
   \   0000CA   68           XRL     A,R0
   \   0000CB   7003         JNZ     ??parse_number_8
   \   0000CD   E583         MOV     A,DPH
   \   0000CF   69           XRL     A,R1
   \                     ??parse_number_8:
   \   0000D0   7003         JNZ     $+5
   \   0000D2   02....       LJMP    ??parse_number_0 & 0xFFFF
    355              {
    356                  return false; /* parse_error */
    357              }
    358          
    359              item->valuedouble = number;
   \   0000D5   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000D8   78..         MOV     R0,#?V0 + 4
   \   0000DA   12....       LCALL   ?L_MOV_TO_X
    360          
    361              /* use saturation in case of overflow */
    362              if (number >= INT_MAX)
   \   0000DD   90....       MOV     DPTR,#__Constant_46fffe00
   \   0000E0   78..         MOV     R0,#?V0 + 8
   \   0000E2   12....       LCALL   ?L_MOV_X
   \   0000E5   78..         MOV     R0,#?V0 + 4
   \   0000E7   79..         MOV     R1,#?V0 + 8
   \   0000E9   12....       LCALL   ?FLT_GE
   \   0000EC   5018         JNC     ??parse_number_9
    363              {
    364                  item->valueint = INT_MAX;
   \   0000EE   85..82       MOV     DPL,?V0 + 0
   \   0000F1   85..83       MOV     DPH,?V0 + 1
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   74FF         MOV     A,#-0x1
   \   000100   F0           MOVX    @DPTR,A
   \   000101   A3           INC     DPTR
   \   000102   747F         MOV     A,#0x7f
   \   000104   8043         SJMP    ??parse_number_10
    365              }
    366              else if (number <= (double)INT_MIN)
   \                     ??parse_number_9:
   \   000106   90....       MOV     DPTR,#__Constant_c6fffffe
   \   000109   78..         MOV     R0,#?V0 + 8
   \   00010B   12....       LCALL   ?L_MOV_X
   \   00010E   78..         MOV     R0,#?V0 + 4
   \   000110   79..         MOV     R1,#?V0 + 8
   \   000112   12....       LCALL   ?FLT_LT
   \   000115   5017         JNC     ??parse_number_11
    367              {
    368                  item->valueint = INT_MIN;
   \   000117   85..82       MOV     DPL,?V0 + 0
   \   00011A   85..83       MOV     DPH,?V0 + 1
   \   00011D   A3           INC     DPTR
   \   00011E   A3           INC     DPTR
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   A3           INC     DPTR
   \   000122   A3           INC     DPTR
   \   000123   A3           INC     DPTR
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   A3           INC     DPTR
   \   000127   E4           CLR     A
   \   000128   F0           MOVX    @DPTR,A
   \   000129   A3           INC     DPTR
   \   00012A   7480         MOV     A,#-0x80
   \   00012C   801B         SJMP    ??parse_number_10
    369              }
    370              else
    371              {
    372                  item->valueint = (int)number;
   \                     ??parse_number_11:
   \   00012E   78..         MOV     R0,#?V0 + 4
   \   000130   12....       LCALL   ?FLT_TO_L
   \   000133   85..82       MOV     DPL,?V0 + 0
   \   000136   85..83       MOV     DPH,?V0 + 1
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   A3           INC     DPTR
   \   00013C   A3           INC     DPTR
   \   00013D   A3           INC     DPTR
   \   00013E   A3           INC     DPTR
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \   000143   E5..         MOV     A,?V0 + 4
   \   000145   F0           MOVX    @DPTR,A
   \   000146   A3           INC     DPTR
   \   000147   E5..         MOV     A,?V0 + 5
    373              }
   \                     ??parse_number_10:
   \   000149   12....       LCALL   ?Subroutine92 & 0xFFFF
    374          
    375              item->type = cJSON_Number;
   \                     ??CrossCallReturnLabel_147:
   \   00014C   7408         MOV     A,#0x8
   \   00014E   12....       LCALL   ??Subroutine212_0 & 0xFFFF
    376          
    377              input_buffer->offset += (size_t)(after_end - number_c_string);
   \                     ??CrossCallReturnLabel_543:
   \   000151   EE           MOV     A,R6
   \   000152   2404         ADD     A,#0x4
   \   000154   F8           MOV     R0,A
   \   000155   EF           MOV     A,R7
   \   000156   3400         ADDC    A,#0x0
   \   000158   F9           MOV     R1,A
   \   000159   8882         MOV     DPL,R0
   \   00015B   8983         MOV     DPH,R1
   \   00015D   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000160   85..82       MOV     DPL,?XSP + 0
   \   000163   85..83       MOV     DPH,?XSP + 1
   \   000166   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000169   7402         MOV     A,#0x2
   \   00016B   12....       LCALL   ?XSTACK_DISP0_8
   \   00016E   EA           MOV     A,R2
   \   00016F   C3           CLR     C
   \   000170   9582         SUBB    A,DPL
   \   000172   FA           MOV     R2,A
   \   000173   EB           MOV     A,R3
   \   000174   9583         SUBB    A,DPH
   \   000176   FB           MOV     R3,A
   \   000177   8882         MOV     DPL,R0
   \   000179   8983         MOV     DPH,R1
   \   00017B   12....       LCALL   ??Subroutine219_0 & 0xFFFF
    378              return true;
   \                     ??CrossCallReturnLabel_570:
   \   00017E   7A01         MOV     R2,#0x1
   \                     ??parse_number_2:
   \   000180   7B00         MOV     R3,#0x0
   \   000182   7442         MOV     A,#0x42
   \   000184   12....       LCALL   ?DEALLOC_XSTACK8
   \   000187   02....       LJMP    ?Subroutine5 & 0xFFFF
    379          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine150_0
   \   000001                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   E8           MOV     A,R0
   \   000001   2401         ADD     A,#0x1
   \   000003   08           INC     R0
   \   000004   E9           MOV     A,R1
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_540:
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   00000E   EA           MOV     A,R2
   \   00000F   28           ADD     A,R0
   \   000010   F582         MOV     DPL,A
   \   000012   EB           MOV     A,R3
   \   000013   39           ADDC    A,R1
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2A           ADD     A,R2
   \   000002   FA           MOV     R2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   3B           ADDC    A,R3
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_649:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function strtod
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine176_0
   \   000004                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   12....       LCALL   ??Subroutine210_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_542:
   \   000003   C3           CLR     C
   \   000004   EC           MOV     A,R4
   \   000005   9A           SUBB    A,R2
   \   000006   ED           MOV     A,R5
   \   000007   9B           SUBB    A,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine210_0
   \   000002                ; // Fall through to label ??Subroutine210_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine210_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine211_0
   \   000002                ; // Fall through to label ??Subroutine211_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine212_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine219_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET
    380          
    381          /* don't ask me, but the original cJSON_SetNumberValue returns an integer or double */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    382          CJSON_PUBLIC(double) cJSON_SetNumberHelper(cJSON *object, double number)
   \                     cJSON_SetNumberHelper:
    383          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   7410         MOV     A,#0x10
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   78..         MOV     R0,#?V0 + 4
   \   00000C   12....       LCALL   ?L_MOV_X
    384              if (number >= INT_MAX)
   \   00000F   90....       MOV     DPTR,#__Constant_46fffe00
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?L_MOV_X
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   79..         MOV     R1,#?V0 + 0
   \   00001B   12....       LCALL   ?FLT_GE
   \   00001E   5016         JNC     ??cJSON_SetNumberHelper_0
    385              {
    386                  object->valueint = INT_MAX;
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   74FF         MOV     A,#-0x1
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
   \   000032   747F         MOV     A,#0x7f
   \   000034   804B         SJMP    ??cJSON_SetNumberHelper_1
    387              }
    388              else if (number <= (double)INT_MIN)
   \                     ??cJSON_SetNumberHelper_0:
   \   000036   90....       MOV     DPTR,#__Constant_c6fffffe
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?L_MOV_X
   \   00003E   78..         MOV     R0,#?V0 + 4
   \   000040   79..         MOV     R1,#?V0 + 0
   \   000042   12....       LCALL   ?FLT_LT
   \   000045   5015         JNC     ??cJSON_SetNumberHelper_2
    389              {
    390                  object->valueint = INT_MIN;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E4           CLR     A
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   7480         MOV     A,#-0x80
   \   00005A   8025         SJMP    ??cJSON_SetNumberHelper_1
    391              }
    392              else
    393              {
    394                  object->valueint = (int)number;
   \                     ??cJSON_SetNumberHelper_2:
   \   00005C   85....       MOV     ?V0 + 0,?V0 + 4
   \   00005F   85....       MOV     ?V0 + 1,?V0 + 5
   \   000062   85....       MOV     ?V0 + 2,?V0 + 6
   \   000065   85....       MOV     ?V0 + 3,?V0 + 7
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?FLT_TO_L
   \   00006D   8A82         MOV     DPL,R2
   \   00006F   8B83         MOV     DPH,R3
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   A3           INC     DPTR
   \   000079   A3           INC     DPTR
   \   00007A   A3           INC     DPTR
   \   00007B   E5..         MOV     A,?V0 + 0
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E5..         MOV     A,?V0 + 1
   \                     ??cJSON_SetNumberHelper_1:
   \   000081   F0           MOVX    @DPTR,A
    395              }
    396          
    397              return object->valuedouble = number;
   \   000082   EA           MOV     A,R2
   \   000083   240C         ADD     A,#0xc
   \   000085   F8           MOV     R0,A
   \   000086   EB           MOV     A,R3
   \   000087   3400         ADDC    A,#0x0
   \   000089   F9           MOV     R1,A
   \   00008A   E8           MOV     A,R0
   \   00008B   FA           MOV     R2,A
   \   00008C   E9           MOV     A,R1
   \   00008D   FB           MOV     R3,A
   \   00008E   8A82         MOV     DPL,R2
   \   000090   8B83         MOV     DPH,R3
   \   000092   78..         MOV     R0,#?V0 + 4
   \   000094   12....       LCALL   ?L_MOV_TO_X
   \   000097   8A82         MOV     DPL,R2
   \   000099   8B83         MOV     DPH,R3
   \   00009B   12....       LCALL   ?XLOAD_R2345
   \   00009E   80..         SJMP    ??Subroutine151_0
    398          }
    399          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    400          CJSON_PUBLIC(char*) cJSON_SetValuestring(cJSON *object, const char *valuestring)
   \                     cJSON_SetValuestring:
    401          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
    402              char *copy = NULL;
    403              /* if object's type is not cJSON_String or is cJSON_IsReference, it should not set valuestring */
    404              if (!(object->type & cJSON_String) || (object->type & cJSON_IsReference))
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   5410         ANL     A,#0x10
   \   00001A   F8           MOV     R0,A
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   5401         ANL     A,#0x1
   \   00001F   F9           MOV     R1,A
   \   000020   7410         MOV     A,#0x10
   \   000022   68           XRL     A,R0
   \   000023   7001         JNZ     ??cJSON_SetValuestring_0
   \   000025   E9           MOV     A,R1
   \                     ??cJSON_SetValuestring_0:
   \   000026   6007         JZ      ??cJSON_SetValuestring_1
    405              {
    406                  return NULL;
   \                     ??cJSON_SetValuestring_2:
   \   000028   7A00         MOV     R2,#0x0
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   02....       LJMP    ??cJSON_SetValuestring_3 & 0xFFFF
    407              }
    408              if (strlen(valuestring) <= strlen(object->valuestring))
   \                     ??cJSON_SetValuestring_1:
   \   00002F                ; Setup parameters for call to function strlen
   \   00002F   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   000032   8A..         MOV     ?V0 + 2,R2
   \   000034   8B..         MOV     ?V0 + 3,R3
   \   000036                ; Setup parameters for call to function strlen
   \   000036   EE           MOV     A,R6
   \   000037   FA           MOV     R2,A
   \   000038   EF           MOV     A,R7
   \   000039   FB           MOV     R3,A
   \   00003A   12....       LCALL   ??strlen?relay
   \   00003D   8A..         MOV     ?V0 + 4,R2
   \   00003F   8B..         MOV     ?V0 + 5,R3
   \   000041   C3           CLR     C
   \   000042   E5..         MOV     A,?V0 + 2
   \   000044   95..         SUBB    A,?V0 + 4
   \   000046   E5..         MOV     A,?V0 + 3
   \   000048   95..         SUBB    A,?V0 + 5
   \   00004A   4021         JC      ??cJSON_SetValuestring_4
    409              {
    410                  strcpy(object->valuestring, valuestring);
   \   00004C   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   00004F   88..         MOV     ?V0 + 0,R0
   \   000051   89..         MOV     ?V0 + 1,R1
   \   000053                ; Setup parameters for call to function strcpy
   \   000053   EE           MOV     A,R6
   \   000054   FC           MOV     R4,A
   \   000055   EF           MOV     A,R7
   \   000056   FD           MOV     R5,A
   \   000057   8882         MOV     DPL,R0
   \   000059   8983         MOV     DPH,R1
   \   00005B   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   00005E   12....       LCALL   ??strcpy?relay
    411                  return object->valuestring;
   \   000061   85..82       MOV     DPL,?V0 + 0
   \   000064   85..83       MOV     DPH,?V0 + 1
   \   000067   E0           MOVX    A,@DPTR
   \   000068   FA           MOV     R2,A
   \   000069   A3           INC     DPTR
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   8049         SJMP    ??cJSON_SetValuestring_5
    412              }
    413              copy = (char*) cJSON_strdup((const unsigned char*)valuestring, &global_hooks);
   \                     ??cJSON_SetValuestring_4:
   \   00006D                ; Setup parameters for call to function cJSON_strdup
   \   00006D   7C..         MOV     R4,#global_hooks & 0xff
   \   00006F   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   000071   EE           MOV     A,R6
   \   000072   FA           MOV     R2,A
   \   000073   EF           MOV     A,R7
   \   000074   FB           MOV     R3,A
   \   000075   12....       LCALL   ??cJSON_strdup?relay
   \   000078   8A..         MOV     ?V0 + 2,R2
   \   00007A   8B..         MOV     ?V0 + 3,R3
   \   00007C   AE..         MOV     R6,?V0 + 2
   \   00007E   AF..         MOV     R7,?V0 + 3
    414              if (copy == NULL)
   \   000080   EE           MOV     A,R6
   \   000081   4F           ORL     A,R7
   \   000082   60A4         JZ      ??cJSON_SetValuestring_2
    415              {
    416                  return NULL;
    417              }
    418              if (object->valuestring != NULL)
   \   000084   85..82       MOV     DPL,?V0 + 0
   \   000087   85..83       MOV     DPH,?V0 + 1
   \   00008A   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_481:
   \   00008D   6011         JZ      ??CrossCallReturnLabel_97
    419              {
    420                  cJSON_free(object->valuestring);
   \   00008F                ; Setup parameters for call to function cJSON_free
   \   00008F   85..82       MOV     DPL,?V0 + 0
   \   000092   85..83       MOV     DPH,?V0 + 1
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   12....       LCALL   ?Subroutine64 & 0xFFFF
    421              }
    422              object->valuestring = copy;
   \                     ??CrossCallReturnLabel_97:
   \   0000A0   85..82       MOV     DPL,?V0 + 0
   \   0000A3   85..83       MOV     DPH,?V0 + 1
   \   0000A6   A3           INC     DPTR
   \   0000A7   A3           INC     DPTR
   \   0000A8   A3           INC     DPTR
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   EE           MOV     A,R6
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   EF           MOV     A,R7
   \   0000B2   F0           MOVX    @DPTR,A
    423          
    424              return copy;
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \                     ??cJSON_SetValuestring_5:
   \   0000B6   FB           MOV     R3,A
   \                     ??cJSON_SetValuestring_3:
   \   0000B7   02....       LJMP    ??Subroutine189_0 & 0xFFFF
    425          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_541:
   \   00000B   12....       LCALL   ??strlen?relay
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2408         ADD     A,#0x8
   \   000004   F8           MOV     R0,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_535:
   \   000003   12....       LCALL   ??cJSON_free?relay
   \   000006   22           RET
    426          
    427          typedef struct
    428          {
    429              unsigned char *buffer;
    430              size_t length;
    431              size_t offset;
    432              size_t depth; /* current nesting depth (for formatted printing) */
    433              cJSON_bool noalloc;
    434              cJSON_bool format; /* is this print a formatted print */
    435              internal_hooks hooks;
    436          } printbuffer;
    437          
    438          /* realloc printbuffer if necessary to have at least "needed" bytes more */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    439          static unsigned char* ensure(printbuffer * const p, size_t needed)
   \                     ensure:
    440          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    441              unsigned char *newbuffer = NULL;
    442              size_t newsize = 0;
    443          
    444              if ((p == NULL) || (p->buffer == NULL))
   \   000009   EA           MOV     A,R2
   \   00000A   45..         ORL     A,?V0 + 1
   \   00000C   6009         JZ      ??ensure_0
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   000015   7007         JNZ     ??ensure_1
    445              {
    446                  return NULL;
   \                     ??ensure_0:
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   02....       LJMP    ??ensure_2 & 0xFFFF
    447              }
    448          
    449              if ((p->length > 0) && (p->offset >= p->length))
   \                     ??ensure_1:
   \   00001E   8A82         MOV     DPL,R2
   \   000020   8B83         MOV     DPH,R3
   \   000022   12....       LCALL   ??Subroutine199_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000025   600D         JZ      ??ensure_3
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000032   50E3         JNC     ??ensure_0
    450              {
    451                  /* make sure that offset is valid */
    452                  return NULL;
    453              }
    454          
    455              if (needed > INT_MAX)
   \                     ??ensure_3:
   \   000034   C3           CLR     C
   \   000035   ED           MOV     A,R5
   \   000036   9480         SUBB    A,#-0x80
   \   000038   50DD         JNC     ??ensure_0
    456              {
    457                  /* sizes bigger than INT_MAX are currently not supported */
    458                  return NULL;
    459              }
    460          
    461              needed += p->offset + 1;
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000045   EC           MOV     A,R4
   \   000046   28           ADD     A,R0
   \   000047   FC           MOV     R4,A
   \   000048   ED           MOV     A,R5
   \   000049   39           ADDC    A,R1
   \   00004A   FD           MOV     R5,A
    462              if (needed <= p->length)
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   C3           CLR     C
   \   000052   E0           MOVX    A,@DPTR
   \   000053   9C           SUBB    A,R4
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   9D           SUBB    A,R5
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   4007         JC      ??ensure_4
    463              {
    464                  return p->buffer + p->offset;
   \   000061   18           DEC     R0
   \   000062   12....       LCALL   ?Subroutine51 & 0xFFFF
    465              }
   \                     ??CrossCallReturnLabel_77:
   \   000065   02....       LJMP    ??ensure_5 & 0xFFFF
    466          
    467              if (p->noalloc) {
   \                     ??ensure_4:
   \   000068   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_473:
   \   00006B   70AA         JNZ     ??ensure_0
    468                  return NULL;
    469              }
    470          
    471              /* calculate new buffer size */
    472              if (needed > (INT_MAX / 2))
   \   00006D   C3           CLR     C
   \   00006E   ED           MOV     A,R5
   \   00006F   9440         SUBB    A,#0x40
   \   000071   400C         JC      ??ensure_6
    473              {
    474                  /* overflow of int, use INT_MAX if possible */
    475                  if (needed <= INT_MAX)
   \   000073   C3           CLR     C
   \   000074   ED           MOV     A,R5
   \   000075   9480         SUBB    A,#-0x80
   \   000077   509E         JNC     ??ensure_0
    476                  {
    477                      newsize = INT_MAX;
   \   000079   7EFF         MOV     R6,#-0x1
   \   00007B   7F7F         MOV     R7,#0x7f
   \   00007D   800B         SJMP    ??ensure_7
    478                  }
    479                  else
    480                  {
    481                      return NULL;
    482                  }
    483              }
    484              else
    485              {
    486                  newsize = needed * 2;
   \                     ??ensure_6:
   \   00007F   EC           MOV     A,R4
   \   000080   C3           CLR     C
   \   000081   33           RLC     A
   \   000082   FC           MOV     R4,A
   \   000083   ED           MOV     A,R5
   \   000084   33           RLC     A
   \   000085   FD           MOV     R5,A
   \   000086   EC           MOV     A,R4
   \   000087   FE           MOV     R6,A
   \   000088   ED           MOV     A,R5
   \   000089   FF           MOV     R7,A
    487              }
    488          
    489              if (p->hooks.reallocate != NULL)
   \                     ??ensure_7:
   \   00008A   EA           MOV     A,R2
   \   00008B   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_636:
   \   00008E   EB           MOV     A,R3
   \   00008F   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   000092   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000095   6034         JZ      ??ensure_8
    490              {
    491                  /* reallocate with realloc if available */
    492                  newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
   \   000097                ; Setup parameters for indirect call
   \   000097   EE           MOV     A,R6
   \   000098   FC           MOV     R4,A
   \   000099   EF           MOV     A,R7
   \   00009A   FD           MOV     R5,A
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000A2   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_603:
   \   0000A5   12....       LCALL   ?CALL_IND
   \   0000A8   8A..         MOV     ?V0 + 2,R2
   \   0000AA   8B..         MOV     ?V0 + 3,R3
    493                  if (newbuffer == NULL)
   \   0000AC   EA           MOV     A,R2
   \   0000AD   45..         ORL     A,?V0 + 3
   \   0000AF   705C         JNZ     ??ensure_9
    494                  {
    495                      p->hooks.deallocate(p->buffer);
   \                     ??ensure_10:
   \   0000B1                ; Setup parameters for indirect call
   \   0000B1   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000B4   12....       LCALL   ?CALL_IND
    496                      p->length = 0;
   \   0000B7   85..82       MOV     DPL,?V0 + 0
   \   0000BA   85..83       MOV     DPH,?V0 + 1
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   E4           CLR     A
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   12....       LCALL   ??Subroutine161_0 & 0xFFFF
    497                      p->buffer = NULL;
    498          
    499                      return NULL;
    500                  }
    501              }
   \                     ??CrossCallReturnLabel_245:
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   F0           MOVX    @DPTR,A
   \   0000C8   02....       LJMP    ??ensure_0 & 0xFFFF
    502              else
    503              {
    504                  /* otherwise reallocate manually */
    505                  newbuffer = (unsigned char*)p->hooks.allocate(newsize);
   \                     ??ensure_8:
   \   0000CB                ; Setup parameters for indirect call
   \   0000CB   EE           MOV     A,R6
   \   0000CC   FA           MOV     R2,A
   \   0000CD   EF           MOV     A,R7
   \   0000CE   FB           MOV     R3,A
   \   0000CF   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   0000D2   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000D5   12....       LCALL   ?CALL_IND
   \   0000D8   8A..         MOV     ?V0 + 2,R2
   \   0000DA   8B..         MOV     ?V0 + 3,R3
    506                  if (!newbuffer)
   \   0000DC   EA           MOV     A,R2
   \   0000DD   45..         ORL     A,?V0 + 3
   \   0000DF   60D0         JZ      ??ensure_10
    507                  {
    508                      p->hooks.deallocate(p->buffer);
    509                      p->length = 0;
    510                      p->buffer = NULL;
    511          
    512                      return NULL;
    513                  }
    514                  
    515                  memcpy(newbuffer, p->buffer, p->offset + 1);
   \   0000E1                ; Setup parameters for call to function memcpy
   \   0000E1   85..82       MOV     DPL,?V0 + 0
   \   0000E4   85..83       MOV     DPH,?V0 + 1
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   E0           MOVX    A,@DPTR
   \   0000EC   2401         ADD     A,#0x1
   \   0000EE   F5..         MOV     ?V0 + 4,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   3400         ADDC    A,#0x0
   \   0000F4   F5..         MOV     ?V0 + 5,A
   \   0000F6   78..         MOV     R0,#?V0 + 4
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   85..82       MOV     DPL,?V0 + 0
   \   0000FE   85..83       MOV     DPH,?V0 + 1
   \   000101   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
    516                  p->hooks.deallocate(p->buffer);
   \   000107                ; Setup parameters for indirect call
   \   000107   12....       LCALL   ?Subroutine26 & 0xFFFF
    517              }
   \                     ??CrossCallReturnLabel_29:
   \   00010A   12....       LCALL   ?CALL_IND
    518              p->length = newsize;
   \                     ??ensure_9:
   \   00010D   85..82       MOV     DPL,?V0 + 0
   \   000110   85..83       MOV     DPH,?V0 + 1
   \   000113   12....       LCALL   ?Subroutine96 & 0xFFFF
    519              p->buffer = newbuffer;
   \                     ??CrossCallReturnLabel_243:
   \   000116   E5..         MOV     A,?V0 + 2
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   E5..         MOV     A,?V0 + 3
   \   00011C   12....       LCALL   ??Subroutine161_0 & 0xFFFF
    520          
    521              return newbuffer + p->offset;
   \                     ??CrossCallReturnLabel_246:
   \   00011F   A3           INC     DPTR
   \   000120   A3           INC     DPTR
   \   000121   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_615:
   \   000124   E5..         MOV     A,?V0 + 2
   \   000126   28           ADD     A,R0
   \   000127   FA           MOV     R2,A
   \   000128   E5..         MOV     A,?V0 + 3
   \                     ??ensure_5:
   \   00012A   39           ADDC    A,R1
   \   00012B   FB           MOV     R3,A
   \                     ??ensure_2:
   \   00012C   02....       LJMP    ??Subroutine189_0 & 0xFFFF
    522          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_532:
   \   000009   E5..         MOV     A,?V0 + 0
   \   00000B   240E         ADD     A,#0xe
   \   00000D   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_647:
   \   000010   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   28           ADD     A,R0
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   EE           MOV     A,R6
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine161_0
   \   000006                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   C3           CLR     C
   \   000001   E0           MOVX    A,@DPTR
   \   000002   98           SUBB    A,R0
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   99           SUBB    A,R1
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_533:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   2410         ADD     A,#0x10
   \   000007   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_648:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine225_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine226_0
   \   000002                ; // Fall through to label ??Subroutine226_0
    523          
    524          /* calculate the new length of the string in a printbuffer and update the offset */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    525          static void update_offset(printbuffer * const buffer)
   \                     update_offset:
    526          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    527              const unsigned char *buffer_pointer = NULL;
    528              if ((buffer == NULL) || (buffer->buffer == NULL))
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6036         JZ      ??update_offset_0
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_447:
   \   000010   602D         JZ      ??update_offset_0
    529              {
    530                  return;
    531              }
    532              buffer_pointer = buffer->buffer + buffer->offset;
    533          
    534              buffer->offset += strlen((const char*)buffer_pointer);
   \   000012   EA           MOV     A,R2
   \   000013   2404         ADD     A,#0x4
   \   000015   F8           MOV     R0,A
   \   000016   EB           MOV     A,R3
   \   000017   3400         ADDC    A,#0x0
   \   000019   F9           MOV     R1,A
   \   00001A   E8           MOV     A,R0
   \   00001B   FE           MOV     R6,A
   \   00001C   E9           MOV     A,R1
   \   00001D   FF           MOV     R7,A
   \   00001E                ; Setup parameters for call to function strlen
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F8           MOV     R0,A
   \   000024   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000027   39           ADDC    A,R1
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??strlen?relay
   \   00002C   8A..         MOV     ?V0 + 0,R2
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   A8..         MOV     R0,?V0 + 0
   \   000032   A9..         MOV     R1,?V0 + 1
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   E0           MOVX    A,@DPTR
   \   000039   28           ADD     A,R0
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   39           ADDC    A,R1
   \   00003E   F0           MOVX    @DPTR,A
    535          }
   \                     ??update_offset_0:
   \   00003F   02....       LJMP    ??Subroutine160_0 & 0xFFFF
    536          
    537          /* securely comparison of floating-point variables */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    538          static cJSON_bool compare_double(double a, double b)
   \                     compare_double:
    539          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   7418         MOV     A,#0x18
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_X
    540              double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
   \   000017   85....       MOV     ?V0 + 8,?V0 + 4
   \   00001A   85....       MOV     ?V0 + 9,?V0 + 5
   \   00001D   85....       MOV     ?V0 + 10,?V0 + 6
   \   000020   85....       MOV     ?V0 + 11,?V0 + 7
   \   000023   E5..         MOV     A,?V0 + 11
   \   000025   C2E7         CLR     0xE0 /* A   */.7
   \   000027   F5..         MOV     ?V0 + 11,A
   \   000029   8A..         MOV     ?V0 + 12,R2
   \   00002B   8B..         MOV     ?V0 + 13,R3
   \   00002D   8C..         MOV     ?V0 + 14,R4
   \   00002F   ED           MOV     A,R5
   \   000030   C2E7         CLR     0xE0 /* A   */.7
   \   000032   F5..         MOV     ?V0 + 15,A
   \   000034   78..         MOV     R0,#?V0 + 8
   \   000036   79..         MOV     R1,#?V0 + 12
   \   000038   12....       LCALL   ?FLT_LT
   \   00003B   5009         JNC     ??compare_double_0
   \   00003D   8A..         MOV     ?V0 + 8,R2
   \   00003F   8B..         MOV     ?V0 + 9,R3
   \   000041   8C..         MOV     ?V0 + 10,R4
   \   000043   ED           MOV     A,R5
   \   000044   8005         SJMP    ??compare_double_1
   \                     ??compare_double_0:
   \   000046   85....       MOV     ?V0 + 11,?V0 + 7
   \   000049   E5..         MOV     A,?V0 + 11
   \                     ??compare_double_1:
   \   00004B   C2E7         CLR     0xE0 /* A   */.7
   \   00004D   F5..         MOV     ?V0 + 11,A
    541              return (fabs(a - b) <= maxVal * DBL_EPSILON);
   \   00004F   90....       MOV     DPTR,#__Constant_34000000
   \   000052   78..         MOV     R0,#?V0 + 12
   \   000054   12....       LCALL   ?L_MOV_X
   \   000057   78..         MOV     R0,#?V0 + 8
   \   000059   79..         MOV     R1,#?V0 + 12
   \   00005B   12....       LCALL   ?FLT_MUL
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   79..         MOV     R1,#?V0 + 4
   \   000062   12....       LCALL   ?FLT_SUB
   \   000065   E5..         MOV     A,?V0 + 3
   \   000067   C2E7         CLR     0xE0 /* A   */.7
   \   000069   F5..         MOV     ?V0 + 3,A
   \   00006B   78..         MOV     R0,#?V0 + 8
   \   00006D   79..         MOV     R1,#?V0 + 0
   \   00006F   12....       LCALL   ?FLT_GE
   \   000072   5004         JNC     ??compare_double_2
   \   000074   D2F0         SETB    B.0
   \   000076   8002         SJMP    ??compare_double_3
   \                     ??compare_double_2:
   \   000078   C2F0         CLR     B.0
   \                     ??compare_double_3:
   \   00007A   A2F0         MOV     C,B.0
   \   00007C   E4           CLR     A
   \   00007D   33           RLC     A
   \   00007E   FA           MOV     R2,A
   \   00007F   7B00         MOV     R3,#0x0
   \   000081   7F10         MOV     R7,#0x10
   \   000083   02....       LJMP    ?BANKED_LEAVE_XDATA
    542          }
    543          
    544          /* Render the number nicely from the given item into a string. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine151_0
   \   000003                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    545          static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_number:
    546          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 30
   \   000005   74E2         MOV     A,#-0x1e
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    547              unsigned char *output_pointer = NULL;
    548              double d = item->valuedouble;
   \   00000E   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000011   78..         MOV     R0,#?V0 + 4
   \   000013   12....       LCALL   ?L_MOV_X
    549              int length = 0;
    550              size_t i = 0;
    551              unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
   \   000016   7404         MOV     A,#0x4
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   AC82         MOV     R4,DPL
   \   00001D   AD83         MOV     R5,DPH
   \   00001F   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000022   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   000025   741A         MOV     A,#0x1a
   \   000027   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    552              unsigned char decimal_point = get_decimal_point();
    553              double test = 0.0;
   \   00002A   90....       MOV     DPTR,#__Constant_0
   \   00002D   12....       LCALL   ?XLOAD_R2345
   \   000030   85..82       MOV     DPL,?XSP + 0
   \   000033   85..83       MOV     DPH,?XSP + 1
   \   000036   12....       LCALL   ?XSTORE_R2345
    554          
    555              if (output_buffer == NULL)
   \   000039   EE           MOV     A,R6
   \   00003A   4F           ORL     A,R7
   \   00003B   7005         JNZ     ??print_number_0
    556              {
    557                  return false;
   \                     ??print_number_1:
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   02....       LJMP    ??print_number_2 & 0xFFFF
    558              }
    559          
    560              /* This checks for NaN and Infinity */
    561              if (isnan(d) || isinf(d))
   \                     ??print_number_0:
   \   000042   78..         MOV     R0,#?V0 + 4
   \   000044   79..         MOV     R1,#?V0 + 4
   \   000046   12....       LCALL   ?FLT_EQ
   \   000049   701C         JNZ     ??print_number_3
   \   00004B   85....       MOV     ?V0 + 0,?V0 + 4
   \   00004E   85....       MOV     ?V0 + 1,?V0 + 5
   \   000051   85....       MOV     ?V0 + 2,?V0 + 6
   \   000054   85....       MOV     ?V0 + 3,?V0 + 7
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   79..         MOV     R1,#?V0 + 4
   \   00005B   12....       LCALL   ?FLT_SUB
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   79..         MOV     R1,#?V0 + 0
   \   000062   12....       LCALL   ?FLT_EQ
   \   000065   6013         JZ      ??print_number_4
    562              {
    563                  length = sprintf((char*)number_buffer, "null");
   \                     ??print_number_3:
   \   000067                ; Setup parameters for call to function sprintf
   \   000067   7C..         MOV     R4,#`?<Constant "null">` & 0xff
   \   000069   7D..         MOV     R5,#(`?<Constant "null">` >> 8) & 0xff
   \   00006B   7404         MOV     A,#0x4
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   AA82         MOV     R2,DPL
   \   000072   AB83         MOV     R3,DPH
   \   000074   12....       LCALL   ??sprintf?relay
   \   000077   02....       LJMP    ??print_number_5 & 0xFFFF
    564              }
    565              else
    566              {
    567                  /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
    568                  length = sprintf((char*)number_buffer, "%1.15g", d);
   \                     ??print_number_4:
   \   00007A                ; Setup parameters for call to function sprintf
   \   00007A   78..         MOV     R0,#?V0 + 4
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00007F   7C..         MOV     R4,#`?<Constant "%1.15g">` & 0xff
   \   000081   7D..         MOV     R5,#(`?<Constant "%1.15g">` >> 8) & 0xff
   \   000083   7408         MOV     A,#0x8
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   AA82         MOV     R2,DPL
   \   00008A   AB83         MOV     R3,DPH
   \   00008C   12....       LCALL   ??sprintf?relay
   \   00008F   7404         MOV     A,#0x4
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   8A..         MOV     ?V0 + 0,R2
   \   000096   8B..         MOV     ?V0 + 1,R3
    569          
    570                  /* Check whether the original double can be recovered */
    571                  if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
   \   000098                ; Setup parameters for call to function sscanf
   \   000098   85..82       MOV     DPL,?XSP + 0
   \   00009B   85..83       MOV     DPH,?XSP + 1
   \   00009E   8582..       MOV     ?V0 + 2,DPL
   \   0000A1   8583..       MOV     ?V0 + 3,DPH
   \   0000A4   78..         MOV     R0,#?V0 + 2
   \   0000A6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A9   7C..         MOV     R4,#`?<Constant "%lg">` & 0xff
   \   0000AB   7D..         MOV     R5,#(`?<Constant "%lg">` >> 8) & 0xff
   \   0000AD   7406         MOV     A,#0x6
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   AA82         MOV     R2,DPL
   \   0000B4   AB83         MOV     R3,DPH
   \   0000B6   12....       LCALL   ??sscanf?relay
   \   0000B9   7402         MOV     A,#0x2
   \   0000BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BE   8A..         MOV     ?V0 + 2,R2
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   65..         XRL     A,?V0 + 2
   \   0000C4   7001         JNZ     ??print_number_6
   \   0000C6   EB           MOV     A,R3
   \                     ??print_number_6:
   \   0000C7   701C         JNZ     ??print_number_7
   \   0000C9                ; Setup parameters for call to function compare_double
   \   0000C9   78..         MOV     R0,#?V0 + 4
   \   0000CB   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000CE   7404         MOV     A,#0x4
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   12....       LCALL   ?XLOAD_R2345
   \   0000D6   12....       LCALL   ??compare_double?relay
   \   0000D9   7404         MOV     A,#0x4
   \   0000DB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DE   8B..         MOV     ?V0 + 3,R3
   \   0000E0   EA           MOV     A,R2
   \   0000E1   45..         ORL     A,?V0 + 3
   \   0000E3   701E         JNZ     ??print_number_8
    572                  {
    573                      /* If not, print with 17 decimal places of precision */
    574                      length = sprintf((char*)number_buffer, "%1.17g", d);
   \                     ??print_number_7:
   \   0000E5                ; Setup parameters for call to function sprintf
   \   0000E5   78..         MOV     R0,#?V0 + 4
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000EA   7C..         MOV     R4,#`?<Constant "%1.17g">` & 0xff
   \   0000EC   7D..         MOV     R5,#(`?<Constant "%1.17g">` >> 8) & 0xff
   \   0000EE   7408         MOV     A,#0x8
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   AA82         MOV     R2,DPL
   \   0000F5   AB83         MOV     R3,DPH
   \   0000F7   12....       LCALL   ??sprintf?relay
   \   0000FA   7404         MOV     A,#0x4
   \   0000FC   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??print_number_5:
   \   0000FF   8A..         MOV     ?V0 + 0,R2
   \   000101   8B..         MOV     ?V0 + 1,R3
    575                  }
    576              }
    577          
    578              /* sprintf failed or buffer overrun occurred */
    579              if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
   \                     ??print_number_8:
   \   000103   C3           CLR     C
   \   000104   E5..         MOV     A,?V0 + 0
   \   000106   941A         SUBB    A,#0x1a
   \   000108   E5..         MOV     A,?V0 + 1
   \   00010A   9400         SUBB    A,#0x0
   \   00010C   4003         JC      $+5
   \   00010E   02....       LJMP    ??print_number_1 & 0xFFFF
    580              {
    581                  return false;
    582              }
    583          
    584              /* reserve appropriate space in the output */
    585              output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
   \   000111                ; Setup parameters for call to function ensure
   \   000111   E5..         MOV     A,?V0 + 0
   \   000113   2401         ADD     A,#0x1
   \   000115   FC           MOV     R4,A
   \   000116   E5..         MOV     A,?V0 + 1
   \   000118   3400         ADDC    A,#0x0
   \   00011A   FD           MOV     R5,A
   \   00011B   12....       LCALL   ??Subroutine169_0 & 0xFFFF
    586              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_303:
   \   00011E   7003         JNZ     $+5
   \   000120   02....       LJMP    ??print_number_1 & 0xFFFF
    587              {
    588                  return false;
    589              }
    590          
    591              /* copy the printed number to the output and replace locale
    592               * dependent decimal point with '.' */
    593              for (i = 0; i < ((size_t)length); i++)
   \   000123   7800         MOV     R0,#0x0
   \   000125   7900         MOV     R1,#0x0
   \   000127   8012         SJMP    ??CrossCallReturnLabel_224
    594              {
    595                  if (number_buffer[i] == decimal_point)
    596                  {
    597                      output_pointer[i] = '.';
    598                      continue;
    599                  }
    600          
    601                  output_pointer[i] = number_buffer[i];
   \                     ??print_number_9:
   \   000129   7404         MOV     A,#0x4
   \   00012B   12....       LCALL   ?XSTACK_DISP0_8
   \   00012E   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000131   C0E0         PUSH    A
   \   000133   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000136   D0E0         POP     A
   \                     ??print_number_10:
   \   000138   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00013B   C3           CLR     C
   \   00013C   E8           MOV     A,R0
   \   00013D   95..         SUBB    A,?V0 + 0
   \   00013F   E9           MOV     A,R1
   \   000140   95..         SUBB    A,?V0 + 1
   \   000142   5013         JNC     ??print_number_11
   \   000144   7404         MOV     A,#0x4
   \   000146   12....       LCALL   ?XSTACK_DISP0_8
   \   000149   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00014C   642E         XRL     A,#0x2e
   \   00014E   70D9         JNZ     ??print_number_9
   \   000150   12....       LCALL   ?Subroutine76 & 0xFFFF
    602              }
   \                     ??CrossCallReturnLabel_116:
   \   000153   742E         MOV     A,#0x2e
   \   000155   80E1         SJMP    ??print_number_10
    603              output_pointer[i] = '\0';
   \                     ??print_number_11:
   \   000157   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   00015A   12....       LCALL   ??Subroutine177_0 & 0xFFFF
    604          
    605              output_buffer->offset += (size_t)length;
   \                     ??CrossCallReturnLabel_340:
   \   00015D   25..         ADD     A,?V0 + 0
   \   00015F   F0           MOVX    @DPTR,A
   \   000160   A3           INC     DPTR
   \   000161   E0           MOVX    A,@DPTR
   \   000162   35..         ADDC    A,?V0 + 1
   \   000164   F0           MOVX    @DPTR,A
    606          
    607              return true;
   \   000165   7A01         MOV     R2,#0x1
   \                     ??print_number_2:
   \   000167   7B00         MOV     R3,#0x0
   \   000169   741E         MOV     A,#0x1e
   \   00016B   02....       LJMP    ?Subroutine2 & 0xFFFF
    608          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   EA           MOV     A,R2
   \   000001   28           ADD     A,R0
   \   000002   F582         MOV     DPL,A
   \   000004   EB           MOV     A,R3
   \   000005   39           ADDC    A,R1
   \   000006   F583         MOV     DPH,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??ensure?relay
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   E4           CLR     A
   \   000001   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine142:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   EA           MOV     A,R2
   \   000001   240C         ADD     A,#0xc
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_646:
   \   000009   22           RET
    609          
    610          /* parse 4 digit hexadecimal number */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    611          static unsigned parse_hex4(const unsigned char * const input)
   \                     parse_hex4:
    612          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    613              unsigned int h = 0;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
    614              size_t i = 0;
    615          
    616              for (i = 0; i < 4; i++)
   \   000009   7C00         MOV     R4,#0x0
   \   00000B   7D00         MOV     R5,#0x0
    617              {
    618                  /* parse digit */
    619                  if ((input[i] >= '0') && (input[i] <= '9'))
   \                     ??parse_hex4_0:
   \   00000D   EA           MOV     A,R2
   \   00000E   2C           ADD     A,R4
   \   00000F   F582         MOV     DPL,A
   \   000011   EB           MOV     A,R3
   \   000012   3D           ADDC    A,R5
   \   000013   F583         MOV     DPH,A
   \   000015   E0           MOVX    A,@DPTR
   \   000016   24D0         ADD     A,#-0x30
   \   000018   C3           CLR     C
   \   000019   940A         SUBB    A,#0xa
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   5038         JNC     ??parse_hex4_1
    620                  {
    621                      h += (unsigned int) input[i] - '0';
   \   00001E   24D0         ADD     A,#-0x30
   \                     ??parse_hex4_2:
   \   000020   FE           MOV     R6,A
   \   000021   E4           CLR     A
   \   000022   34FF         ADDC    A,#-0x1
   \   000024   FF           MOV     R7,A
   \   000025   E8           MOV     A,R0
   \   000026   2E           ADD     A,R6
   \   000027   F8           MOV     R0,A
   \   000028   E9           MOV     A,R1
   \   000029   3F           ADDC    A,R7
   \   00002A   F9           MOV     R1,A
    622                  }
    623                  else if ((input[i] >= 'A') && (input[i] <= 'F'))
    624                  {
    625                      h += (unsigned int) 10 + input[i] - 'A';
    626                  }
    627                  else if ((input[i] >= 'a') && (input[i] <= 'f'))
    628                  {
    629                      h += (unsigned int) 10 + input[i] - 'a';
    630                  }
    631                  else /* invalid */
    632                  {
    633                      return 0;
    634                  }
    635          
    636                  if (i < 3)
   \   00002B   C3           CLR     C
   \   00002C   EC           MOV     A,R4
   \   00002D   9403         SUBB    A,#0x3
   \   00002F   ED           MOV     A,R5
   \   000030   9400         SUBB    A,#0x0
   \   000032   500F         JNC     ??parse_hex4_3
    637                  {
    638                      /* shift left to make place for the next nibble */
    639                      h = h << 4;
   \   000034   88..         MOV     ?V0 + 0,R0
   \   000036   89..         MOV     ?V0 + 1,R1
   \   000038   7404         MOV     A,#0x4
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?S_SHL
   \   00003F   A8..         MOV     R0,?V0 + 0
   \   000041   A9..         MOV     R1,?V0 + 1
    640                  }
   \                     ??parse_hex4_3:
   \   000043   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000046   C3           CLR     C
   \   000047   EC           MOV     A,R4
   \   000048   9404         SUBB    A,#0x4
   \   00004A   ED           MOV     A,R5
   \   00004B   9400         SUBB    A,#0x0
   \   00004D   40BE         JC      ??parse_hex4_0
    641              }
    642          
    643              return h;
   \   00004F   E8           MOV     A,R0
   \   000050   FA           MOV     R2,A
   \   000051   E9           MOV     A,R1
   \   000052   FB           MOV     R3,A
   \                     ??parse_hex4_4:
   \   000053   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   \                     ??parse_hex4_1:
   \   000056   24BF         ADD     A,#-0x41
   \   000058   C3           CLR     C
   \   000059   9406         SUBB    A,#0x6
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   5004         JNC     ??parse_hex4_5
   \   00005E   24C9         ADD     A,#-0x37
   \   000060   80BE         SJMP    ??parse_hex4_2
   \                     ??parse_hex4_5:
   \   000062   249F         ADD     A,#-0x61
   \   000064   C3           CLR     C
   \   000065   9406         SUBB    A,#0x6
   \   000067   5005         JNC     ??parse_hex4_6
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   24A9         ADD     A,#-0x57
   \   00006C   80B2         SJMP    ??parse_hex4_2
   \                     ??parse_hex4_6:
   \   00006E   7A00         MOV     R2,#0x0
   \   000070   7B00         MOV     R3,#0x0
   \   000072   80DF         SJMP    ??parse_hex4_4
    644          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   EC           MOV     A,R4
   \   000001   2401         ADD     A,#0x1
   \   000003   0C           INC     R4
   \   000004   ED           MOV     A,R5
   \   000005   3400         ADDC    A,#0x0
   \   000007   FD           MOV     R5,A
   \   000008   22           RET
    645          
    646          /* converts a UTF-16 literal to UTF-8
    647           * A literal can be one or two sequences of the form \uXXXX */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    648          static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
   \                     utf16_literal_to_utf8:
    649          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine56 & 0xFFFF
    650              long unsigned int codepoint = 0;
    651              unsigned int first_code = 0;
    652              const unsigned char *first_sequence = input_pointer;
    653              unsigned char utf8_length = 0;
    654              unsigned char utf8_position = 0;
    655              unsigned char sequence_length = 0;
    656              unsigned char first_byte_mark = 0;
   \                     ??CrossCallReturnLabel_83:
   \   000015   7F00         MOV     R7,#0x0
    657          
    658              if ((input_end - first_sequence) < 6)
   \   000017   EC           MOV     A,R4
   \   000018   C3           CLR     C
   \   000019   95..         SUBB    A,?V0 + 0
   \   00001B   F8           MOV     R0,A
   \   00001C   ED           MOV     A,R5
   \   00001D   95..         SUBB    A,?V0 + 1
   \   00001F   F9           MOV     R1,A
   \   000020   C3           CLR     C
   \   000021   E8           MOV     A,R0
   \   000022   9406         SUBB    A,#0x6
   \   000024   E9           MOV     A,R1
   \   000025   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_490:
   \   000028   5003         JNC     $+5
   \   00002A   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    659              {
    660                  /* input ends unexpectedly */
    661                  goto fail;
    662              }
    663          
    664              /* get the first utf16 sequence */
    665              first_code = parse_hex4(first_sequence + 2);
   \   00002D                ; Setup parameters for call to function parse_hex4
   \   00002D   EA           MOV     A,R2
   \   00002E   2402         ADD     A,#0x2
   \   000030   0A           INC     R2
   \   000031   0A           INC     R2
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   ??parse_hex4?relay
   \   000039   8A..         MOV     ?V0 + 6,R2
   \   00003B   8B..         MOV     ?V0 + 7,R3
    666          
    667              /* check that the code is valid */
    668              if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
   \   00003D   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000040   5003         JNC     $+5
   \   000042   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    669              {
    670                  goto fail;
    671              }
    672          
    673              /* UTF16 surrogate pair */
    674              if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
   \   000045   EA           MOV     A,R2
   \   000046   2400         ADD     A,#0x0
   \   000048   EB           MOV     A,R3
   \   000049   3428         ADDC    A,#0x28
   \   00004B   C3           CLR     C
   \   00004C   9404         SUBB    A,#0x4
   \   00004E   506B         JNC     ??utf16_literal_to_utf8_1
    675              {
    676                  const unsigned char *second_sequence = first_sequence + 6;
   \   000050   E5..         MOV     A,?V0 + 0
   \   000052   2406         ADD     A,#0x6
   \   000054   F8           MOV     R0,A
   \   000055   E5..         MOV     A,?V0 + 1
   \   000057   3400         ADDC    A,#0x0
   \   000059   F9           MOV     R1,A
    677                  unsigned int second_code = 0;
    678                  sequence_length = 12; /* \uXXXX\uXXXX */
   \   00005A   7E0C         MOV     R6,#0xc
    679          
    680                  if ((input_end - second_sequence) < 6)
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   C3           CLR     C
   \   00005F   98           SUBB    A,R0
   \   000060   FA           MOV     R2,A
   \   000061   E5..         MOV     A,?V0 + 3
   \   000063   99           SUBB    A,R1
   \   000064   FB           MOV     R3,A
   \   000065   C3           CLR     C
   \   000066   EA           MOV     A,R2
   \   000067   9406         SUBB    A,#0x6
   \   000069   EB           MOV     A,R3
   \   00006A   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_491:
   \   00006D   5003         JNC     $+5
   \   00006F   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    681                  {
    682                      /* input ends unexpectedly */
    683                      goto fail;
    684                  }
    685          
    686                  if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
   \   000072   8882         MOV     DPL,R0
   \   000074   8983         MOV     DPH,R1
   \   000076   E0           MOVX    A,@DPTR
   \   000077   645C         XRL     A,#0x5c
   \   000079   6003         JZ      $+5
   \   00007B   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   6475         XRL     A,#0x75
   \   000082   6003         JZ      $+5
   \   000084   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    687                  {
    688                      /* missing second half of the surrogate pair */
    689                      goto fail;
    690                  }
    691          
    692                  /* get the second utf16 sequence */
    693                  second_code = parse_hex4(second_sequence + 2);
   \   000087                ; Setup parameters for call to function parse_hex4
   \   000087   E8           MOV     A,R0
   \   000088   2402         ADD     A,#0x2
   \   00008A   FA           MOV     R2,A
   \   00008B   E9           MOV     A,R1
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   FB           MOV     R3,A
   \   00008F   12....       LCALL   ??parse_hex4?relay
   \   000092   8A..         MOV     ?V0 + 0,R2
    694                  /* check that the code is valid */
    695                  if ((second_code < 0xDC00) || (second_code > 0xDFFF))
   \   000094   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000097   4003         JC      $+5
   \   000099   02....       LJMP    ??utf16_literal_to_utf8_0 & 0xFFFF
    696                  {
    697                      /* invalid second half of the surrogate pair */
    698                      goto fail;
    699                  }
    700          
    701          
    702                  /* calculate the unicode codepoint from the surrogate pair */
    703                  codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
   \   00009C   740A         MOV     A,#0xa
   \   00009E   78..         MOV     R0,#?V0 + 6
   \   0000A0   12....       LCALL   ?S_SHL
   \   0000A3   EB           MOV     A,R3
   \   0000A4   5403         ANL     A,#0x3
   \   0000A6   F9           MOV     R1,A
   \   0000A7   E5..         MOV     A,?V0 + 7
   \   0000A9   49           ORL     A,R1
   \   0000AA   F5..         MOV     ?V0 + 1,A
   \   0000AC   E4           CLR     A
   \   0000AD   F5..         MOV     ?V0 + 2,A
   \   0000AF   F5..         MOV     ?V0 + 3,A
   \   0000B1   90....       MOV     DPTR,#__Constant_10000
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?L_ADD_X
   \   0000B9   800B         SJMP    ??utf16_literal_to_utf8_2
    704              }
    705              else
    706              {
    707                  sequence_length = 6; /* \uXXXX */
   \                     ??utf16_literal_to_utf8_1:
   \   0000BB   7E06         MOV     R6,#0x6
    708                  codepoint = first_code;
   \   0000BD   8A..         MOV     ?V0 + 0,R2
   \   0000BF   8B..         MOV     ?V0 + 1,R3
   \   0000C1   E4           CLR     A
   \   0000C2   F5..         MOV     ?V0 + 2,A
   \   0000C4   F5..         MOV     ?V0 + 3,A
    709              }
    710          
    711              /* encode as UTF-8
    712               * takes at maximum 4 bytes to encode:
    713               * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    714              if (codepoint < 0x80)
   \                     ??utf16_literal_to_utf8_2:
   \   0000C6   90....       MOV     DPTR,#__Constant_80
   \   0000C9   78..         MOV     R0,#?V0 + 0
   \   0000CB   12....       LCALL   ?UL_GE_X
   \   0000CE   4004         JC      ??utf16_literal_to_utf8_3
    715              {
    716                  /* normal ascii, encoding 0xxxxxxx */
    717                  utf8_length = 1;
   \   0000D0   7901         MOV     R1,#0x1
   \   0000D2   802E         SJMP    ??utf16_literal_to_utf8_4
    718              }
    719              else if (codepoint < 0x800)
   \                     ??utf16_literal_to_utf8_3:
   \   0000D4   90....       MOV     DPTR,#__Constant_800
   \   0000D7   78..         MOV     R0,#?V0 + 0
   \   0000D9   12....       LCALL   ?UL_GE_X
   \   0000DC   4006         JC      ??utf16_literal_to_utf8_5
    720              {
    721                  /* two bytes, encoding 110xxxxx 10xxxxxx */
    722                  utf8_length = 2;
   \   0000DE   7902         MOV     R1,#0x2
    723                  first_byte_mark = 0xC0; /* 11000000 */
   \   0000E0   7FC0         MOV     R7,#-0x40
   \   0000E2   801E         SJMP    ??utf16_literal_to_utf8_4
    724              }
    725              else if (codepoint < 0x10000)
   \                     ??utf16_literal_to_utf8_5:
   \   0000E4   90....       MOV     DPTR,#__Constant_10000
   \   0000E7   78..         MOV     R0,#?V0 + 0
   \   0000E9   12....       LCALL   ?UL_GE_X
   \   0000EC   4006         JC      ??utf16_literal_to_utf8_6
    726              {
    727                  /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
    728                  utf8_length = 3;
   \   0000EE   7903         MOV     R1,#0x3
    729                  first_byte_mark = 0xE0; /* 11100000 */
   \   0000F0   7FE0         MOV     R7,#-0x20
   \   0000F2   800E         SJMP    ??utf16_literal_to_utf8_4
    730              }
    731              else if (codepoint <= 0x10FFFF)
   \                     ??utf16_literal_to_utf8_6:
   \   0000F4   90....       MOV     DPTR,#__Constant_110000
   \   0000F7   78..         MOV     R0,#?V0 + 0
   \   0000F9   12....       LCALL   ?UL_GE_X
   \   0000FC   406B         JC      ??utf16_literal_to_utf8_0
    732              {
    733                  /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
    734                  utf8_length = 4;
   \   0000FE   7904         MOV     R1,#0x4
    735                  first_byte_mark = 0xF0; /* 11110000 */
   \   000100   7FF0         MOV     R7,#-0x10
    736              }
    737              else
    738              {
    739                  /* invalid unicode codepoint */
    740                  goto fail;
    741              }
    742          
    743              /* encode as utf8 */
    744              for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
   \                     ??utf16_literal_to_utf8_4:
   \   000102   74FF         MOV     A,#-0x1
   \   000104   29           ADD     A,R1
   \   000105   FA           MOV     R2,A
   \   000106   8026         SJMP    ??utf16_literal_to_utf8_7
    745              {
    746                  /* 10xxxxxx */
    747                  (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
   \                     ??utf16_literal_to_utf8_8:
   \   000108   E5..         MOV     A,?V0 + 0
   \   00010A   54BF         ANL     A,#0xbf
   \   00010C   4480         ORL     A,#0x80
   \   00010E   C0E0         PUSH    A
   \   000110   EA           MOV     A,R2
   \   000111   FC           MOV     R4,A
   \   000112   85..82       MOV     DPL,?V0 + 4
   \   000115   85..83       MOV     DPH,?V0 + 5
   \   000118   E0           MOVX    A,@DPTR
   \   000119   2C           ADD     A,R4
   \   00011A   F8           MOV     R0,A
   \   00011B   A3           INC     DPTR
   \   00011C   E0           MOVX    A,@DPTR
   \   00011D   3400         ADDC    A,#0x0
   \   00011F   8882         MOV     DPL,R0
   \   000121   F583         MOV     DPH,A
   \   000123   D0E0         POP     A
   \   000125   F0           MOVX    @DPTR,A
    748                  codepoint >>= 6;
   \   000126   7406         MOV     A,#0x6
   \   000128   78..         MOV     R0,#?V0 + 0
   \   00012A   12....       LCALL   ?UL_SHR
    749              }
   \   00012D   1A           DEC     R2
   \                     ??utf16_literal_to_utf8_7:
   \   00012E   EA           MOV     A,R2
   \   00012F   70D7         JNZ     ??utf16_literal_to_utf8_8
    750              /* encode first byte */
    751              if (utf8_length > 1)
   \   000131   E9           MOV     A,R1
   \   000132   C3           CLR     C
   \   000133   9402         SUBB    A,#0x2
   \   000135   E5..         MOV     A,?V0 + 0
   \   000137   4003         JC      ??utf16_literal_to_utf8_9
    752              {
    753                  (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
   \   000139   4F           ORL     A,R7
   \   00013A   8002         SJMP    ??utf16_literal_to_utf8_10
    754              }
    755              else
    756              {
    757                  (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
   \                     ??utf16_literal_to_utf8_9:
   \   00013C   547F         ANL     A,#0x7f
   \                     ??utf16_literal_to_utf8_10:
   \   00013E   C0E0         PUSH    A
   \   000140   85..82       MOV     DPL,?V0 + 4
   \   000143   85..83       MOV     DPH,?V0 + 5
    758              }
   \   000146   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000149   D0E0         POP     A
   \   00014B   F0           MOVX    @DPTR,A
    759          
    760              *output_pointer += utf8_length;
   \   00014C   E9           MOV     A,R1
   \   00014D   F8           MOV     R0,A
   \   00014E   85..82       MOV     DPL,?V0 + 4
   \   000151   85..83       MOV     DPH,?V0 + 5
   \   000154   E0           MOVX    A,@DPTR
   \   000155   28           ADD     A,R0
   \   000156   F8           MOV     R0,A
   \   000157   A3           INC     DPTR
   \   000158   E0           MOVX    A,@DPTR
   \   000159   3400         ADDC    A,#0x0
   \   00015B   F9           MOV     R1,A
   \   00015C   85..82       MOV     DPL,?V0 + 4
   \   00015F   85..83       MOV     DPH,?V0 + 5
   \   000162   12....       LCALL   ??Subroutine195_0 & 0xFFFF
    761          
    762              return sequence_length;
   \                     ??CrossCallReturnLabel_416:
   \   000165   EE           MOV     A,R6
   \   000166   F9           MOV     R1,A
   \   000167   8002         SJMP    ??utf16_literal_to_utf8_11
    763          
    764          fail:
    765              return 0;
   \                     ??utf16_literal_to_utf8_0:
   \   000169   7900         MOV     R1,#0x0
   \                     ??utf16_literal_to_utf8_11:
   \   00016B   02....       LJMP    ?Subroutine6 & 0xFFFF
    766          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   EA           MOV     A,R2
   \   000001   2400         ADD     A,#0x0
   \   000003   EB           MOV     A,R3
   \   000004   3424         ADDC    A,#0x24
   \   000006   C3           CLR     C
   \   000007   9404         SUBB    A,#0x4
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine203_0:
   \   000000   9400         SUBB    A,#0x0
   \   000002   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000004   65D0         XRL     A,PSW
   \   000006   33           RLC     A
   \   000007   22           RET
    767          
    768          /* Parse the input text into an unescaped cinput, and populate item. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    769          static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_string:
    770          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   000015   E0           MOVX    A,@DPTR
   \   000016   28           ADD     A,R0
   \   000017   F8           MOV     R0,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   39           ADDC    A,R1
   \   00001B   F9           MOV     R1,A
   \   00001C   8882         MOV     DPL,R0
   \   00001E   8983         MOV     DPH,R1
   \   000020   A3           INC     DPTR
   \   000021   AE82         MOV     R6,DPL
   \   000023   AF83         MOV     R7,DPH
    771              const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
    772              const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
   \   000025   8582..       MOV     ?V0 + 2,DPL
   \   000028   8583..       MOV     ?V0 + 3,DPH
    773              unsigned char *output_pointer = NULL;
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   F0           MOVX    @DPTR,A
    774              unsigned char *output = NULL;
    775          
    776              /* not a string */
    777              if (buffer_at_offset(input_buffer)[0] != '\"')
   \   000035   8882         MOV     DPL,R0
   \   000037   8983         MOV     DPH,R1
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6422         XRL     A,#0x22
   \   00003C   6003         JZ      $+5
   \   00003E   02....       LJMP    ??parse_string_0 & 0xFFFF
    778              {
    779                  goto fail;
    780              }
    781          
    782              {
    783                  /* calculate approximate size of the output (overestimate) */
    784                  size_t allocation_length = 0;
    785                  size_t skipped_bytes = 0;
   \   000041   7800         MOV     R0,#0x0
   \   000043   7900         MOV     R1,#0x0
   \   000045   8043         SJMP    ??parse_string_1
    786                  while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
    787                  {
    788                      /* is escape sequence */
    789                      if (input_end[0] == '\\')
   \                     ??parse_string_2:
   \   000047   E0           MOVX    A,@DPTR
   \   000048   645C         XRL     A,#0x5c
   \   00004A   7031         JNZ     ??parse_string_3
    790                      {
    791                          if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
   \   00004C   A3           INC     DPTR
   \   00004D   C082         PUSH    DPL
   \   00004F   C083         PUSH    DPH
   \   000051   85..82       MOV     DPL,?V0 + 0
   \   000054   85..83       MOV     DPH,?V0 + 1
   \   000057   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   00005A   D083         POP     DPH
   \   00005C   D082         POP     DPL
   \   00005E   E582         MOV     A,DPL
   \   000060   C3           CLR     C
   \   000061   9A           SUBB    A,R2
   \   000062   FC           MOV     R4,A
   \   000063   E583         MOV     A,DPH
   \   000065   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000068   4003         JC      $+5
   \   00006A   02....       LJMP    ??parse_string_0 & 0xFFFF
    792                          {
    793                              /* prevent buffer overflow when last input character is a backslash */
    794                              goto fail;
    795                          }
    796                          skipped_bytes++;
   \   00006D   12....       LCALL   ??Subroutine150_0 & 0xFFFF
    797                          input_end++;
   \                     ??CrossCallReturnLabel_225:
   \   000070   85..82       MOV     DPL,?V0 + 2
   \   000073   85..83       MOV     DPH,?V0 + 3
   \   000076   A3           INC     DPTR
   \   000077   8582..       MOV     ?V0 + 2,DPL
   \   00007A   8583..       MOV     ?V0 + 3,DPH
    798                      }
    799                      input_end++;
   \                     ??parse_string_3:
   \   00007D   85..82       MOV     DPL,?V0 + 2
   \   000080   85..83       MOV     DPH,?V0 + 3
   \   000083   A3           INC     DPTR
   \   000084   8582..       MOV     ?V0 + 2,DPL
   \   000087   8583..       MOV     ?V0 + 3,DPH
    800                  }
   \                     ??parse_string_1:
   \   00008A   85..82       MOV     DPL,?V0 + 0
   \   00008D   85..83       MOV     DPH,?V0 + 1
   \   000090   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   000093   E5..         MOV     A,?V0 + 2
   \   000095   C3           CLR     C
   \   000096   9A           SUBB    A,R2
   \   000097   FC           MOV     R4,A
   \   000098   E5..         MOV     A,?V0 + 3
   \   00009A   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   00009D   4003         JC      $+5
   \   00009F   02....       LJMP    ??parse_string_0 & 0xFFFF
   \   0000A2   85..82       MOV     DPL,?V0 + 2
   \   0000A5   85..83       MOV     DPH,?V0 + 3
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   6422         XRL     A,#0x22
   \   0000AB   709A         JNZ     ??parse_string_2
   \   0000AD   E0           MOVX    A,@DPTR
   \   0000AE   6422         XRL     A,#0x22
   \   0000B0   6003         JZ      $+5
   \   0000B2   02....       LJMP    ??parse_string_0 & 0xFFFF
    801                  if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
    802                  {
    803                      goto fail; /* string ended unexpectedly */
    804                  }
    805          
    806                  /* This is at most how much we need for the output */
    807                  allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
    808                  output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
   \   0000B5                ; Setup parameters for indirect call
   \   0000B5   85..82       MOV     DPL,?V0 + 0
   \   0000B8   85..83       MOV     DPH,?V0 + 1
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000C2   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   0000C5   E5..         MOV     A,?V0 + 2
   \   0000C7   C3           CLR     C
   \   0000C8   9A           SUBB    A,R2
   \   0000C9   FA           MOV     R2,A
   \   0000CA   E5..         MOV     A,?V0 + 3
   \   0000CC   9B           SUBB    A,R3
   \   0000CD   FB           MOV     R3,A
   \   0000CE   EA           MOV     A,R2
   \   0000CF   C3           CLR     C
   \   0000D0   98           SUBB    A,R0
   \   0000D1   F8           MOV     R0,A
   \   0000D2   EB           MOV     A,R3
   \   0000D3   99           SUBB    A,R1
   \   0000D4   F9           MOV     R1,A
   \   0000D5   E8           MOV     A,R0
   \   0000D6   2401         ADD     A,#0x1
   \   0000D8   FA           MOV     R2,A
   \   0000D9   E9           MOV     A,R1
   \   0000DA   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   0000DD   A3           INC     DPTR
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   0000E8   12....       LCALL   ?CALL_IND
   \   0000EB   8A..         MOV     ?V0 + 4,R2
   \   0000ED   8B..         MOV     ?V0 + 5,R3
    809                  if (output == NULL)
   \   0000EF   EA           MOV     A,R2
   \   0000F0   45..         ORL     A,?V0 + 5
   \   0000F2   7003         JNZ     $+5
   \   0000F4   02....       LJMP    ??parse_string_0 & 0xFFFF
    810                  {
    811                      goto fail; /* allocation failure */
    812                  }
    813              }
    814          
    815              output_pointer = output;
   \   0000F7   85..82       MOV     DPL,?XSP + 0
   \   0000FA   85..83       MOV     DPH,?XSP + 1
   \   0000FD   EA           MOV     A,R2
   \   0000FE   F0           MOVX    @DPTR,A
   \   0000FF   A3           INC     DPTR
   \   000100   EB           MOV     A,R3
   \   000101   8022         SJMP    ??parse_string_4
    816              /* loop through the string literal */
    817              while (input_pointer < input_end)
    818              {
    819                  if (*input_pointer != '\\')
    820                  {
    821                      *output_pointer++ = *input_pointer++;
   \                     ??parse_string_5:
   \   000103   E0           MOVX    A,@DPTR
   \   000104   C0E0         PUSH    A
   \   000106   12....       LCALL   ?Subroutine69 & 0xFFFF
    822                  }
   \                     ??CrossCallReturnLabel_267:
   \   000109   D0E0         POP     A
   \   00010B   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   00010E   AE82         MOV     R6,DPL
   \   000110   AF83         MOV     R7,DPH
   \   000112   85..82       MOV     DPL,?XSP + 0
   \   000115   85..83       MOV     DPH,?XSP + 1
   \   000118   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   00011B   85..82       MOV     DPL,?XSP + 0
   \   00011E   85..83       MOV     DPH,?XSP + 1
   \   000121   E8           MOV     A,R0
   \   000122   F0           MOVX    @DPTR,A
   \   000123   A3           INC     DPTR
   \   000124   E9           MOV     A,R1
   \                     ??parse_string_4:
   \   000125   F0           MOVX    @DPTR,A
   \                     ??parse_string_6:
   \   000126   C3           CLR     C
   \   000127   EE           MOV     A,R6
   \   000128   95..         SUBB    A,?V0 + 2
   \   00012A   EF           MOV     A,R7
   \   00012B   95..         SUBB    A,?V0 + 3
   \   00012D   4003         JC      $+5
   \   00012F   02....       LJMP    ??parse_string_7 & 0xFFFF
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   E0           MOVX    A,@DPTR
   \   000137   645C         XRL     A,#0x5c
   \   000139   70C8         JNZ     ??parse_string_5
    823                  /* escape sequence */
    824                  else
    825                  {
    826                      unsigned char sequence_length = 2;
   \   00013B   75..02       MOV     ?V0 + 8,#0x2
    827                      if ((input_end - input_pointer) < 1)
   \   00013E   E5..         MOV     A,?V0 + 2
   \   000140   C3           CLR     C
   \   000141   9E           SUBB    A,R6
   \   000142   F8           MOV     R0,A
   \   000143   E5..         MOV     A,?V0 + 3
   \   000145   9F           SUBB    A,R7
   \   000146   F9           MOV     R1,A
   \   000147   C3           CLR     C
   \   000148   E8           MOV     A,R0
   \   000149   9401         SUBB    A,#0x1
   \   00014B   E9           MOV     A,R1
   \   00014C   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_492:
   \   00014F   5003         JNC     $+5
   \   000151   02....       LJMP    ??parse_string_8 & 0xFFFF
    828                      {
    829                          goto fail;
    830                      }
    831          
    832                      switch (input_pointer[1])
   \   000154   A3           INC     DPTR
   \   000155   E0           MOVX    A,@DPTR
   \   000156   24DE         ADD     A,#-0x22
   \   000158   6048         JZ      ??parse_string_9
   \   00015A   24F3         ADD     A,#-0xd
   \   00015C   6044         JZ      ??parse_string_9
   \   00015E   24D3         ADD     A,#-0x2d
   \   000160   6040         JZ      ??parse_string_9
   \   000162   24FA         ADD     A,#-0x6
   \   000164   6016         JZ      ??parse_string_10
   \   000166   24FC         ADD     A,#-0x4
   \   000168   601C         JZ      ??parse_string_11
   \   00016A   24F8         ADD     A,#-0x8
   \   00016C   601F         JZ      ??parse_string_12
   \   00016E   24FC         ADD     A,#-0x4
   \   000170   6022         JZ      ??parse_string_13
   \   000172   24FE         ADD     A,#-0x2
   \   000174   6025         JZ      ??parse_string_14
   \   000176   14           DEC     A
   \   000177   6038         JZ      ??parse_string_15
   \   000179   02....       LJMP    ??parse_string_8 & 0xFFFF
    833                      {
    834                          case 'b':
    835                              *output_pointer++ = '\b';
   \                     ??parse_string_10:
   \   00017C   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   00017F   7408         MOV     A,#0x8
   \                     ??parse_string_16:
   \   000181   12....       LCALL   ?Subroutine32 & 0xFFFF
    836                              break;
   \                     ??CrossCallReturnLabel_38:
   \   000184   8051         SJMP    ??parse_string_17
    837                          case 'f':
    838                              *output_pointer++ = '\f';
   \                     ??parse_string_11:
   \   000186   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000189   740C         MOV     A,#0xc
   \   00018B   80F4         SJMP    ??parse_string_16
    839                              break;
    840                          case 'n':
    841                              *output_pointer++ = '\n';
   \                     ??parse_string_12:
   \   00018D   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000190   740A         MOV     A,#0xa
   \   000192   80ED         SJMP    ??parse_string_16
    842                              break;
    843                          case 'r':
    844                              *output_pointer++ = '\r';
   \                     ??parse_string_13:
   \   000194   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000197   740D         MOV     A,#0xd
   \   000199   80E6         SJMP    ??parse_string_16
    845                              break;
    846                          case 't':
    847                              *output_pointer++ = '\t';
   \                     ??parse_string_14:
   \   00019B   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   00019E   7409         MOV     A,#0x9
   \   0001A0   80DF         SJMP    ??parse_string_16
    848                              break;
    849                          case '\"':
    850                          case '\\':
    851                          case '/':
    852                              *output_pointer++ = input_pointer[1];
   \                     ??parse_string_9:
   \   0001A2   8E82         MOV     DPL,R6
   \   0001A4   8F83         MOV     DPH,R7
   \   0001A6   A3           INC     DPTR
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   C0E0         PUSH    A
   \   0001AA   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   0001AD   D0E0         POP     A
   \   0001AF   80D0         SJMP    ??parse_string_16
    853                              break;
    854          
    855                          /* UTF-16 literal */
    856                          case 'u':
    857                              sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
   \                     ??parse_string_15:
   \   0001B1                ; Setup parameters for call to function utf16_literal_to_utf8
   \   0001B1   85..82       MOV     DPL,?XSP + 0
   \   0001B4   85..83       MOV     DPH,?XSP + 1
   \   0001B7   8582..       MOV     ?V0 + 8,DPL
   \   0001BA   8583..       MOV     ?V0 + 9,DPH
   \   0001BD   78..         MOV     R0,#?V0 + 8
   \   0001BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C2   AC..         MOV     R4,?V0 + 2
   \   0001C4   AD..         MOV     R5,?V0 + 3
   \   0001C6   EE           MOV     A,R6
   \   0001C7   FA           MOV     R2,A
   \   0001C8   EF           MOV     A,R7
   \   0001C9   FB           MOV     R3,A
   \   0001CA   12....       LCALL   ??utf16_literal_to_utf8?relay
   \   0001CD   7402         MOV     A,#0x2
   \   0001CF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D2   E9           MOV     A,R1
   \   0001D3   F5..         MOV     ?V0 + 8,A
    858                              if (sequence_length == 0)
   \   0001D5   6048         JZ      ??parse_string_8
    859                              {
    860                                  /* failed to convert UTF16-literal to UTF-8 */
    861                                  goto fail;
    862                              }
    863                              break;
    864          
    865                          default:
    866                              goto fail;
    867                      }
    868                      input_pointer += sequence_length;
   \                     ??parse_string_17:
   \   0001D7   EE           MOV     A,R6
   \   0001D8   25..         ADD     A,?V0 + 8
   \   0001DA   FE           MOV     R6,A
   \   0001DB   EF           MOV     A,R7
   \   0001DC   3400         ADDC    A,#0x0
   \   0001DE   FF           MOV     R7,A
   \   0001DF   02....       LJMP    ??parse_string_6 & 0xFFFF
    869                  }
    870              }
    871          
    872              /* zero terminate the output */
    873              *output_pointer = '\0';
   \                     ??parse_string_7:
   \   0001E2   85..82       MOV     DPL,?XSP + 0
   \   0001E5   85..83       MOV     DPH,?XSP + 1
   \   0001E8   12....       LCALL   ?Subroutine62 & 0xFFFF
    874          
    875              item->type = cJSON_String;
   \                     ??CrossCallReturnLabel_93:
   \   0001EB   85..82       MOV     DPL,?V0 + 6
   \   0001EE   85..83       MOV     DPH,?V0 + 7
   \   0001F1   A3           INC     DPTR
   \   0001F2   A3           INC     DPTR
   \   0001F3   A3           INC     DPTR
   \   0001F4   A3           INC     DPTR
   \   0001F5   A3           INC     DPTR
   \   0001F6   A3           INC     DPTR
   \   0001F7   7410         MOV     A,#0x10
   \   0001F9   12....       LCALL   ?Subroutine97 & 0xFFFF
    876              item->valuestring = (char*)output;
   \                     ??CrossCallReturnLabel_152:
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   E5..         MOV     A,?V0 + 4
   \   000202   F0           MOVX    @DPTR,A
   \   000203   A3           INC     DPTR
   \   000204   E5..         MOV     A,?V0 + 5
   \   000206   12....       LCALL   ??Subroutine161_0 & 0xFFFF
    877          
    878              input_buffer->offset = (size_t) (input_end - input_buffer->content);
    879              input_buffer->offset++;
   \                     ??CrossCallReturnLabel_247:
   \   000209   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_610:
   \   00020C   E5..         MOV     A,?V0 + 2
   \   00020E   C3           CLR     C
   \   00020F   98           SUBB    A,R0
   \   000210   F8           MOV     R0,A
   \   000211   E5..         MOV     A,?V0 + 3
   \   000213   99           SUBB    A,R1
   \   000214   F9           MOV     R1,A
   \   000215   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000218   12....       LCALL   ?Subroutine95 & 0xFFFF
    880          
    881              return true;
   \                     ??CrossCallReturnLabel_437:
   \   00021B   7A01         MOV     R2,#0x1
   \   00021D   8032         SJMP    ??parse_string_18
    882          
    883          fail:
    884              if (output != NULL)
    885              {
    886                  input_buffer->hooks.deallocate(output);
   \                     ??parse_string_8:
   \   00021F                ; Setup parameters for indirect call
   \   00021F   AA..         MOV     R2,?V0 + 4
   \   000221   AB..         MOV     R3,?V0 + 5
   \   000223   85..82       MOV     DPL,?V0 + 0
   \   000226   85..83       MOV     DPH,?V0 + 1
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   A3           INC     DPTR
   \   000231   A3           INC     DPTR
   \   000232   A3           INC     DPTR
   \   000233   12....       LCALL   ??Subroutine162_0 & 0xFFFF
    887              }
   \                     ??CrossCallReturnLabel_255:
   \   000236   12....       LCALL   ?CALL_IND
    888          
    889              if (input_pointer != NULL)
   \                     ??parse_string_0:
   \   000239   EE           MOV     A,R6
   \   00023A   4F           ORL     A,R7
   \   00023B   6012         JZ      ??CrossCallReturnLabel_438
    890              {
    891                  input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
   \   00023D   85..82       MOV     DPL,?V0 + 0
   \   000240   85..83       MOV     DPH,?V0 + 1
   \   000243   12....       LCALL   ?Subroutine45 & 0xFFFF
    892              }
   \                     ??CrossCallReturnLabel_67:
   \   000246   C3           CLR     C
   \   000247   98           SUBB    A,R0
   \   000248   F8           MOV     R0,A
   \   000249   EF           MOV     A,R7
   \   00024A   99           SUBB    A,R1
   \   00024B   F9           MOV     R1,A
   \   00024C   12....       LCALL   ?Subroutine95 & 0xFFFF
    893          
    894              return false;
   \                     ??CrossCallReturnLabel_438:
   \   00024F   7A00         MOV     R2,#0x0
   \                     ??parse_string_18:
   \   000251   7B00         MOV     R3,#0x0
   \   000253   7402         MOV     A,#0x2
   \   000255   12....       LCALL   ?DEALLOC_XSTACK8
   \   000258   02....       LJMP    ?Subroutine6 & 0xFFFF
    895          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine152_0
   \   000006                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine153_0
   \   000002                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_633:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine162_0
   \   000006                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   85..82       MOV     DPL,?V0 + 0
   \   000008   85..83       MOV     DPH,?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   85..82       MOV     DPL,?V0 + 6
   \   000007   85..83       MOV     DPH,?V0 + 7
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   9B           SUBB    A,R3
   \   000001   FD           MOV     R5,A
   \   000002   85..82       MOV     DPL,?V0 + 0
   \   000005   85..83       MOV     DPH,?V0 + 1
   \   000008                REQUIRE ??Subroutine179_0
   \   000008                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine143:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_628:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine192_0
   \   000006                ; // Fall through to label ??Subroutine192_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine192_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine193_0
   \   000002                ; // Fall through to label ??Subroutine193_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine193_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine194_0
   \   000001                ; // Fall through to label ??Subroutine194_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine194_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine195_0
   \   000001                ; // Fall through to label ??Subroutine195_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E8           MOV     A,R0
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   E9           MOV     A,R1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   22           RET
    896          
    897          /* Render the cstring provided to an escaped version that can be printed. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    898          static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
   \                     print_string_ptr:
    899          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
    900              const unsigned char *input_pointer = NULL;
    901              unsigned char *output = NULL;
    902              unsigned char *output_pointer = NULL;
    903              size_t output_length = 0;
    904              /* numbers of additional characters needed for escaping */
    905              size_t escape_characters = 0;
   \   00000D   75..00       MOV     ?V0 + 4,#0x0
   \   000010   75..00       MOV     ?V0 + 5,#0x0
    906          
    907              if (output_buffer == NULL)
   \   000013   EA           MOV     A,R2
   \   000014   4B           ORL     A,R3
   \   000015   7007         JNZ     ??print_string_ptr_0
    908              {
    909                  return false;
   \                     ??print_string_ptr_1:
   \   000017   7A00         MOV     R2,#0x0
   \                     ??print_string_ptr_2:
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   02....       LJMP    ??print_string_ptr_3 & 0xFFFF
    910              }
    911          
    912              /* empty string */
    913              if (input == NULL)
   \                     ??print_string_ptr_0:
   \   00001E   E5..         MOV     A,?V0 + 6
   \   000020   45..         ORL     A,?V0 + 7
   \   000022   7019         JNZ     ??print_string_ptr_4
    914              {
    915                  output = ensure(output_buffer, sizeof("\"\""));
   \   000024                ; Setup parameters for call to function ensure
   \   000024   7C03         MOV     R4,#0x3
   \   000026   7D00         MOV     R5,#0x0
   \   000028   12....       LCALL   ??ensure?relay
   \   00002B   8B..         MOV     ?V0 + 3,R3
    916                  if (output == NULL)
   \   00002D   EA           MOV     A,R2
   \   00002E   45..         ORL     A,?V0 + 3
   \   000030   60E5         JZ      ??print_string_ptr_1
    917                  {
    918                      return false;
    919                  }
    920                  strcpy((char*)output, "\"\"");
   \   000032                ; Setup parameters for call to function strcpy
   \   000032   7C..         MOV     R4,#`?<Constant "\\"\\"">` & 0xff
   \   000034   7D..         MOV     R5,#(`?<Constant "\\"\\"">` >> 8) & 0xff
   \   000036   12....       LCALL   ??strcpy?relay
    921          
    922                  return true;
   \   000039   7A01         MOV     R2,#0x1
   \   00003B   80DC         SJMP    ??print_string_ptr_2
    923              }
    924          
    925              /* set "flag" to 1 if something needs to be escaped */
    926              for (input_pointer = input; *input_pointer; input_pointer++)
   \                     ??print_string_ptr_4:
   \   00003D   85....       MOV     ?V0 + 0,?V0 + 6
   \   000040   85....       MOV     ?V0 + 1,?V0 + 7
   \   000043   8019         SJMP    ??print_string_ptr_5
    927              {
    928                  switch (*input_pointer)
    929                  {
    930                      case '\"':
    931                      case '\\':
    932                      case '\b':
    933                      case '\f':
    934                      case '\n':
    935                      case '\r':
    936                      case '\t':
    937                          /* one character escape sequence */
    938                          escape_characters++;
    939                          break;
    940                      default:
    941                          if (*input_pointer < 32)
   \                     ??print_string_ptr_6:
   \   000045   E0           MOVX    A,@DPTR
   \   000046   C3           CLR     C
   \   000047   9420         SUBB    A,#0x20
   \   000049   500C         JNC     ??print_string_ptr_7
    942                          {
    943                              /* UTF-16 escape sequence uXXXX */
    944                              escape_characters += 5;
   \   00004B   E5..         MOV     A,?V0 + 4
   \   00004D   2405         ADD     A,#0x5
   \                     ??print_string_ptr_8:
   \   00004F   F5..         MOV     ?V0 + 4,A
   \   000051   E5..         MOV     A,?V0 + 5
   \   000053   3400         ADDC    A,#0x0
   \   000055   F5..         MOV     ?V0 + 5,A
    945                          }
   \                     ??print_string_ptr_7:
   \   000057   A3           INC     DPTR
   \   000058   8582..       MOV     ?V0 + 0,DPL
   \   00005B   8583..       MOV     ?V0 + 1,DPH
   \                     ??print_string_ptr_5:
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   E0           MOVX    A,@DPTR
   \   000065   601F         JZ      ??print_string_ptr_9
   \   000067   24F8         ADD     A,#-0x8
   \   000069   6015         JZ      ??print_string_ptr_10
   \   00006B   14           DEC     A
   \   00006C   6012         JZ      ??print_string_ptr_10
   \   00006E   14           DEC     A
   \   00006F   600F         JZ      ??print_string_ptr_10
   \   000071   24FE         ADD     A,#-0x2
   \   000073   600B         JZ      ??print_string_ptr_10
   \   000075   14           DEC     A
   \   000076   6008         JZ      ??print_string_ptr_10
   \   000078   24EB         ADD     A,#-0x15
   \   00007A   6004         JZ      ??print_string_ptr_10
   \   00007C   24C6         ADD     A,#-0x3a
   \   00007E   70C5         JNZ     ??print_string_ptr_6
   \                     ??print_string_ptr_10:
   \   000080   E5..         MOV     A,?V0 + 4
   \   000082   2401         ADD     A,#0x1
   \   000084   80C9         SJMP    ??print_string_ptr_8
    946                          break;
    947                  }
    948              }
    949              output_length = (size_t)(input_pointer - input) + escape_characters;
   \                     ??print_string_ptr_9:
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   C3           CLR     C
   \   000089   95..         SUBB    A,?V0 + 6
   \   00008B   F8           MOV     R0,A
   \   00008C   E5..         MOV     A,?V0 + 1
   \   00008E   95..         SUBB    A,?V0 + 7
   \   000090   F9           MOV     R1,A
   \   000091   E8           MOV     A,R0
   \   000092   25..         ADD     A,?V0 + 4
   \   000094   F5..         MOV     ?V0 + 8,A
   \   000096   E9           MOV     A,R1
   \   000097   35..         ADDC    A,?V0 + 5
   \   000099   F5..         MOV     ?V0 + 9,A
    950          
    951              output = ensure(output_buffer, output_length + sizeof("\"\""));
   \   00009B                ; Setup parameters for call to function ensure
   \   00009B   E5..         MOV     A,?V0 + 8
   \   00009D   2403         ADD     A,#0x3
   \   00009F   FC           MOV     R4,A
   \   0000A0   E5..         MOV     A,?V0 + 9
   \   0000A2   3400         ADDC    A,#0x0
   \   0000A4   FD           MOV     R5,A
   \   0000A5   12....       LCALL   ??ensure?relay
   \   0000A8   8A..         MOV     ?V0 + 2,R2
   \   0000AA   8B..         MOV     ?V0 + 3,R3
    952              if (output == NULL)
   \   0000AC   EA           MOV     A,R2
   \   0000AD   45..         ORL     A,?V0 + 3
   \   0000AF   7003         JNZ     $+5
   \   0000B1   02....       LJMP    ??print_string_ptr_1 & 0xFFFF
    953              {
    954                  return false;
    955              }
    956          
    957              /* no characters have to be escaped */
    958              if (escape_characters == 0)
   \   0000B4   E5..         MOV     A,?V0 + 4
   \   0000B6   45..         ORL     A,?V0 + 5
   \   0000B8   8A82         MOV     DPL,R2
   \   0000BA   8B83         MOV     DPH,R3
   \   0000BC   701E         JNZ     ??print_string_ptr_11
    959              {
    960                  output[0] = '\"';
   \   0000BE   7422         MOV     A,#0x22
   \   0000C0   F0           MOVX    @DPTR,A
    961                  memcpy(output + 1, input, output_length);
   \   0000C1                ; Setup parameters for call to function memcpy
   \   0000C1   78..         MOV     R0,#?V0 + 8
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C6   AC..         MOV     R4,?V0 + 6
   \   0000C8   AD..         MOV     R5,?V0 + 7
   \   0000CA   8A82         MOV     DPL,R2
   \   0000CC   8B83         MOV     DPH,R3
   \   0000CE   A3           INC     DPTR
   \   0000CF   AA82         MOV     R2,DPL
   \   0000D1   AB83         MOV     R3,DPH
   \   0000D3   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
    962                  output[output_length + 1] = '\"';
   \   0000D9   02....       LJMP    ??print_string_ptr_12 & 0xFFFF
    963                  output[output_length + 2] = '\0';
    964          
    965                  return true;
    966              }
    967          
    968              output[0] = '\"';
   \                     ??print_string_ptr_11:
   \   0000DC   7422         MOV     A,#0x22
   \   0000DE   F0           MOVX    @DPTR,A
    969              output_pointer = output + 1;
   \   0000DF   A3           INC     DPTR
   \   0000E0   AE82         MOV     R6,DPL
   \   0000E2   AF83         MOV     R7,DPH
    970              /* copy the string */
    971              for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
   \   0000E4   85....       MOV     ?V0 + 0,?V0 + 6
   \   0000E7   85....       MOV     ?V0 + 1,?V0 + 7
   \   0000EA   8039         SJMP    ??print_string_ptr_13
    972              {
    973                  if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
    974                  {
    975                      /* normal character, copy */
    976                      *output_pointer = *input_pointer;
    977                  }
    978                  else
    979                  {
    980                      /* character needs to be escaped */
    981                      *output_pointer++ = '\\';
    982                      switch (*input_pointer)
    983                      {
    984                          case '\\':
    985                              *output_pointer = '\\';
    986                              break;
    987                          case '\"':
    988                              *output_pointer = '\"';
    989                              break;
    990                          case '\b':
    991                              *output_pointer = 'b';
    992                              break;
    993                          case '\f':
    994                              *output_pointer = 'f';
    995                              break;
    996                          case '\n':
    997                              *output_pointer = 'n';
    998                              break;
    999                          case '\r':
   1000                              *output_pointer = 'r';
   1001                              break;
   1002                          case '\t':
   1003                              *output_pointer = 't';
   1004                              break;
   1005                          default:
   1006                              /* escape and print as unicode codepoint */
   1007                              sprintf((char*)output_pointer, "u%04x", *input_pointer);
   \                     ??print_string_ptr_14:
   \   0000EC                ; Setup parameters for call to function sprintf
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F5..         MOV     ?V0 + 4,A
   \   0000EF   75..00       MOV     ?V0 + 5,#0x0
   \   0000F2   78..         MOV     R0,#?V0 + 4
   \   0000F4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F7   7C..         MOV     R4,#`?<Constant "u%04x">` & 0xff
   \   0000F9   7D..         MOV     R5,#(`?<Constant "u%04x">` >> 8) & 0xff
   \   0000FB   EE           MOV     A,R6
   \   0000FC   FA           MOV     R2,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   FB           MOV     R3,A
   \   0000FF   12....       LCALL   ??sprintf?relay
   \   000102   7402         MOV     A,#0x2
   \   000104   12....       LCALL   ?DEALLOC_XSTACK8
   1008                              output_pointer += 4;
   \   000107   EE           MOV     A,R6
   \   000108   2404         ADD     A,#0x4
   \   00010A   FE           MOV     R6,A
   \   00010B   EF           MOV     A,R7
   \   00010C   3400         ADDC    A,#0x0
   \   00010E   FF           MOV     R7,A
   1009                              break;
   \                     ??print_string_ptr_15:
   \   00010F   85..82       MOV     DPL,?V0 + 0
   \   000112   85..83       MOV     DPH,?V0 + 1
   \   000115   A3           INC     DPTR
   \   000116   8582..       MOV     ?V0 + 0,DPL
   \   000119   8583..       MOV     ?V0 + 1,DPH
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   A3           INC     DPTR
   \   000121   AE82         MOV     R6,DPL
   \   000123   AF83         MOV     R7,DPH
   \                     ??print_string_ptr_13:
   \   000125   85..82       MOV     DPL,?V0 + 0
   \   000128   85..83       MOV     DPH,?V0 + 1
   \   00012B   E0           MOVX    A,@DPTR
   \   00012C   607E         JZ      ??print_string_ptr_12
   \   00012E   C3           CLR     C
   \   00012F   9420         SUBB    A,#0x20
   \   000131   4012         JC      ??print_string_ptr_16
   \   000133   E0           MOVX    A,@DPTR
   \   000134   6422         XRL     A,#0x22
   \   000136   600D         JZ      ??print_string_ptr_16
   \   000138   E0           MOVX    A,@DPTR
   \   000139   645C         XRL     A,#0x5c
   \   00013B   6008         JZ      ??print_string_ptr_16
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   8E82         MOV     DPL,R6
   \   000140   8F83         MOV     DPH,R7
   \                     ??print_string_ptr_17:
   \   000142   F0           MOVX    @DPTR,A
   \   000143   80CA         SJMP    ??print_string_ptr_15
   \                     ??print_string_ptr_16:
   \   000145   8E82         MOV     DPL,R6
   \   000147   8F83         MOV     DPH,R7
   \   000149   745C         MOV     A,#0x5c
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   A3           INC     DPTR
   \   00014D   AE82         MOV     R6,DPL
   \   00014F   AF83         MOV     R7,DPH
   \   000151   85..82       MOV     DPL,?V0 + 0
   \   000154   85..83       MOV     DPH,?V0 + 1
   \   000157   E0           MOVX    A,@DPTR
   \   000158   24F8         ADD     A,#-0x8
   \   00015A   6028         JZ      ??print_string_ptr_18
   \   00015C   14           DEC     A
   \   00015D   6045         JZ      ??print_string_ptr_19
   \   00015F   14           DEC     A
   \   000160   6032         JZ      ??print_string_ptr_20
   \   000162   24FE         ADD     A,#-0x2
   \   000164   6026         JZ      ??print_string_ptr_21
   \   000166   14           DEC     A
   \   000167   6033         JZ      ??print_string_ptr_22
   \   000169   24EB         ADD     A,#-0x15
   \   00016B   600F         JZ      ??print_string_ptr_23
   \   00016D   24C6         ADD     A,#-0x3a
   \   00016F   6003         JZ      $+5
   \   000171   02....       LJMP    ??print_string_ptr_14 & 0xFFFF
   \   000174   8E82         MOV     DPL,R6
   \   000176   8F83         MOV     DPH,R7
   \   000178   745C         MOV     A,#0x5c
   \   00017A   80C6         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_23:
   \   00017C   8E82         MOV     DPL,R6
   \   00017E   8F83         MOV     DPH,R7
   \   000180   7422         MOV     A,#0x22
   \   000182   80BE         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_18:
   \   000184   8E82         MOV     DPL,R6
   \   000186   8F83         MOV     DPH,R7
   \   000188   7462         MOV     A,#0x62
   \   00018A   80B6         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_21:
   \   00018C   8E82         MOV     DPL,R6
   \   00018E   8F83         MOV     DPH,R7
   \   000190   7466         MOV     A,#0x66
   \   000192   80AE         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_20:
   \   000194   8E82         MOV     DPL,R6
   \   000196   8F83         MOV     DPH,R7
   \   000198   746E         MOV     A,#0x6e
   \   00019A   80A6         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_22:
   \   00019C   8E82         MOV     DPL,R6
   \   00019E   8F83         MOV     DPH,R7
   \   0001A0   7472         MOV     A,#0x72
   \   0001A2   809E         SJMP    ??print_string_ptr_17
   \                     ??print_string_ptr_19:
   \   0001A4   8E82         MOV     DPL,R6
   \   0001A6   8F83         MOV     DPH,R7
   \   0001A8   7474         MOV     A,#0x74
   \   0001AA   8096         SJMP    ??print_string_ptr_17
   1010                      }
   1011                  }
   1012              }
   1013              output[output_length + 1] = '\"';
   \                     ??print_string_ptr_12:
   \   0001AC   E5..         MOV     A,?V0 + 2
   \   0001AE   25..         ADD     A,?V0 + 8
   \   0001B0   F8           MOV     R0,A
   \   0001B1   E5..         MOV     A,?V0 + 3
   \   0001B3   35..         ADDC    A,?V0 + 9
   \   0001B5   F9           MOV     R1,A
   \   0001B6   8882         MOV     DPL,R0
   \   0001B8   8983         MOV     DPH,R1
   \   0001BA   A3           INC     DPTR
   \   0001BB   7422         MOV     A,#0x22
   \   0001BD   F0           MOVX    @DPTR,A
   1014              output[output_length + 2] = '\0';
   \   0001BE   8882         MOV     DPL,R0
   \   0001C0   8983         MOV     DPH,R1
   \   0001C2   A3           INC     DPTR
   \   0001C3   A3           INC     DPTR
   \   0001C4   E4           CLR     A
   \   0001C5   F0           MOVX    @DPTR,A
   1015          
   1016              return true;
   \   0001C6   7A01         MOV     R2,#0x1
   \   0001C8   FB           MOV     R3,A
   \                     ??print_string_ptr_3:
   \   0001C9                REQUIRE ?Subroutine6
   \   0001C9                ; // Fall through to label ?Subroutine6
   1017          }
   1018          
   1019          /* Invoke print_string_ptr (which is useful) on an item. */
   1020          static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
   1021          {
   1022              return print_string_ptr((unsigned char*)item->valuestring, p);
   1023          }
   1024          
   1025          /* Predeclare these prototypes. */
   1026          static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer);
   1027          static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer);
   1028          static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer);
   1029          static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer);
   1030          static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
   1031          static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);
   1032          
   1033          /* Utility to jump whitespace and cr/lf */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1034          static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
   \                     buffer_skip_whitespace:
   1035          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1036              if ((buffer == NULL) || (buffer->content == NULL))
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6009         JZ      ??buffer_skip_whitespace_0
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   00000F   7007         JNZ     ??buffer_skip_whitespace_1
   1037              {
   1038                  return NULL;
   \                     ??buffer_skip_whitespace_0:
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   1039              }
   \                     ??buffer_skip_whitespace_2:
   \   000015   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   \                     ??buffer_skip_whitespace_1:
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   C082         PUSH    DPL
   \   000022   C083         PUSH    DPH
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_616:
   \   00002B   D083         POP     DPH
   \   00002D   D082         POP     DPL
   \   00002F   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000032   4019         JC      ??CrossCallReturnLabel_234
   1040          
   1041              if (cannot_access_at_index(buffer, 0))
   1042              {
   1043                  return buffer;
   \                     ??buffer_skip_whitespace_3:
   \   000034   80DF         SJMP    ??buffer_skip_whitespace_2
   1044              }
   1045          
   1046              while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
   1047              {
   1048                 buffer->offset++;
   \                     ??buffer_skip_whitespace_4:
   \   000036   E0           MOVX    A,@DPTR
   \   000037   28           ADD     A,R0
   \   000038   FC           MOV     R4,A
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   39           ADDC    A,R1
   \   00003C   8C82         MOV     DPL,R4
   \   00003E   F583         MOV     DPH,A
   \   000040   E0           MOVX    A,@DPTR
   \   000041   C3           CLR     C
   \   000042   9421         SUBB    A,#0x21
   \   000044   50CF         JNC     ??buffer_skip_whitespace_2
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   1049              }
   \                     ??CrossCallReturnLabel_234:
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   C082         PUSH    DPL
   \   000057   C083         PUSH    DPH
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_617:
   \   000060   D083         POP     DPH
   \   000062   D082         POP     DPL
   \   000064   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_618:
   \   000070   8A82         MOV     DPL,R2
   \   000072   8B83         MOV     DPH,R3
   \   000074   40C0         JC      ??buffer_skip_whitespace_4
   1050          
   1051              if (buffer->offset == buffer->length)
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   68           XRL     A,R0
   \   00007A   7003         JNZ     ??buffer_skip_whitespace_5
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   69           XRL     A,R1
   \                     ??buffer_skip_whitespace_5:
   \   00007F   7094         JNZ     ??buffer_skip_whitespace_2
   1052              {
   1053                  buffer->offset--;
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   1054              }
   \                     ??CrossCallReturnLabel_305:
   \   000088   808B         SJMP    ??buffer_skip_whitespace_2
   1055          
   1056              return buffer;
   1057          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine156_0
   \   000004                ; // Fall through to label ??Subroutine156_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003                REQUIRE ??Subroutine157_0
   \   000003                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine149:
   \   000000   24FF         ADD     A,#-0x1
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   34FF         ADDC    A,#-0x1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine148:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   3400         ADDC    A,#0x0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
   1058          
   1059          /* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
   1060          static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
   1061          {
   1062              if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
   1063              {
   1064                  return NULL;
   1065              }
   1066          
   1067              if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
   1068              {
   1069                  buffer->offset += 3;
   1070              }
   1071          
   1072              return buffer;
   1073          }
   1074          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1075          CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
   \                     cJSON_ParseWithOpts:
   1076          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740A         MOV     A,#0xa
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   1077              size_t buffer_length;
   1078          
   1079              if (NULL == value)
   \                     ??CrossCallReturnLabel_332:
   \   000011   7006         JNZ     ??cJSON_ParseWithOpts_0
   1080              {
   1081                  return NULL;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8025         SJMP    ??cJSON_ParseWithOpts_1
   1082              }
   1083          
   1084              /* Adding null character size due to require_null_terminated. */
   1085              buffer_length = strlen(value) + sizeof("");
   1086          
   1087              return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
   \                     ??cJSON_ParseWithOpts_0:
   \   000019                ; Setup parameters for call to function cJSON_ParseWithLengthOpts
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   8C..         MOV     ?V0 + 0,R4
   \   000020   8D..         MOV     ?V0 + 1,R5
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027                ; Setup parameters for call to function strlen
   \   000027   12....       LCALL   ??strlen?relay
   \   00002A   EA           MOV     A,R2
   \   00002B   2401         ADD     A,#0x1
   \   00002D   FC           MOV     R4,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   FD           MOV     R5,A
   \   000032   EE           MOV     A,R6
   \   000033   FA           MOV     R2,A
   \   000034   EF           MOV     A,R7
   \   000035   FB           MOV     R3,A
   \   000036   12....       LCALL   ??cJSON_ParseWithLengthOpts?relay
   \   000039   7404         MOV     A,#0x4
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??cJSON_ParseWithOpts_1:
   \   00003E   80..         SJMP    ??Subroutine160_0
   1088          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_522:
   \   000003   EE           MOV     A,R6
   \   000004   4F           ORL     A,R7
   \   000005   22           RET
   1089          
   1090          /* Parse an object - create a new root, and populate. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1091          CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
   \                     cJSON_ParseWithLengthOpts:
   1092          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   F8           MOV     R0,A
   \   000010   ED           MOV     A,R5
   \   000011   F9           MOV     R1,A
   \   000012   741E         MOV     A,#0x1e
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FF           MOV     R7,A
   \   00001C   7420         MOV     A,#0x20
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine56 & 0xFFFF
   1093              parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
   \                     ??CrossCallReturnLabel_84:
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AC82         MOV     R4,DPL
   \   00002C   AD83         MOV     R5,DPH
   \   00002E   7583..       MOV     DPH,#(`?<Constant {(unsigned char const *)0, 0, 0, 0,` >> 8) & 0xff
   \   000031   7582..       MOV     DPL,#`?<Constant {(unsigned char const *)0, 0, 0, 0,` & 0xff
   \   000034   740E         MOV     A,#0xe
   \   000036   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1094              cJSON *item = NULL;
   1095          
   1096              /* reset error position */
   1097              global_error.json = NULL;
   \   000039   90....       MOV     DPTR,#global_error
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   F0           MOVX    @DPTR,A
   1098              global_error.position = 0;
   \   00003F   A3           INC     DPTR
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
   1099          
   1100              if (value == NULL || 0 == buffer_length)
   \   000043   EA           MOV     A,R2
   \   000044   45..         ORL     A,?V0 + 3
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??CrossCallReturnLabel_429 & 0xFFFF
   \   00004B   E8           MOV     A,R0
   \   00004C   49           ORL     A,R1
   \   00004D   7003         JNZ     $+5
   \   00004F   02....       LJMP    ??cJSON_ParseWithLengthOpts_0 & 0xFFFF
   1101              {
   1102                  goto fail;
   1103              }
   1104          
   1105              buffer.content = (const unsigned char*)value;
   \   000052   85..82       MOV     DPL,?XSP + 0
   \   000055   85..83       MOV     DPH,?XSP + 1
   \   000058   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   1106              buffer.length = buffer_length; 
   \                     ??CrossCallReturnLabel_571:
   \   00005B   7402         MOV     A,#0x2
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   1107              buffer.offset = 0;
   \                     ??CrossCallReturnLabel_417:
   \   000063   7404         MOV     A,#0x4
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   F0           MOVX    @DPTR,A
   1108              buffer.hooks = global_hooks;
   \   00006C   7408         MOV     A,#0x8
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   AC82         MOV     R4,DPL
   \   000073   AD83         MOV     R5,DPH
   \   000075   7583..       MOV     DPH,#(global_hooks >> 8) & 0xff
   \   000078   7582..       MOV     DPL,#global_hooks & 0xff
   \   00007B   7406         MOV     A,#0x6
   \   00007D   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1109          
   1110              item = cJSON_New_Item(&global_hooks);
   \   000080                ; Setup parameters for call to function cJSON_New_Item
   \   000080   7A..         MOV     R2,#global_hooks & 0xff
   \   000082   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000084   12....       LCALL   ??cJSON_New_Item?relay
   \   000087   8A..         MOV     ?V0 + 0,R2
   \   000089   8B..         MOV     ?V0 + 1,R3
   1111              if (item == NULL) /* memory fail */
   \   00008B   EA           MOV     A,R2
   \   00008C   45..         ORL     A,?V0 + 1
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??cJSON_ParseWithLengthOpts_0 & 0xFFFF
   1112              {
   1113                  goto fail;
   1114              }
   1115          
   1116              if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
   \   000093   85..82       MOV     DPL,?XSP + 0
   \   000096   85..83       MOV     DPH,?XSP + 1
   \   000099   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_449:
   \   00009C   6056         JZ      ??cJSON_ParseWithLengthOpts_1
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_450:
   \   0000A6   704C         JNZ     ??cJSON_ParseWithLengthOpts_1
   \   0000A8   7402         MOV     A,#0x2
   \   0000AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AD   C3           CLR     C
   \   0000AE   E0           MOVX    A,@DPTR
   \   0000AF   9405         SUBB    A,#0x5
   \   0000B1   A3           INC     DPTR
   \   0000B2   E0           MOVX    A,@DPTR
   \   0000B3   9400         SUBB    A,#0x0
   \   0000B5   4031         JC      ??CrossCallReturnLabel_231
   \   0000B7                ; Setup parameters for call to function strncmp
   \   0000B7   75..03       MOV     ?V0 + 6,#0x3
   \   0000BA   75..00       MOV     ?V0 + 7,#0x0
   \   0000BD   78..         MOV     R0,#?V0 + 6
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   7C..         MOV     R4,#`?<Constant "\\357\\273\\277">` & 0xff
   \   0000C4   7D..         MOV     R5,#(`?<Constant "\\357\\273\\277">` >> 8) & 0xff
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   0000CE   12....       LCALL   ??strncmp?relay
   \   0000D1   7402         MOV     A,#0x2
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   8B..         MOV     ?V0 + 7,R3
   \   0000D8   EA           MOV     A,R2
   \   0000D9   45..         ORL     A,?V0 + 7
   \   0000DB   700B         JNZ     ??CrossCallReturnLabel_231
   \   0000DD   7404         MOV     A,#0x4
   \   0000DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   2403         ADD     A,#0x3
   \   0000E5   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   0000E8   85..82       MOV     DPL,?XSP + 0
   \   0000EB   85..83       MOV     DPH,?XSP + 1
   \   0000EE   AA82         MOV     R2,DPL
   \   0000F0   AB83         MOV     R3,DPH
   \   0000F2   8004         SJMP    ??cJSON_ParseWithLengthOpts_2
   \                     ??cJSON_ParseWithLengthOpts_1:
   \   0000F4   7A00         MOV     R2,#0x0
   \   0000F6   7B00         MOV     R3,#0x0
   \                     ??cJSON_ParseWithLengthOpts_2:
   \   0000F8                ; Setup parameters for call to function parse_value
   \   0000F8                ; Setup parameters for call to function buffer_skip_whitespace
   \   0000F8   12....       LCALL   ??buffer_skip_whitespace?relay
   \   0000FB   EA           MOV     A,R2
   \   0000FC   FC           MOV     R4,A
   \   0000FD   EB           MOV     A,R3
   \   0000FE   FD           MOV     R5,A
   \   0000FF   AA..         MOV     R2,?V0 + 0
   \   000101   AB..         MOV     R3,?V0 + 1
   \   000103   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000106   605A         JZ      ??cJSON_ParseWithLengthOpts_3
   1117              {
   1118                  /* parse failure. ep is set. */
   1119                  goto fail;
   1120              }
   1121          
   1122              /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
   1123              if (require_null_terminated)
   \   000108   E5..         MOV     A,?V0 + 4
   \   00010A   45..         ORL     A,?V0 + 5
   \   00010C   6034         JZ      ??cJSON_ParseWithLengthOpts_4
   1124              {
   1125                  buffer_skip_whitespace(&buffer);
   \   00010E                ; Setup parameters for call to function buffer_skip_whitespace
   \   00010E   85..82       MOV     DPL,?XSP + 0
   \   000111   85..83       MOV     DPH,?XSP + 1
   \   000114   AA82         MOV     R2,DPL
   \   000116   AB83         MOV     R3,DPH
   \   000118   12....       LCALL   ??buffer_skip_whitespace?relay
   1126                  if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
   \   00011B   7404         MOV     A,#0x4
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   C082         PUSH    DPL
   \   000122   C083         PUSH    DPH
   \   000124   7402         MOV     A,#0x2
   \   000126   12....       LCALL   ?XSTACK_DISP0_8
   \   000129   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   1127                  {
   1128                      goto fail;
   1129                  }
   1130              }
   \                     ??CrossCallReturnLabel_611:
   \   00012C   D083         POP     DPH
   \   00012E   D082         POP     DPL
   \   000130   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000133   502D         JNC     ??cJSON_ParseWithLengthOpts_3
   \   000135   7404         MOV     A,#0x4
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   00013D   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000140   7020         JNZ     ??cJSON_ParseWithLengthOpts_3
   1131              if (return_parse_end)
   \                     ??cJSON_ParseWithLengthOpts_4:
   \   000142   EE           MOV     A,R6
   \   000143   4F           ORL     A,R7
   \   000144   6016         JZ      ??CrossCallReturnLabel_418
   1132              {
   1133                  *return_parse_end = (const char*)buffer_at_offset(&buffer);
   \   000146   7404         MOV     A,#0x4
   \   000148   12....       LCALL   ?XSTACK_DISP0_8
   \   00014B   12....       LCALL   ?Subroutine50 & 0xFFFF
   1134              }
   \                     ??CrossCallReturnLabel_76:
   \   00014E   E0           MOVX    A,@DPTR
   \   00014F   28           ADD     A,R0
   \   000150   F8           MOV     R0,A
   \   000151   A3           INC     DPTR
   \   000152   E0           MOVX    A,@DPTR
   \   000153   39           ADDC    A,R1
   \   000154   F9           MOV     R1,A
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \   000159   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   1135          
   1136              return item;
   \                     ??CrossCallReturnLabel_418:
   \   00015C   AA..         MOV     R2,?V0 + 0
   \   00015E   AB..         MOV     R3,?V0 + 1
   \   000160   8065         SJMP    ??cJSON_ParseWithLengthOpts_5
   1137          
   1138          fail:
   1139              if (item != NULL)
   1140              {
   1141                  cJSON_Delete(item);
   \                     ??cJSON_ParseWithLengthOpts_3:
   \   000162                ; Setup parameters for call to function cJSON_Delete
   \   000162   AA..         MOV     R2,?V0 + 0
   \   000164   AB..         MOV     R3,?V0 + 1
   \   000166   12....       LCALL   ??cJSON_Delete?relay
   1142              }
   1143          
   1144              if (value != NULL)
   1145              {
   1146                  error local_error;
   1147                  local_error.json = (const unsigned char*)value;
   1148                  local_error.position = 0;
   \                     ??cJSON_ParseWithLengthOpts_0:
   \   000169   7800         MOV     R0,#0x0
   \   00016B   7900         MOV     R1,#0x0
   1149          
   1150                  if (buffer.offset < buffer.length)
   \   00016D   7404         MOV     A,#0x4
   \   00016F   12....       LCALL   ?XSTACK_DISP0_8
   \   000172   C082         PUSH    DPL
   \   000174   C083         PUSH    DPH
   \   000176   7402         MOV     A,#0x2
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   00017E   D083         POP     DPH
   \   000180   D082         POP     DPL
   \   000182   C3           CLR     C
   \   000183   E0           MOVX    A,@DPTR
   \   000184   9A           SUBB    A,R2
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   9B           SUBB    A,R3
   \   000188   500B         JNC     ??cJSON_ParseWithLengthOpts_6
   1151                  {
   1152                      local_error.position = buffer.offset;
   \   00018A   7404         MOV     A,#0x4
   \   00018C   12....       LCALL   ?XSTACK_DISP0_8
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F8           MOV     R0,A
   \   000191   A3           INC     DPTR
   \   000192   E0           MOVX    A,@DPTR
   \   000193   8011         SJMP    ??cJSON_ParseWithLengthOpts_7
   1153                  }
   1154                  else if (buffer.length > 0)
   \                     ??cJSON_ParseWithLengthOpts_6:
   \   000195   EA           MOV     A,R2
   \   000196   4B           ORL     A,R3
   \   000197   600E         JZ      ??cJSON_ParseWithLengthOpts_8
   1155                  {
   1156                      local_error.position = buffer.length - 1;
   \   000199   7402         MOV     A,#0x2
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   E0           MOVX    A,@DPTR
   \   00019F   24FF         ADD     A,#-0x1
   \   0001A1   F8           MOV     R0,A
   \   0001A2   A3           INC     DPTR
   \   0001A3   E0           MOVX    A,@DPTR
   \   0001A4   34FF         ADDC    A,#-0x1
   \                     ??cJSON_ParseWithLengthOpts_7:
   \   0001A6   F9           MOV     R1,A
   1157                  }
   1158          
   1159                  if (return_parse_end != NULL)
   \                     ??cJSON_ParseWithLengthOpts_8:
   \   0001A7   EE           MOV     A,R6
   \   0001A8   4F           ORL     A,R7
   \   0001A9   600F         JZ      ??CrossCallReturnLabel_572
   1160                  {
   1161                      *return_parse_end = (const char*)local_error.json + local_error.position;
   \   0001AB   E5..         MOV     A,?V0 + 2
   \   0001AD   28           ADD     A,R0
   \   0001AE   FA           MOV     R2,A
   \   0001AF   E5..         MOV     A,?V0 + 3
   \   0001B1   39           ADDC    A,R1
   \   0001B2   FB           MOV     R3,A
   \   0001B3   8E82         MOV     DPL,R6
   \   0001B5   8F83         MOV     DPH,R7
   \   0001B7   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   1162                  }
   1163          
   1164                  global_error = local_error;
   \                     ??CrossCallReturnLabel_572:
   \   0001BA   90....       MOV     DPTR,#global_error
   \   0001BD   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   1165              }
   \                     ??CrossCallReturnLabel_333:
   \   0001C0   12....       LCALL   ??Subroutine194_0 & 0xFFFF
   1166          
   1167              return NULL;
   \                     ??CrossCallReturnLabel_429:
   \   0001C3   7A00         MOV     R2,#0x0
   \   0001C5   7B00         MOV     R3,#0x0
   \                     ??cJSON_ParseWithLengthOpts_5:
   \   0001C7   740E         MOV     A,#0xe
   \   0001C9   02....       LJMP    ?Subroutine2 & 0xFFFF
   1168          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_630:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   12....       LCALL   ??parse_value?relay
   \   000003   8B..         MOV     ?V0 + 7,R3
   \   000005   EA           MOV     A,R2
   \   000006   45..         ORL     A,?V0 + 7
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000003   8A82         MOV     DPL,R2
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 3
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET
   1169          
   1170          /* Default options for cJSON_Parse */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine159_0
   \   000002                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine160_0
   \   000003                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1171          CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
   \                     cJSON_Parse:
   1172          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1173              return cJSON_ParseWithOpts(value, 0, 0);
   \   000005                ; Setup parameters for call to function cJSON_ParseWithOpts
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   12....       LCALL   ??cJSON_ParseWithOpts?relay
   \   000016   02....       LJMP    ??Subroutine158_0 & 0xFFFF
   1174          }
   1175          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1176          CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length)
   \                     cJSON_ParseWithLength:
   1177          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1178              return cJSON_ParseWithLengthOpts(value, buffer_length, 0, 0);
   \   000005                ; Setup parameters for call to function cJSON_ParseWithLengthOpts
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   12....       LCALL   ??cJSON_ParseWithLengthOpts?relay
   \   000017   7404         MOV     A,#0x4
   \   000019   02....       LJMP    ??Subroutine159_0 & 0xFFFF
   1179          }
   1180          
   1181          #define cjson_min(a, b) (((a) < (b)) ? (a) : (b))
   1182          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1183          static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
   \                     print:
   1184          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   8C..         MOV     ?V0 + 2,R4
   \   000010   8D..         MOV     ?V0 + 3,R5
   \   000012   7422         MOV     A,#0x22
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   1185              static const size_t default_buffer_size = 256;
   1186              printbuffer buffer[1];
   1187              unsigned char *printed = NULL;
   \                     ??CrossCallReturnLabel_506:
   \   00001A   7E00         MOV     R6,#0x0
   \   00001C   7F00         MOV     R7,#0x0
   1188          
   1189              memset(buffer, 0, sizeof(buffer));
   \   00001E                ; Setup parameters for call to function memset
   \   00001E   75..12       MOV     ?V0 + 6,#0x12
   \   000021   8E..         MOV     ?V0 + 7,R6
   \   000023   78..         MOV     R0,#?V0 + 6
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   7C00         MOV     R4,#0x0
   \   00002A   7D00         MOV     R5,#0x0
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   AA82         MOV     R2,DPL
   \   000033   AB83         MOV     R3,DPH
   \   000035   12....       LCALL   ??memset?relay
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   1190          
   1191              /* create buffer */
   1192              buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
   \   00003D                ; Setup parameters for indirect call
   \   00003D   7A00         MOV     R2,#0x0
   \   00003F   7B01         MOV     R3,#0x1
   \   000041   85..82       MOV     DPL,?V0 + 0
   \   000044   85..83       MOV     DPH,?V0 + 1
   \   000047   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   00004A   12....       LCALL   ?CALL_IND
   \   00004D   85..82       MOV     DPL,?XSP + 0
   \   000050   85..83       MOV     DPH,?XSP + 1
   \   000053   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   1193              buffer->length = default_buffer_size;
   \                     ??CrossCallReturnLabel_573:
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?XSTACK_DISP0_8
   \   00005B   E4           CLR     A
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   \   00005E   04           INC     A
   \   00005F   F0           MOVX    @DPTR,A
   1194              buffer->format = format;
   \   000060   740A         MOV     A,#0xa
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   E5..         MOV     A,?V0 + 2
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   1195              buffer->hooks = *hooks;
   \                     ??CrossCallReturnLabel_248:
   \   00006E   C082         PUSH    DPL
   \   000070   C083         PUSH    DPH
   \   000072   740C         MOV     A,#0xc
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   AC82         MOV     R4,DPL
   \   000079   AD83         MOV     R5,DPH
   \   00007B   D083         POP     DPH
   \   00007D   D082         POP     DPL
   \   00007F   7406         MOV     A,#0x6
   \   000081   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1196              if (buffer->buffer == NULL)
   \   000084   85..82       MOV     DPL,?XSP + 0
   \   000087   85..83       MOV     DPH,?XSP + 1
   \   00008A   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   00008D   7003         JNZ     $+5
   \   00008F   02....       LJMP    ??print_0 & 0xFFFF
   1197              {
   1198                  goto fail;
   1199              }
   1200          
   1201              /* print the value */
   1202              if (!print_value(item, buffer))
   \   000092                ; Setup parameters for call to function print_value
   \   000092   85..82       MOV     DPL,?XSP + 0
   \   000095   85..83       MOV     DPH,?XSP + 1
   \   000098   AC82         MOV     R4,DPL
   \   00009A   AD83         MOV     R5,DPH
   \   00009C   AA..         MOV     R2,?V0 + 4
   \   00009E   AB..         MOV     R3,?V0 + 5
   \   0000A0   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   0000A3   7003         JNZ     $+5
   \   0000A5   02....       LJMP    ??print_1 & 0xFFFF
   1203              {
   1204                  goto fail;
   1205              }
   1206              update_offset(buffer);
   \   0000A8                ; Setup parameters for call to function update_offset
   \   0000A8   85..82       MOV     DPL,?XSP + 0
   \   0000AB   85..83       MOV     DPH,?XSP + 1
   \   0000AE   AA82         MOV     R2,DPL
   \   0000B0   AB83         MOV     R3,DPH
   \   0000B2   12....       LCALL   ?Subroutine122 & 0xFFFF
   1207          
   1208              /* check if reallocate is available */
   1209              if (hooks->reallocate != NULL)
   \                     ??CrossCallReturnLabel_189:
   \   0000B5   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   0000B8   6036         JZ      ??print_2
   1210              {
   1211                  printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
   \   0000BA                ; Setup parameters for indirect call
   \   0000BA   7404         MOV     A,#0x4
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   0000C2   85..82       MOV     DPL,?XSP + 0
   \   0000C5   85..83       MOV     DPH,?XSP + 1
   \   0000C8   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   12....       LCALL   ?Subroutine146 & 0xFFFF
   \                     ??CrossCallReturnLabel_604:
   \   0000D2   12....       LCALL   ?CALL_IND
   \   0000D5   8A..         MOV     ?V0 + 2,R2
   \   0000D7   8B..         MOV     ?V0 + 3,R3
   \   0000D9   AE..         MOV     R6,?V0 + 2
   \   0000DB   AF..         MOV     R7,?V0 + 3
   1212                  if (printed == NULL) {
   \   0000DD   EE           MOV     A,R6
   \   0000DE   4F           ORL     A,R7
   \   0000DF   7003         JNZ     $+5
   \   0000E1   02....       LJMP    ??print_1 & 0xFFFF
   1213                      goto fail;
   1214                  }
   1215                  buffer->buffer = NULL;
   \   0000E4   85..82       MOV     DPL,?XSP + 0
   \   0000E7   85..83       MOV     DPH,?XSP + 1
   \   0000EA   E4           CLR     A
   \   0000EB   F0           MOVX    @DPTR,A
   \   0000EC   A3           INC     DPTR
   \   0000ED   F0           MOVX    @DPTR,A
   \   0000EE   807D         SJMP    ??print_3
   1216              }
   1217              else /* otherwise copy the JSON over to a new buffer */
   1218              {
   1219                  printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
   \                     ??print_2:
   \   0000F0                ; Setup parameters for indirect call
   \   0000F0   7404         MOV     A,#0x4
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   E0           MOVX    A,@DPTR
   \   0000F6   2401         ADD     A,#0x1
   \   0000F8   FA           MOV     R2,A
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   0000FE   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   000101   12....       LCALL   ?CALL_IND
   \   000104   8A..         MOV     ?V0 + 2,R2
   \   000106   8B..         MOV     ?V0 + 3,R3
   \   000108   AE..         MOV     R6,?V0 + 2
   \   00010A   AF..         MOV     R7,?V0 + 3
   1220                  if (printed == NULL)
   \   00010C   EE           MOV     A,R6
   \   00010D   4F           ORL     A,R7
   \   00010E   6063         JZ      ??print_1
   1221                  {
   1222                      goto fail;
   1223                  }
   1224                  memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
   \   000110   7402         MOV     A,#0x2
   \   000112   12....       LCALL   ?XSTACK_DISP0_8
   \   000115   C082         PUSH    DPL
   \   000117   C083         PUSH    DPH
   \   000119   7404         MOV     A,#0x4
   \   00011B   12....       LCALL   ?XSTACK_DISP0_8
   \   00011E   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000121   D083         POP     DPH
   \   000123   D082         POP     DPL
   \   000125   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000128   500C         JNC     ??print_4
   \   00012A   7402         MOV     A,#0x2
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   E0           MOVX    A,@DPTR
   \   000130   F5..         MOV     ?V0 + 2,A
   \   000132   A3           INC     DPTR
   \   000133   E0           MOVX    A,@DPTR
   \   000134   800E         SJMP    ??print_5
   \                     ??print_4:
   \   000136   7404         MOV     A,#0x4
   \   000138   12....       LCALL   ?XSTACK_DISP0_8
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   2401         ADD     A,#0x1
   \   00013E   F5..         MOV     ?V0 + 2,A
   \   000140   A3           INC     DPTR
   \   000141   E0           MOVX    A,@DPTR
   \   000142   3400         ADDC    A,#0x0
   \                     ??print_5:
   \   000144   F5..         MOV     ?V0 + 3,A
   \   000146                ; Setup parameters for call to function memcpy
   \   000146   78..         MOV     R0,#?V0 + 2
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014B   7402         MOV     A,#0x2
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000153   12....       LCALL   ?DEALLOC_XSTACK8
   1225                  printed[buffer->offset] = '\0'; /* just to be sure */
   \   000156   7404         MOV     A,#0x4
   \   000158   12....       LCALL   ?XSTACK_DISP0_8
   \   00015B   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00015E   28           ADD     A,R0
   \   00015F   F582         MOV     DPL,A
   \   000161   EF           MOV     A,R7
   \   000162   39           ADDC    A,R1
   \   000163   F583         MOV     DPH,A
   \   000165   E4           CLR     A
   \   000166   F0           MOVX    @DPTR,A
   1226          
   1227                  /* free the buffer */
   1228                  hooks->deallocate(buffer->buffer);
   \   000167                ; Setup parameters for indirect call
   \   000167   12....       LCALL   ?Subroutine30 & 0xFFFF
   1229              }
   \                     ??CrossCallReturnLabel_35:
   \   00016A   12....       LCALL   ?CALL_IND
   1230          
   1231              return printed;
   \                     ??print_3:
   \   00016D   EE           MOV     A,R6
   \   00016E   FA           MOV     R2,A
   \   00016F   EF           MOV     A,R7
   \   000170   FB           MOV     R3,A
   \   000171   802B         SJMP    ??print_6
   1232          
   1233          fail:
   1234              if (buffer->buffer != NULL)
   \                     ??print_1:
   \   000173   85..82       MOV     DPL,?XSP + 0
   \   000176   85..83       MOV     DPH,?XSP + 1
   \   000179   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   00017C   6006         JZ      ??print_7
   1235              {
   1236                  hooks->deallocate(buffer->buffer);
   \   00017E                ; Setup parameters for indirect call
   \   00017E   12....       LCALL   ?Subroutine30 & 0xFFFF
   1237              }
   \                     ??CrossCallReturnLabel_36:
   \   000181   12....       LCALL   ?CALL_IND
   1238          
   1239              if (printed != NULL)
   \                     ??print_7:
   \   000184   EE           MOV     A,R6
   \   000185   4F           ORL     A,R7
   \   000186   6012         JZ      ??print_0
   1240              {
   1241                  hooks->deallocate(printed);
   \   000188                ; Setup parameters for indirect call
   \   000188   EE           MOV     A,R6
   \   000189   FA           MOV     R2,A
   \   00018A   EF           MOV     A,R7
   \   00018B   FB           MOV     R3,A
   \   00018C   85..82       MOV     DPL,?V0 + 0
   \   00018F   85..83       MOV     DPH,?V0 + 1
   \   000192   A3           INC     DPTR
   \   000193   A3           INC     DPTR
   \   000194   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   1242              }
   \                     ??CrossCallReturnLabel_258:
   \   000197   12....       LCALL   ?CALL_IND
   1243          
   1244              return NULL;
   \                     ??print_0:
   \   00019A   7A00         MOV     R2,#0x0
   \   00019C   7B00         MOV     R3,#0x0
   \                     ??print_6:
   \   00019E   7412         MOV     A,#0x12
   \   0001A0   02....       LJMP    ?Subroutine2 & 0xFFFF
   1245          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL   ??update_offset?relay
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   12....       LCALL   ??print_value?relay
   \   000003   8B..         MOV     ?V0 + 3,R3
   \   000005   EA           MOV     A,R2
   \   000006   45..         ORL     A,?V0 + 3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FD           MOV     R5,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine207_0:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_523:
   \   000003   22           RET
   1246          
   1247          /* Render a cJSON item/entity/structure to text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1248          CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
   \                     cJSON_Print:
   1249          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1250              return (char*)print(item, true, &global_hooks);
   \   000005                ; Setup parameters for call to function print
   \   000005   75....       MOV     ?V0 + 0,#global_hooks & 0xff
   \   000008   75....       MOV     ?V0 + 1,#(global_hooks >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C01         MOV     R4,#0x1
   \   000012                REQUIRE ?Subroutine12
   \   000012                ; // Fall through to label ?Subroutine12
   1251          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   12....       LCALL   ??print?relay
   \   000005   02....       LJMP    ??Subroutine158_0 & 0xFFFF
   1252          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1253          CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
   \                     cJSON_PrintUnformatted:
   1254          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1255              return (char*)print(item, false, &global_hooks);
   \   000005                ; Setup parameters for call to function print
   \   000005   75....       MOV     ?V0 + 0,#global_hooks & 0xff
   \   000008   75....       MOV     ?V0 + 1,#(global_hooks >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 0
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   7C00         MOV     R4,#0x0
   \   000012   80..         SJMP    ?Subroutine12
   1256          }
   1257          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1258          CJSON_PUBLIC(char *) cJSON_PrintBuffered(const cJSON *item, int prebuffer, cJSON_bool fmt)
   \                     cJSON_PrintBuffered:
   1259          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
   \   000012   741E         MOV     A,#0x1e
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine61 & 0xFFFF
   1260              printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
   \                     ??CrossCallReturnLabel_90:
   \   00001A   85..82       MOV     DPL,?XSP + 0
   \   00001D   85..83       MOV     DPH,?XSP + 1
   \   000020   AC82         MOV     R4,DPL
   \   000022   AD83         MOV     R5,DPH
   \   000024   7583..       MOV     DPH,#(`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,` >> 8) & 0xff
   \   000027   7582..       MOV     DPL,#`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,` & 0xff
   \   00002A   7412         MOV     A,#0x12
   \   00002C   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1261          
   1262              if (prebuffer < 0)
   \   00002F   C3           CLR     C
   \   000030   E5..         MOV     A,?V0 + 1
   \   000032   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_493:
   \   000035   5006         JNC     ??cJSON_PrintBuffered_0
   1263              {
   1264                  return NULL;
   \                     ??cJSON_PrintBuffered_1:
   \   000037   7A00         MOV     R2,#0x0
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   8074         SJMP    ??CrossCallReturnLabel_383
   1265              }
   1266          
   1267              p.buffer = (unsigned char*)global_hooks.allocate((size_t)prebuffer);
   \                     ??cJSON_PrintBuffered_0:
   \   00003D                ; Setup parameters for indirect call
   \   00003D   AA..         MOV     R2,?V0 + 0
   \   00003F   AB..         MOV     R3,?V0 + 1
   \   000041   90....       MOV     DPTR,#global_hooks
   \   000044   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   000047   12....       LCALL   ?CALL_IND
   \   00004A   12....       LCALL   ?Subroutine103 & 0xFFFF
   1268              if (!p.buffer)
   \                     ??CrossCallReturnLabel_284:
   \   00004D   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000050   60E5         JZ      ??cJSON_PrintBuffered_1
   1269              {
   1270                  return NULL;
   1271              }
   1272          
   1273              p.length = (size_t)prebuffer;
   \   000052   7402         MOV     A,#0x2
   \   000054   12....       LCALL   ?XSTACK_DISP0_8
   \   000057   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   1274              p.offset = 0;
   \                     ??CrossCallReturnLabel_499:
   \   00005A   7404         MOV     A,#0x4
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E4           CLR     A
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   F0           MOVX    @DPTR,A
   1275              p.noalloc = false;
   \   000063   7408         MOV     A,#0x8
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   E4           CLR     A
   \   000069   F0           MOVX    @DPTR,A
   \   00006A   A3           INC     DPTR
   \   00006B   F0           MOVX    @DPTR,A
   1276              p.format = fmt;
   \   00006C   740A         MOV     A,#0xa
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   1277              p.hooks = global_hooks;
   \                     ??CrossCallReturnLabel_334:
   \   000074   740C         MOV     A,#0xc
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AC82         MOV     R4,DPL
   \   00007B   AD83         MOV     R5,DPH
   \   00007D   7583..       MOV     DPH,#(global_hooks >> 8) & 0xff
   \   000080   7582..       MOV     DPL,#global_hooks & 0xff
   \   000083   7406         MOV     A,#0x6
   \   000085   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1278          
   1279              if (!print_value(item, &p))
   \   000088                ; Setup parameters for call to function print_value
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   AC82         MOV     R4,DPL
   \   000090   AD83         MOV     R5,DPH
   \   000092   EE           MOV     A,R6
   \   000093   FA           MOV     R2,A
   \   000094   EF           MOV     A,R7
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   ??print_value?relay
   \   000099   8B..         MOV     ?V0 + 1,R3
   \   00009B   EA           MOV     A,R2
   \   00009C   45..         ORL     A,?V0 + 1
   \   00009E   85..82       MOV     DPL,?XSP + 0
   \   0000A1   85..83       MOV     DPH,?XSP + 1
   \   0000A4   7008         JNZ     ??cJSON_PrintBuffered_2
   1280              {
   1281                  global_hooks.deallocate(p.buffer);
   \   0000A6                ; Setup parameters for indirect call
   \   0000A6   12....       LCALL   ?Subroutine23 & 0xFFFF
   1282                  return NULL;
   1283              }
   \                     ??CrossCallReturnLabel_25:
   \   0000A9   12....       LCALL   ?CALL_IND
   \   0000AC   8089         SJMP    ??cJSON_PrintBuffered_1
   1284          
   1285              return (char*)p.buffer;
   \                     ??cJSON_PrintBuffered_2:
   \   0000AE   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   0000B1   7412         MOV     A,#0x12
   \   0000B3   02....       LJMP    ??Subroutine181_0 & 0xFFFF
   1286          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   EA           MOV     A,R2
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   EB           MOV     A,R3
   \   00000A                REQUIRE ??Subroutine165_0
   \   00000A                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine182_0
   \   000003                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine206_0:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
   1287          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1288          CJSON_PUBLIC(cJSON_bool) cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)
   \                     cJSON_PrintPreallocated:
   1289          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   F8           MOV     R0,A
   \   00000C   ED           MOV     A,R5
   \   00000D   F9           MOV     R1,A
   \   00000E   741C         MOV     A,#0x1c
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FE           MOV     R6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FF           MOV     R7,A
   \   000018   741E         MOV     A,#0x1e
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   1290              printbuffer p = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
   \                     ??CrossCallReturnLabel_507:
   \   000020   85..82       MOV     DPL,?XSP + 0
   \   000023   85..83       MOV     DPH,?XSP + 1
   \   000026   AC82         MOV     R4,DPL
   \   000028   AD83         MOV     R5,DPH
   \   00002A   7583..       MOV     DPH,#(`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1` >> 8) & 0xff
   \   00002D   7582..       MOV     DPL,#`?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1` & 0xff
   \   000030   7412         MOV     A,#0x12
   \   000032   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1291          
   1292              if ((length < 0) || (buffer == NULL))
   \   000035   C3           CLR     C
   \   000036   EF           MOV     A,R7
   \   000037   12....       LCALL   ??Subroutine203_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_494:
   \   00003A   4004         JC      ??cJSON_PrintPreallocated_0
   \   00003C   E8           MOV     A,R0
   \   00003D   49           ORL     A,R1
   \   00003E   7006         JNZ     ??cJSON_PrintPreallocated_1
   1293              {
   1294                  return false;
   \                     ??cJSON_PrintPreallocated_0:
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \   000044   804F         SJMP    ??cJSON_PrintPreallocated_2
   1295              }
   1296          
   1297              p.buffer = (unsigned char*)buffer;
   \                     ??cJSON_PrintPreallocated_1:
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   1298              p.length = (size_t)length;
   \                     ??CrossCallReturnLabel_419:
   \   00004F   7402         MOV     A,#0x2
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   EE           MOV     A,R6
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   EF           MOV     A,R7
   \   000058   F0           MOVX    @DPTR,A
   1299              p.offset = 0;
   \   000059   7404         MOV     A,#0x4
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   E4           CLR     A
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   F0           MOVX    @DPTR,A
   1300              p.noalloc = true;
   \   000062   7408         MOV     A,#0x8
   \   000064   12....       LCALL   ?XSTACK_DISP0_8
   \   000067   7401         MOV     A,#0x1
   \   000069   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   1301              p.format = format;
   \                     ??CrossCallReturnLabel_544:
   \   00006C   740A         MOV     A,#0xa
   \   00006E   12....       LCALL   ?XSTACK_DISP0_8
   \   000071   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   1302              p.hooks = global_hooks;
   \                     ??CrossCallReturnLabel_500:
   \   000074   740C         MOV     A,#0xc
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AC82         MOV     R4,DPL
   \   00007B   AD83         MOV     R5,DPH
   \   00007D   7583..       MOV     DPH,#(global_hooks >> 8) & 0xff
   \   000080   7582..       MOV     DPL,#global_hooks & 0xff
   \   000083   7406         MOV     A,#0x6
   \   000085   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1303          
   1304              return print_value(item, &p);
   \   000088                ; Setup parameters for call to function print_value
   \   000088   85..82       MOV     DPL,?XSP + 0
   \   00008B   85..83       MOV     DPH,?XSP + 1
   \   00008E   AC82         MOV     R4,DPL
   \   000090   AD83         MOV     R5,DPH
   \   000092   12....       LCALL   ??print_value?relay
   \                     ??cJSON_PrintPreallocated_2:
   \   000095   7412         MOV     A,#0x12
   \   000097   02....       LJMP    ??Subroutine159_0 & 0xFFFF
   1305          }
   1306          
   1307          /* Parser core - when encountering text, process appropriately. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1308          static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_value:
   1309          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1310              if ((input_buffer == NULL) || (input_buffer->content == NULL))
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   6009         JZ      ??parse_value_0
   \   000011   8E82         MOV     DPL,R6
   \   000013   8F83         MOV     DPH,R7
   \   000015   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000018   7007         JNZ     ??parse_value_1
   1311              {
   1312                  return false; /* no input */
   \                     ??parse_value_0:
   \   00001A   7A00         MOV     R2,#0x0
   \                     ??parse_value_2:
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   02....       LJMP    ??parse_value_3 & 0xFFFF
   1313              }
   \                     ??parse_value_1:
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   C082         PUSH    DPL
   \   000029   C083         PUSH    DPH
   \   00002B   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00002E   D083         POP     DPH
   \   000030   D082         POP     DPL
   \   000032   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000035   4036         JC      ??parse_value_4
   \   000037                ; Setup parameters for call to function strncmp
   \   000037   75..04       MOV     ?V0 + 2,#0x4
   \   00003A   75..00       MOV     ?V0 + 3,#0x0
   \   00003D   78..         MOV     R0,#?V0 + 2
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7C..         MOV     R4,#`?<Constant "null">` & 0xff
   \   000044   7D..         MOV     R5,#(`?<Constant "null">` >> 8) & 0xff
   \   000046   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000049   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004C   8B..         MOV     ?V0 + 3,R3
   \   00004E   EA           MOV     A,R2
   \   00004F   45..         ORL     A,?V0 + 3
   \   000051   701A         JNZ     ??parse_value_4
   1314          
   1315              /* parse the different types of values */
   1316              /* null */
   1317              if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
   1318              {
   1319                  item->type = cJSON_NULL;
   \   000053   85..82       MOV     DPL,?V0 + 0
   \   000056   85..83       MOV     DPH,?V0 + 1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   7404         MOV     A,#0x4
   \                     ??parse_value_5:
   \   000061   12....       LCALL   ?Subroutine91 & 0xFFFF
   1320                  input_buffer->offset += 4;
   \                     ??CrossCallReturnLabel_338:
   \   000064   2404         ADD     A,#0x4
   \                     ??parse_value_6:
   \   000066   12....       LCALL   ??Subroutine157_0 & 0xFFFF
   1321                  return true;
   \                     ??CrossCallReturnLabel_232:
   \   000069   7A01         MOV     R2,#0x1
   \   00006B   80AF         SJMP    ??parse_value_2
   1322              }
   \                     ??parse_value_4:
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   C082         PUSH    DPL
   \   000075   C083         PUSH    DPH
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   2405         ADD     A,#0x5
   \   000082   F8           MOV     R0,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   3400         ADDC    A,#0x0
   \   000087   F9           MOV     R1,A
   \   000088   D083         POP     DPH
   \   00008A   D082         POP     DPL
   \   00008C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00008F   4031         JC      ??parse_value_7
   \   000091                ; Setup parameters for call to function strncmp
   \   000091   75..05       MOV     ?V0 + 2,#0x5
   \   000094   75..00       MOV     ?V0 + 3,#0x0
   \   000097   78..         MOV     R0,#?V0 + 2
   \   000099   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009C   7C..         MOV     R4,#`?<Constant "false">` & 0xff
   \   00009E   7D..         MOV     R5,#(`?<Constant "false">` >> 8) & 0xff
   \   0000A0   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   0000A3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A6   8B..         MOV     ?V0 + 3,R3
   \   0000A8   EA           MOV     A,R2
   \   0000A9   45..         ORL     A,?V0 + 3
   \   0000AB   7015         JNZ     ??parse_value_7
   1323              /* false */
   1324              if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
   1325              {
   1326                  item->type = cJSON_False;
   \   0000AD   85..82       MOV     DPL,?V0 + 0
   \   0000B0   85..83       MOV     DPH,?V0 + 1
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   7401         MOV     A,#0x1
   \   0000BB   12....       LCALL   ?Subroutine91 & 0xFFFF
   1327                  input_buffer->offset += 5;
   1328                  return true;
   1329              }
   \                     ??CrossCallReturnLabel_339:
   \   0000BE   2405         ADD     A,#0x5
   \   0000C0   80A4         SJMP    ??parse_value_6
   \                     ??parse_value_7:
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   C082         PUSH    DPL
   \   0000CA   C083         PUSH    DPH
   \   0000CC   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   0000CF   D083         POP     DPH
   \   0000D1   D082         POP     DPL
   \   0000D3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000D6   4038         JC      ??parse_value_8
   \   0000D8                ; Setup parameters for call to function strncmp
   \   0000D8   75..04       MOV     ?V0 + 2,#0x4
   \   0000DB   75..00       MOV     ?V0 + 3,#0x0
   \   0000DE   78..         MOV     R0,#?V0 + 2
   \   0000E0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E3   7C..         MOV     R4,#`?<Constant "true">` & 0xff
   \   0000E5   7D..         MOV     R5,#(`?<Constant "true">` >> 8) & 0xff
   \   0000E7   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   0000EA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000ED   8B..         MOV     ?V0 + 3,R3
   \   0000EF   EA           MOV     A,R2
   \   0000F0   45..         ORL     A,?V0 + 3
   \   0000F2   701C         JNZ     ??parse_value_8
   1330              /* true */
   1331              if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
   1332              {
   1333                  item->type = cJSON_True;
   \   0000F4   85..82       MOV     DPL,?V0 + 0
   \   0000F7   85..83       MOV     DPH,?V0 + 1
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   A3           INC     DPTR
   \   0000FD   A3           INC     DPTR
   \   0000FE   A3           INC     DPTR
   \   0000FF   A3           INC     DPTR
   \   000100   7402         MOV     A,#0x2
   \   000102   F0           MOVX    @DPTR,A
   \   000103   A3           INC     DPTR
   \   000104   E4           CLR     A
   \   000105   12....       LCALL   ?Subroutine92 & 0xFFFF
   1334                  item->valueint = 1;
   1335                  input_buffer->offset += 4;
   1336                  return true;
   1337              }
   \                     ??CrossCallReturnLabel_148:
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   A3           INC     DPTR
   \   00010C   04           INC     A
   \   00010D   02....       LJMP    ??parse_value_5 & 0xFFFF
   \                     ??parse_value_8:
   \   000110   8E82         MOV     DPL,R6
   \   000112   8F83         MOV     DPH,R7
   \   000114   A3           INC     DPTR
   \   000115   A3           INC     DPTR
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   C082         PUSH    DPL
   \   00011A   C083         PUSH    DPH
   \   00011C   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_623:
   \   00011F   D083         POP     DPH
   \   000121   D082         POP     DPL
   \   000123   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000126   4003         JC      $+5
   \   000128   02....       LJMP    ??parse_value_0 & 0xFFFF
   \   00012B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   00012E   6422         XRL     A,#0x22
   \   000130   700D         JNZ     ??parse_value_9
   1338              /* string */
   1339              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
   1340              {
   1341                  return parse_string(item, input_buffer);
   \   000132                ; Setup parameters for call to function parse_string
   \   000132   EE           MOV     A,R6
   \   000133   FC           MOV     R4,A
   \   000134   EF           MOV     A,R7
   \   000135   FD           MOV     R5,A
   \   000136   AA..         MOV     R2,?V0 + 0
   \   000138   AB..         MOV     R3,?V0 + 1
   \   00013A   12....       LCALL   ??parse_string?relay
   \   00013D   8047         SJMP    ??parse_value_3
   1342              }
   \                     ??parse_value_9:
   \   00013F   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000142   642D         XRL     A,#0x2d
   \   000144   600A         JZ      ??parse_value_10
   \   000146   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000149   24D0         ADD     A,#-0x30
   \   00014B   C3           CLR     C
   \   00014C   940A         SUBB    A,#0xa
   \   00014E   500D         JNC     ??parse_value_11
   1343              /* number */
   1344              if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
   1345              {
   1346                  return parse_number(item, input_buffer);
   \                     ??parse_value_10:
   \   000150                ; Setup parameters for call to function parse_number
   \   000150   EE           MOV     A,R6
   \   000151   FC           MOV     R4,A
   \   000152   EF           MOV     A,R7
   \   000153   FD           MOV     R5,A
   \   000154   AA..         MOV     R2,?V0 + 0
   \   000156   AB..         MOV     R3,?V0 + 1
   \   000158   12....       LCALL   ??parse_number?relay
   \   00015B   8029         SJMP    ??parse_value_3
   1347              }
   \                     ??parse_value_11:
   \   00015D   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   000160   645B         XRL     A,#0x5b
   \   000162   700D         JNZ     ??parse_value_12
   1348              /* array */
   1349              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
   1350              {
   1351                  return parse_array(item, input_buffer);
   \   000164                ; Setup parameters for call to function parse_array
   \   000164   EE           MOV     A,R6
   \   000165   FC           MOV     R4,A
   \   000166   EF           MOV     A,R7
   \   000167   FD           MOV     R5,A
   \   000168   AA..         MOV     R2,?V0 + 0
   \   00016A   AB..         MOV     R3,?V0 + 1
   \   00016C   12....       LCALL   ??parse_array?relay
   \   00016F   8015         SJMP    ??parse_value_3
   1352              }
   \                     ??parse_value_12:
   \   000171   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000174   647B         XRL     A,#0x7b
   \   000176   6003         JZ      $+5
   \   000178   02....       LJMP    ??parse_value_0 & 0xFFFF
   1353              /* object */
   1354              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
   1355              {
   1356                  return parse_object(item, input_buffer);
   \   00017B                ; Setup parameters for call to function parse_object
   \   00017B   EE           MOV     A,R6
   \   00017C   FC           MOV     R4,A
   \   00017D   EF           MOV     A,R7
   \   00017E   FD           MOV     R5,A
   \   00017F   AA..         MOV     R2,?V0 + 0
   \   000181   AB..         MOV     R3,?V0 + 1
   \   000183   12....       LCALL   ??parse_object?relay
   1357              }
   \                     ??parse_value_3:
   \   000186   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   1358          
   1359              return false;
   1360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   2404         ADD     A,#0x4
   \   00000B   F8           MOV     R0,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine166_0
   \   000004                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   28           ADD     A,R0
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   39           ADDC    A,R1
   \   000005   8A82         MOV     DPL,R2
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   00000C   FB           MOV     R3,A
   \   00000D   12....       LCALL   ??strncmp?relay
   \   000010   7402         MOV     A,#0x2
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009                REQUIRE ??Subroutine167_0
   \   000009                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   8A82         MOV     DPL,R2
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   12....       LCALL   ?Subroutine147 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine177_0
   \   000002                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine225_0
   \   000004                ; // Fall through to label ??Subroutine225_0
   1361          
   1362          /* Render a value to text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1363          static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_value:
   1364          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1365              unsigned char *output = NULL;
   1366          
   1367              if ((item == NULL) || (output_buffer == NULL))
   \   00000D   EA           MOV     A,R2
   \   00000E   45..         ORL     A,?V0 + 1
   \   000010   6004         JZ      ??print_value_0
   \   000012   EE           MOV     A,R6
   \   000013   4F           ORL     A,R7
   \   000014   7007         JNZ     ??print_value_1
   1368              {
   1369                  return false;
   \                     ??print_value_0:
   \   000016   7A00         MOV     R2,#0x0
   \                     ??print_value_2:
   \   000018   7B00         MOV     R3,#0x0
   \   00001A   02....       LJMP    ??print_value_3 & 0xFFFF
   1370              }
   1371          
   1372              switch ((item->type) & 0xFF)
   \                     ??print_value_1:
   \   00001D   8A82         MOV     DPL,R2
   \   00001F   8B83         MOV     DPH,R3
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   14           DEC     A
   \   000029   602D         JZ      ??print_value_4
   \   00002B   14           DEC     A
   \   00002C   6037         JZ      ??print_value_5
   \   00002E   24FE         ADD     A,#-0x2
   \   000030   6016         JZ      ??print_value_6
   \   000032   24FC         ADD     A,#-0x4
   \   000034   603A         JZ      ??print_value_7
   \   000036   24F8         ADD     A,#-0x8
   \   000038   606D         JZ      ??print_value_8
   \   00003A   24F0         ADD     A,#-0x10
   \   00003C   607A         JZ      ??print_value_9
   \   00003E   24E0         ADD     A,#-0x20
   \   000040   607B         JZ      ??print_value_10
   \   000042   24C0         ADD     A,#-0x40
   \   000044   602F         JZ      ??print_value_11
   \   000046   80CE         SJMP    ??print_value_0
   1373              {
   1374                  case cJSON_NULL:
   1375                      output = ensure(output_buffer, 5);
   \                     ??print_value_6:
   \   000048                ; Setup parameters for call to function ensure
   \   000048   12....       LCALL   ?Subroutine113 & 0xFFFF
   1376                      if (output == NULL)
   \                     ??CrossCallReturnLabel_300:
   \   00004B   60C9         JZ      ??print_value_0
   1377                      {
   1378                          return false;
   1379                      }
   1380                      strcpy((char*)output, "null");
   \   00004D                ; Setup parameters for call to function strcpy
   \   00004D   7C..         MOV     R4,#`?<Constant "null">` & 0xff
   \   00004F   7D..         MOV     R5,#(`?<Constant "null">` >> 8) & 0xff
   \                     ??print_value_12:
   \   000051   12....       LCALL   ??strcpy?relay
   1381                      return true;
   \                     ??print_value_13:
   \   000054   7A01         MOV     R2,#0x1
   \   000056   80C0         SJMP    ??print_value_2
   1382          
   1383                  case cJSON_False:
   1384                      output = ensure(output_buffer, 6);
   \                     ??print_value_4:
   \   000058                ; Setup parameters for call to function ensure
   \   000058   7C06         MOV     R4,#0x6
   \   00005A   12....       LCALL   ??Subroutine168_0 & 0xFFFF
   1385                      if (output == NULL)
   \                     ??CrossCallReturnLabel_302:
   \   00005D   60B7         JZ      ??print_value_0
   1386                      {
   1387                          return false;
   1388                      }
   1389                      strcpy((char*)output, "false");
   \   00005F                ; Setup parameters for call to function strcpy
   \   00005F   7C..         MOV     R4,#`?<Constant "false">` & 0xff
   \   000061   7D..         MOV     R5,#(`?<Constant "false">` >> 8) & 0xff
   \   000063   80EC         SJMP    ??print_value_12
   1390                      return true;
   1391          
   1392                  case cJSON_True:
   1393                      output = ensure(output_buffer, 5);
   \                     ??print_value_5:
   \   000065                ; Setup parameters for call to function ensure
   \   000065   12....       LCALL   ?Subroutine113 & 0xFFFF
   1394                      if (output == NULL)
   \                     ??CrossCallReturnLabel_301:
   \   000068   60AC         JZ      ??print_value_0
   1395                      {
   1396                          return false;
   1397                      }
   1398                      strcpy((char*)output, "true");
   \   00006A                ; Setup parameters for call to function strcpy
   \   00006A   7C..         MOV     R4,#`?<Constant "true">` & 0xff
   \   00006C   7D..         MOV     R5,#(`?<Constant "true">` >> 8) & 0xff
   \   00006E   80E1         SJMP    ??print_value_12
   1399                      return true;
   1400          
   1401                  case cJSON_Number:
   1402                      return print_number(item, output_buffer);
   \                     ??print_value_7:
   \   000070                ; Setup parameters for call to function print_number
   \   000070   12....       LCALL   ??print_number?relay
   \   000073   804B         SJMP    ??print_value_3
   1403          
   1404                  case cJSON_Raw:
   1405                  {
   1406                      size_t raw_length = 0;
   1407                      if (item->valuestring == NULL)
   \                     ??print_value_11:
   \   000075   8A82         MOV     DPL,R2
   \   000077   8B83         MOV     DPH,R3
   \   000079   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_482:
   \   00007C   6098         JZ      ??print_value_0
   1408                      {
   1409                          return false;
   1410                      }
   1411          
   1412                      raw_length = strlen(item->valuestring) + sizeof("");
   \   00007E                ; Setup parameters for call to function strlen
   \   00007E   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000081   12....       LCALL   ?Subroutine90 & 0xFFFF
   1413                      output = ensure(output_buffer, raw_length);
   \                     ??CrossCallReturnLabel_146:
   \   000084                ; Setup parameters for call to function ensure
   \   000084   AC..         MOV     R4,?V0 + 2
   \   000086   FD           MOV     R5,A
   \   000087   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   1414                      if (output == NULL)
   \                     ??CrossCallReturnLabel_304:
   \   00008A   608A         JZ      ??print_value_0
   1415                      {
   1416                          return false;
   1417                      }
   1418                      memcpy(output, item->valuestring, raw_length);
   \   00008C                ; Setup parameters for call to function memcpy
   \   00008C   78..         MOV     R0,#?V0 + 2
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   85..82       MOV     DPL,?V0 + 0
   \   000094   85..83       MOV     DPH,?V0 + 1
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   1419                      return true;
   \   0000A5   80AD         SJMP    ??print_value_13
   1420                  }
   1421          
   1422                  case cJSON_String:
   1423                      return print_string(item, output_buffer);
   \                     ??print_value_8:
   \   0000A7                ; Setup parameters for call to function print_string_ptr
   \   0000A7   8A82         MOV     DPL,R2
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   0000B6   8008         SJMP    ??print_value_3
   1424          
   1425                  case cJSON_Array:
   1426                      return print_array(item, output_buffer);
   \                     ??print_value_9:
   \   0000B8                ; Setup parameters for call to function print_array
   \   0000B8   12....       LCALL   ??print_array?relay
   \   0000BB   8003         SJMP    ??print_value_3
   1427          
   1428                  case cJSON_Object:
   1429                      return print_object(item, output_buffer);
   \                     ??print_value_10:
   \   0000BD                ; Setup parameters for call to function print_object
   \   0000BD   12....       LCALL   ??print_object?relay
   1430          
   1431                  default:
   1432                      return false;
   1433              }
   \                     ??print_value_3:
   \   0000C0   02....       LJMP    ??Subroutine189_0 & 0xFFFF
   1434          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   7C05         MOV     R4,#0x5
   \   000002                REQUIRE ??Subroutine168_0
   \   000002                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   7D00         MOV     R5,#0x0
   \   000002                REQUIRE ??Subroutine169_0
   \   000002                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_536:
   \   000003   12....       LCALL   ??print_string_ptr?relay
   \   000006   22           RET
   1435          
   1436          /* Build an array from input text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine155_0
   \   000002                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1437          static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_array:
   1438          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   1439              cJSON *head = NULL; /* head of the linked list */
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
   1440              cJSON *current_item = NULL;
   \   000011   8E..         MOV     ?V0 + 2,R6
   \   000013   8E..         MOV     ?V0 + 3,R6
   1441          
   1442              if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   C3           CLR     C
   \   000020   E0           MOVX    A,@DPTR
   \   000021   94E8         SUBB    A,#-0x18
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   9403         SUBB    A,#0x3
   \   000027   4005         JC      ??parse_array_0
   1443              {
   1444                  return false; /* to deeply nested */
   \                     ??parse_array_1:
   \   000029   7A00         MOV     R2,#0x0
   1445              }
   \                     ??parse_array_2:
   \   00002B   02....       LJMP    ?Subroutine11 & 0xFFFF
   1446              input_buffer->depth++;
   \                     ??parse_array_0:
   \   00002E   8C82         MOV     DPL,R4
   \   000030   8D83         MOV     DPH,R5
   \   000032   12....       LCALL   ??Subroutine154_0 & 0xFFFF
   1447          
   1448              if (buffer_at_offset(input_buffer)[0] != '[')
   \                     ??CrossCallReturnLabel_236:
   \   000035   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000038   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   00003B   645B         XRL     A,#0x5b
   \   00003D   70EA         JNZ     ??parse_array_1
   1449              {
   1450                  /* not an array */
   1451                  goto fail;
   1452              }
   1453          
   1454              input_buffer->offset++;
   \   00003F   8C82         MOV     DPL,R4
   \   000041   8D83         MOV     DPH,R5
   \   000043   12....       LCALL   ?Subroutine35 & 0xFFFF
   1455              buffer_skip_whitespace(input_buffer);
   1456              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
   \                     ??CrossCallReturnLabel_47:
   \   000046   E5..         MOV     A,?V0 + 0
   \   000048   45..         ORL     A,?V0 + 1
   \   00004A   6057         JZ      ??parse_array_3
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   C082         PUSH    DPL
   \   000058   C083         PUSH    DPH
   \   00005A   85..82       MOV     DPL,?V0 + 0
   \   00005D   85..83       MOV     DPH,?V0 + 1
   \   000060   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_619:
   \   000063   D083         POP     DPH
   \   000065   D082         POP     DPL
   \   000067   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   00006A   5037         JNC     ??parse_array_3
   \   00006C   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   00006F   645D         XRL     A,#0x5d
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??parse_array_4 & 0xFFFF
   1457              {
   1458                  /* empty array */
   1459                  goto success;
   1460              }
   1461          
   1462              /* check if we skipped to the end of the buffer */
   1463              if (cannot_access_at_index(input_buffer, 0))
   1464              {
   1465                  input_buffer->offset--;
   1466                  goto fail;
   1467              }
   1468          
   1469              /* step back to character in front of the first element */
   1470              input_buffer->offset--;
   \   000076   12....       LCALL   ?Subroutine58 & 0xFFFF
   1471              /* loop through the comma separated array elements */
   1472              do
   1473              {
   1474                  /* allocate next item */
   1475                  cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   \                     ??CrossCallReturnLabel_309:
   \   000079                ; Setup parameters for call to function cJSON_New_Item
   \   000079   E5..         MOV     A,?V0 + 0
   \   00007B   2408         ADD     A,#0x8
   \   00007D   FA           MOV     R2,A
   \   00007E   E5..         MOV     A,?V0 + 1
   \   000080   3400         ADDC    A,#0x0
   \   000082   FB           MOV     R3,A
   \   000083   12....       LCALL   ??cJSON_New_Item?relay
   \   000086   8A..         MOV     ?V0 + 6,R2
   \   000088   8B..         MOV     ?V0 + 7,R3
   \   00008A   A8..         MOV     R0,?V0 + 6
   \   00008C   A9..         MOV     R1,?V0 + 7
   1476                  if (new_item == NULL)
   \   00008E   E8           MOV     A,R0
   \   00008F   49           ORL     A,R1
   \   000090   7003         JNZ     $+5
   \   000092   02....       LJMP    ??parse_array_5 & 0xFFFF
   1477                  {
   1478                      goto fail; /* allocation failure */
   1479                  }
   1480          
   1481                  /* attach next item to list */
   1482                  if (head == NULL)
   \   000095   EE           MOV     A,R6
   \   000096   4F           ORL     A,R7
   \   000097   700F         JNZ     ??parse_array_6
   1483                  {
   1484                      /* start the linked list */
   1485                      current_item = head = new_item;
   \   000099   E8           MOV     A,R0
   \   00009A   FE           MOV     R6,A
   \   00009B   E9           MOV     A,R1
   \   00009C   FF           MOV     R7,A
   \   00009D   8E..         MOV     ?V0 + 2,R6
   \   00009F   8F..         MOV     ?V0 + 3,R7
   \   0000A1   8019         SJMP    ??parse_array_7
   1486                  }
   \                     ??parse_array_3:
   \   0000A3   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   0000A6   8081         SJMP    ??parse_array_1
   1487                  else
   1488                  {
   1489                      /* add to the end and advance */
   1490                      current_item->next = new_item;
   \                     ??parse_array_6:
   \   0000A8   85..82       MOV     DPL,?V0 + 2
   \   0000AB   85..83       MOV     DPH,?V0 + 3
   \   0000AE   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   1491                      new_item->prev = current_item;
   \                     ??CrossCallReturnLabel_420:
   \   0000B1   8882         MOV     DPL,R0
   \   0000B3   8983         MOV     DPH,R1
   \   0000B5   12....       LCALL   ?Subroutine100 & 0xFFFF
   1492                      current_item = new_item;
   \                     ??CrossCallReturnLabel_336:
   \   0000B8   88..         MOV     ?V0 + 2,R0
   \   0000BA   89..         MOV     ?V0 + 3,R1
   1493                  }
   1494          
   1495                  /* parse next value */
   1496                  input_buffer->offset++;
   \                     ??parse_array_7:
   \   0000BC   85..82       MOV     DPL,?V0 + 0
   \   0000BF   85..83       MOV     DPH,?V0 + 1
   \   0000C2   12....       LCALL   ?Subroutine35 & 0xFFFF
   1497                  buffer_skip_whitespace(input_buffer);
   1498                  if (!parse_value(current_item, input_buffer))
   \                     ??CrossCallReturnLabel_48:
   \   0000C5                ; Setup parameters for call to function parse_value
   \   0000C5   AC..         MOV     R4,?V0 + 0
   \   0000C7   AD..         MOV     R5,?V0 + 1
   \   0000C9   AA..         MOV     R2,?V0 + 2
   \   0000CB   AB..         MOV     R3,?V0 + 3
   \   0000CD   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   0000D0   606E         JZ      ??parse_array_5
   1499                  {
   1500                      goto fail; /* failed to parse value */
   1501                  }
   1502                  buffer_skip_whitespace(input_buffer);
   \   0000D2                ; Setup parameters for call to function buffer_skip_whitespace
   \   0000D2   AA..         MOV     R2,?V0 + 0
   \   0000D4   AB..         MOV     R3,?V0 + 1
   \   0000D6   12....       LCALL   ??buffer_skip_whitespace?relay
   1503              }
   1504              while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   \   0000D9   85..82       MOV     DPL,?V0 + 0
   \   0000DC   85..83       MOV     DPH,?V0 + 1
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   A3           INC     DPTR
   \   0000E3   C082         PUSH    DPL
   \   0000E5   C083         PUSH    DPH
   \   0000E7   85..82       MOV     DPL,?V0 + 0
   \   0000EA   85..83       MOV     DPH,?V0 + 1
   \   0000ED   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_620:
   \   0000F0   D083         POP     DPH
   \   0000F2   D082         POP     DPL
   \   0000F4   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0000F7   5047         JNC     ??parse_array_5
   \   0000F9   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   0000FC   642C         XRL     A,#0x2c
   \   0000FE   7003         JNZ     $+5
   \   000100   02....       LJMP    ??CrossCallReturnLabel_309 & 0xFFFF
   \   000103   85..82       MOV     DPL,?V0 + 0
   \   000106   85..83       MOV     DPH,?V0 + 1
   \   000109   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   00010C   645D         XRL     A,#0x5d
   \   00010E   7030         JNZ     ??parse_array_5
   1505          
   1506              if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
   1507              {
   1508                  goto fail; /* expected end of array */
   1509              }
   1510          
   1511          success:
   1512              input_buffer->depth--;
   \                     ??parse_array_4:
   \   000110   85..82       MOV     DPL,?V0 + 0
   \   000113   85..83       MOV     DPH,?V0 + 1
   \   000116   A3           INC     DPTR
   \   000117   A3           INC     DPTR
   \   000118   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   1513          
   1514              if (head != NULL) {
   \                     ??CrossCallReturnLabel_306:
   \   00011B   EE           MOV     A,R6
   \   00011C   4F           ORL     A,R7
   \   00011D   6007         JZ      ??CrossCallReturnLabel_337
   1515                  head->prev = current_item;
   \   00011F   8E82         MOV     DPL,R6
   \   000121   8F83         MOV     DPH,R7
   \   000123   12....       LCALL   ?Subroutine100 & 0xFFFF
   1516              }
   1517          
   1518              item->type = cJSON_Array;
   \                     ??CrossCallReturnLabel_337:
   \   000126   85..82       MOV     DPL,?V0 + 4
   \   000129   85..83       MOV     DPH,?V0 + 5
   \   00012C   12....       LCALL   ?Subroutine98 & 0xFFFF
   1519              item->child = head;
   \                     ??CrossCallReturnLabel_551:
   \   00012F   85..82       MOV     DPL,?V0 + 4
   \   000132   85..83       MOV     DPH,?V0 + 5
   \   000135   A3           INC     DPTR
   \   000136   A3           INC     DPTR
   \   000137   12....       LCALL   ?Subroutine96 & 0xFFFF
   1520          
   1521              input_buffer->offset++;
   \                     ??CrossCallReturnLabel_244:
   \   00013A   12....       LCALL   ?Subroutine54 & 0xFFFF
   1522          
   1523              return true;
   \                     ??CrossCallReturnLabel_81:
   \   00013D   02....       LJMP    ??parse_array_2 & 0xFFFF
   1524          
   1525          fail:
   1526              if (head != NULL)
   \                     ??parse_array_5:
   \   000140   EE           MOV     A,R6
   \   000141   4F           ORL     A,R7
   \   000142   7003         JNZ     $+5
   \   000144   02....       LJMP    ??parse_array_1 & 0xFFFF
   1527              {
   1528                  cJSON_Delete(head);
   \   000147                ; Setup parameters for call to function cJSON_Delete
   \   000147   EE           MOV     A,R6
   \   000148   FA           MOV     R2,A
   \   000149   EF           MOV     A,R7
   \   00014A   FB           MOV     R3,A
   \   00014B   12....       LCALL   ??cJSON_Delete?relay
   \   00014E   02....       LJMP    ??parse_array_1 & 0xFFFF
   1529              }
   1530          
   1531              return false;
   1532          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine170_0
   \   000006                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000003                ; Setup parameters for call to function buffer_skip_whitespace
   \   000003                ; Setup parameters for call to function buffer_skip_whitespace
   \   000003   AA..         MOV     R2,?V0 + 0
   \   000005   AB..         MOV     R3,?V0 + 1
   \   000007   12....       LCALL   ??buffer_skip_whitespace?relay
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_631:
   \   000009   85..82       MOV     DPL,?V0 + 0
   \   00000C   85..83       MOV     DPH,?V0 + 1
   \   00000F                REQUIRE ??Subroutine171_0
   \   00000F                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   02....       LJMP    ??Subroutine151_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine175_0
   \   000002                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000003   7A01         MOV     R2,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   2401         ADD     A,#0x1
   \   000007   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine201_0
   \   000004                ; // Fall through to label ??Subroutine201_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   7420         MOV     A,#0x20
   \   000008                REQUIRE ??Subroutine212_0
   \   000008                ; // Fall through to label ??Subroutine212_0
   1533          
   1534          /* Render an array to text */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine154_0
   \   000004                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1535          static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_array:
   1536          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine39 & 0xFFFF
   1537              unsigned char *output_pointer = NULL;
   1538              size_t length = 0;
   1539              cJSON *current_element = item->child;
   1540          
   1541              if (output_buffer == NULL)
   \                     ??CrossCallReturnLabel_330:
   \   000008   7004         JNZ     ??print_array_0
   1542              {
   1543                  return false;
   \                     ??print_array_1:
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   807B         SJMP    ??CrossCallReturnLabel_86
   1544              }
   1545          
   1546              /* Compose the output array. */
   1547              /* opening square bracket */
   1548              output_pointer = ensure(output_buffer, 1);
   \                     ??print_array_0:
   \   00000E                ; Setup parameters for call to function ensure
   \   00000E   7C01         MOV     R4,#0x1
   \   000010   7D00         MOV     R5,#0x0
   \   000012   EE           MOV     A,R6
   \   000013   FA           MOV     R2,A
   \   000014   EF           MOV     A,R7
   \   000015   FB           MOV     R3,A
   \   000016   12....       LCALL   ?Subroutine111 & 0xFFFF
   1549              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_175:
   \   000019   60EF         JZ      ??print_array_1
   1550              {
   1551                  return false;
   1552              }
   1553          
   1554              *output_pointer = '[';
   \   00001B   8882         MOV     DPL,R0
   \   00001D   8983         MOV     DPH,R1
   \   00001F   745B         MOV     A,#0x5b
   \   000021   12....       LCALL   ?Subroutine143 & 0xFFFF
   1555              output_buffer->offset++;
   \                     ??CrossCallReturnLabel_218:
   \   000024   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   1556              output_buffer->depth++;
   \                     ??CrossCallReturnLabel_235:
   \   000027   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   00002A   802A         SJMP    ??CrossCallReturnLabel_512
   1557          
   1558              while (current_element != NULL)
   1559              {
   1560                  if (!print_value(current_element, output_buffer))
   1561                  {
   1562                      return false;
   1563                  }
   1564                  update_offset(output_buffer);
   1565                  if (current_element->next)
   1566                  {
   1567                      length = (size_t) (output_buffer->format ? 2 : 1);
   \                     ??print_array_2:
   \   00002C   75..01       MOV     ?V0 + 2,#0x1
   1568                      output_pointer = ensure(output_buffer, length + 1);
   \                     ??print_array_3:
   \   00002F                ; Setup parameters for call to function ensure
   \   00002F   12....       LCALL   ?Subroutine83 & 0xFFFF
   1569                      if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_325:
   \   000032   60D6         JZ      ??print_array_1
   1570                      {
   1571                          return false;
   1572                      }
   1573                      *output_pointer++ = ',';
   \   000034   8882         MOV     DPL,R0
   \   000036   8983         MOV     DPH,R1
   \   000038   742C         MOV     A,#0x2c
   \   00003A   12....       LCALL   ?Subroutine21 & 0xFFFF
   1574                      if(output_buffer->format)
   \                     ??CrossCallReturnLabel_369:
   \   00003D   600B         JZ      ??print_array_4
   1575                      {
   1576                          *output_pointer++ = ' ';
   \   00003F   8882         MOV     DPL,R0
   \   000041   8983         MOV     DPH,R1
   \   000043   7420         MOV     A,#0x20
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   08           INC     R0
   \   000048   A983         MOV     R1,DPH
   1577                      }
   1578                      *output_pointer = '\0';
   \                     ??print_array_4:
   \   00004A   8882         MOV     DPL,R0
   \   00004C   8983         MOV     DPH,R1
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   1579                      output_buffer->offset += length;
   \   000050   12....       LCALL   ?Subroutine40 & 0xFFFF
   1580                  }
   1581                  current_element = current_element->next;
   \                     ??CrossCallReturnLabel_56:
   \   000053   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_512:
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   45..         ORL     A,?V0 + 1
   \   00005A   601B         JZ      ??print_array_5
   \   00005C                ; Setup parameters for call to function print_value
   \   00005C   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00005F   60A9         JZ      ??print_array_1
   \   000061                ; Setup parameters for call to function update_offset
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000068   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   00006B   60E6         JZ      ??CrossCallReturnLabel_56
   \   00006D   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   1582              }
   \                     ??CrossCallReturnLabel_486:
   \   000070   60BA         JZ      ??print_array_2
   \   000072   75..02       MOV     ?V0 + 2,#0x2
   \   000075   80B8         SJMP    ??print_array_3
   1583          
   1584              output_pointer = ensure(output_buffer, 2);
   \                     ??print_array_5:
   \   000077                ; Setup parameters for call to function ensure
   \   000077   7C02         MOV     R4,#0x2
   \   000079   7D00         MOV     R5,#0x0
   \   00007B   12....       LCALL   ?Subroutine112 & 0xFFFF
   1585              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_177:
   \   00007E   608A         JZ      ??print_array_1
   1586              {
   1587                  return false;
   1588              }
   1589              *output_pointer++ = ']';
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   745D         MOV     A,#0x5d
   \   000086   12....       LCALL   ?Subroutine57 & 0xFFFF
   1590              *output_pointer = '\0';
   1591              output_buffer->depth--;
   1592          
   1593              return true;
   \                     ??CrossCallReturnLabel_86:
   \   000089   02....       LJMP    ?Subroutine4 & 0xFFFF
   1594          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   EE           MOV     A,R6
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   FD           MOV     R5,A
   \   000004   AA..         MOV     R2,?V0 + 0
   \   000006   AB..         MOV     R3,?V0 + 1
   \   000008                REQUIRE ??Subroutine172_0
   \   000008                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   2401         ADD     A,#0x1
   \   000004   FC           MOV     R4,A
   \   000005   E4           CLR     A
   \   000006                REQUIRE ??Subroutine173_0
   \   000006                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FD           MOV     R5,A
   \   000003   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine145:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??ensure?relay
   \   000007   8A..         MOV     ?V0 + 4,R2
   \   000009   8B..         MOV     ?V0 + 5,R3
   \   00000B   A8..         MOV     R0,?V0 + 4
   \   00000D   A9..         MOV     R1,?V0 + 5
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   EC           MOV     A,R4
   \   000001   FE           MOV     R6,A
   \   000002   ED           MOV     A,R5
   \   000003   FF           MOV     R7,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine174_0
   \   00000C                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??ensure?relay
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   A8..         MOV     R0,?V0 + 0
   \   00000D   A9..         MOV     R1,?V0 + 1
   \   00000F   E8           MOV     A,R0
   \   000010   49           ORL     A,R1
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   12....       LCALL   ??ensure?relay
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   A8..         MOV     R0,?V0 + 2
   \   000009   A9..         MOV     R1,?V0 + 3
   \   00000B   E8           MOV     A,R0
   \   00000C   49           ORL     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine141:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   25..         ADD     A,?V0 + 2
   \   00000B   12....       LCALL   ?Subroutine148 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine184_0
   \   00000C                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine185_0
   \   000002                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_538:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV     R3,#0x0
   \   000002                REQUIRE ??Subroutine189_0
   \   000002                ; // Fall through to label ??Subroutine189_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine196_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine197_0
   \   000006                ; // Fall through to label ??Subroutine197_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006                REQUIRE ??Subroutine207_0
   \   000006                ; // Fall through to label ??Subroutine207_0
   1595          
   1596          /* Build an object from the text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1597          static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
   \                     parse_object:
   1598          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1599              cJSON *head = NULL; /* linked list head */
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   1600              cJSON *current_item = NULL;
   \   000013   75..00       MOV     ?V0 + 0,#0x0
   \   000016   75..00       MOV     ?V0 + 1,#0x0
   1601          
   1602              if (input_buffer->depth >= CJSON_NESTING_LIMIT)
   \   000019   8E82         MOV     DPL,R6
   \   00001B   8F83         MOV     DPH,R7
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   C3           CLR     C
   \   000024   E0           MOVX    A,@DPTR
   \   000025   94E8         SUBB    A,#-0x18
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   9403         SUBB    A,#0x3
   \   00002B   4005         JC      ??parse_object_0
   1603              {
   1604                  return false; /* to deeply nested */
   \                     ??parse_object_1:
   \   00002D   7A00         MOV     R2,#0x0
   1605              }
   \                     ??parse_object_2:
   \   00002F   02....       LJMP    ?Subroutine11 & 0xFFFF
   1606              input_buffer->depth++;
   \                     ??parse_object_0:
   \   000032   12....       LCALL   ?Subroutine55 & 0xFFFF
   1607          
   1608              if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
   \                     ??CrossCallReturnLabel_238:
   \   000035   EE           MOV     A,R6
   \   000036   4F           ORL     A,R7
   \   000037   60F4         JZ      ??parse_object_1
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   C082         PUSH    DPL
   \   000043   C083         PUSH    DPH
   \   000045   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_624:
   \   000048   D083         POP     DPH
   \   00004A   D082         POP     DPL
   \   00004C   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   00004F   50DC         JNC     ??parse_object_1
   \   000051   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   000054   647B         XRL     A,#0x7b
   \   000056   70D5         JNZ     ??parse_object_1
   1609              {
   1610                  goto fail; /* not an object */
   1611              }
   1612          
   1613              input_buffer->offset++;
   \   000058   EE           MOV     A,R6
   \   000059   2404         ADD     A,#0x4
   \   00005B   F5..         MOV     ?V0 + 4,A
   \   00005D   EF           MOV     A,R7
   \   00005E   3400         ADDC    A,#0x0
   \   000060   F5..         MOV     ?V0 + 5,A
   \   000062   85..82       MOV     DPL,?V0 + 4
   \   000065   F583         MOV     DPH,A
   \   000067   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   1614              buffer_skip_whitespace(input_buffer);
   \                     ??CrossCallReturnLabel_233:
   \   00006A                ; Setup parameters for call to function buffer_skip_whitespace
   \   00006A   EE           MOV     A,R6
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FB           MOV     R3,A
   \   00006E   12....       LCALL   ??buffer_skip_whitespace?relay
   1615              if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
   \   000071   85..82       MOV     DPL,?V0 + 4
   \   000074   85..83       MOV     DPH,?V0 + 5
   \   000077   C082         PUSH    DPL
   \   000079   C083         PUSH    DPH
   \   00007B   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_625:
   \   00007E   D083         POP     DPH
   \   000080   D082         POP     DPL
   \   000082   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000085   8E82         MOV     DPL,R6
   \   000087   8F83         MOV     DPH,R7
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   5037         JNC     ??parse_object_3
   \   000090   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000093   647D         XRL     A,#0x7d
   \   000095   7003         JNZ     $+5
   \   000097   02....       LJMP    ??parse_object_4 & 0xFFFF
   1616              {
   1617                  goto success; /* empty object */
   1618              }
   1619          
   1620              /* check if we skipped to the end of the buffer */
   1621              if (cannot_access_at_index(input_buffer, 0))
   1622              {
   1623                  input_buffer->offset--;
   1624                  goto fail;
   1625              }
   1626          
   1627              /* step back to character in front of the first element */
   1628              input_buffer->offset--;
   \   00009A   8E82         MOV     DPL,R6
   \   00009C   8F83         MOV     DPH,R7
   \   00009E   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   1629              /* loop through the comma separated array elements */
   1630              do
   1631              {
   1632                  /* allocate next item */
   1633                  cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
   \                     ??CrossCallReturnLabel_307:
   \   0000A1                ; Setup parameters for call to function cJSON_New_Item
   \   0000A1   EE           MOV     A,R6
   \   0000A2   2408         ADD     A,#0x8
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   3400         ADDC    A,#0x0
   \   0000A8   FB           MOV     R3,A
   \   0000A9   12....       LCALL   ??cJSON_New_Item?relay
   \   0000AC   8A..         MOV     ?V0 + 4,R2
   \   0000AE   8B..         MOV     ?V0 + 5,R3
   \   0000B0   A8..         MOV     R0,?V0 + 4
   \   0000B2   A9..         MOV     R1,?V0 + 5
   1634                  if (new_item == NULL)
   \   0000B4   E8           MOV     A,R0
   \   0000B5   49           ORL     A,R1
   \   0000B6   7003         JNZ     $+5
   \   0000B8   02....       LJMP    ??parse_object_5 & 0xFFFF
   1635                  {
   1636                      goto fail; /* allocation failure */
   1637                  }
   1638          
   1639                  /* attach next item to list */
   1640                  if (head == NULL)
   \   0000BB   E5..         MOV     A,?V0 + 2
   \   0000BD   45..         ORL     A,?V0 + 3
   \   0000BF   700C         JNZ     ??parse_object_6
   1641                  {
   1642                      /* start the linked list */
   1643                      current_item = head = new_item;
   \   0000C1   88..         MOV     ?V0 + 2,R0
   \   0000C3   89..         MOV     ?V0 + 3,R1
   \   0000C5   8012         SJMP    ??CrossCallReturnLabel_504
   1644                  }
   \                     ??parse_object_3:
   \   0000C7   12....       LCALL   ?Subroutine149 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   0000CA   02....       LJMP    ??parse_object_1 & 0xFFFF
   1645                  else
   1646                  {
   1647                      /* add to the end and advance */
   1648                      current_item->next = new_item;
   \                     ??parse_object_6:
   \   0000CD   85..82       MOV     DPL,?V0 + 0
   \   0000D0   85..83       MOV     DPH,?V0 + 1
   \   0000D3   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   1649                      new_item->prev = current_item;
   \                     ??CrossCallReturnLabel_421:
   \   0000D6   12....       LCALL   ?Subroutine94 & 0xFFFF
   1650                      current_item = new_item;
   \                     ??CrossCallReturnLabel_504:
   \   0000D9   88..         MOV     ?V0 + 0,R0
   \   0000DB   89..         MOV     ?V0 + 1,R1
   1651                  }
   1652          
   1653                  /* parse the name of the child */
   1654                  input_buffer->offset++;
   \   0000DD   12....       LCALL   ?Subroutine29 & 0xFFFF
   1655                  buffer_skip_whitespace(input_buffer);
   1656                  if (!parse_string(current_item, input_buffer))
   \                     ??CrossCallReturnLabel_33:
   \   0000E0   12....       LCALL   ??parse_string?relay
   \   0000E3   8B..         MOV     ?V0 + 5,R3
   \   0000E5   EA           MOV     A,R2
   \   0000E6   45..         ORL     A,?V0 + 5
   \   0000E8   7003         JNZ     $+5
   \   0000EA   02....       LJMP    ??parse_object_5 & 0xFFFF
   1657                  {
   1658                      goto fail; /* failed to parse name */
   1659                  }
   1660                  buffer_skip_whitespace(input_buffer);
   \   0000ED                ; Setup parameters for call to function buffer_skip_whitespace
   \   0000ED   EE           MOV     A,R6
   \   0000EE   FA           MOV     R2,A
   \   0000EF   EF           MOV     A,R7
   \   0000F0   FB           MOV     R3,A
   \   0000F1   12....       LCALL   ??buffer_skip_whitespace?relay
   1661          
   1662                  /* swap valuestring and string, because we parsed the name */
   1663                  current_item->string = current_item->valuestring;
   \   0000F4   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000F7   8882         MOV     DPL,R0
   \   0000F9   8983         MOV     DPH,R1
   \   0000FB   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   0000FE   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   1664                  current_item->valuestring = NULL;
   \                     ??CrossCallReturnLabel_574:
   \   000101   8882         MOV     DPL,R0
   \   000103   8983         MOV     DPH,R1
   \   000105   12....       LCALL   ?Subroutine99 & 0xFFFF
   1665          
   1666                  if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
   \                     ??CrossCallReturnLabel_154:
   \   000108   C082         PUSH    DPL
   \   00010A   C083         PUSH    DPH
   \   00010C   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_626:
   \   00010F   D083         POP     DPH
   \   000111   D082         POP     DPL
   \   000113   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000116   507A         JNC     ??parse_object_5
   \   000118   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00011B   643A         XRL     A,#0x3a
   \   00011D   7073         JNZ     ??parse_object_5
   1667                  {
   1668                      goto fail; /* invalid object */
   1669                  }
   1670          
   1671                  /* parse the value */
   1672                  input_buffer->offset++;
   \   00011F   12....       LCALL   ?Subroutine29 & 0xFFFF
   1673                  buffer_skip_whitespace(input_buffer);
   1674                  if (!parse_value(current_item, input_buffer))
   \                     ??CrossCallReturnLabel_34:
   \   000122   12....       LCALL   ??parse_value?relay
   \   000125   8B..         MOV     ?V0 + 5,R3
   \   000127   EA           MOV     A,R2
   \   000128   45..         ORL     A,?V0 + 5
   \   00012A   6066         JZ      ??parse_object_5
   1675                  {
   1676                      goto fail; /* failed to parse value */
   1677                  }
   1678                  buffer_skip_whitespace(input_buffer);
   \   00012C                ; Setup parameters for call to function buffer_skip_whitespace
   \   00012C   EE           MOV     A,R6
   \   00012D   FA           MOV     R2,A
   \   00012E   EF           MOV     A,R7
   \   00012F   FB           MOV     R3,A
   \   000130   12....       LCALL   ??buffer_skip_whitespace?relay
   1679              }
   1680              while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
   \   000133   8E82         MOV     DPL,R6
   \   000135   8F83         MOV     DPH,R7
   \   000137   A3           INC     DPTR
   \   000138   A3           INC     DPTR
   \   000139   A3           INC     DPTR
   \   00013A   A3           INC     DPTR
   \   00013B   C082         PUSH    DPL
   \   00013D   C083         PUSH    DPH
   \   00013F   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_627:
   \   000142   D083         POP     DPH
   \   000144   D082         POP     DPL
   \   000146   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000149   5047         JNC     ??parse_object_5
   \   00014B   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00014E   642C         XRL     A,#0x2c
   \   000150   7003         JNZ     $+5
   \   000152   02....       LJMP    ??CrossCallReturnLabel_307 & 0xFFFF
   \   000155   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000158   647D         XRL     A,#0x7d
   \   00015A   7036         JNZ     ??parse_object_5
   1681          
   1682              if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
   1683              {
   1684                  goto fail; /* expected end of object */
   1685              }
   1686          
   1687          success:
   1688              input_buffer->depth--;
   \                     ??parse_object_4:
   \   00015C   8E82         MOV     DPL,R6
   \   00015E   8F83         MOV     DPH,R7
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   1689          
   1690              if (head != NULL) {
   \                     ??CrossCallReturnLabel_308:
   \   000165   E5..         MOV     A,?V0 + 2
   \   000167   45..         ORL     A,?V0 + 3
   \   000169   6009         JZ      ??CrossCallReturnLabel_503
   1691                  head->prev = current_item;
   \   00016B   85..82       MOV     DPL,?V0 + 2
   \   00016E   85..83       MOV     DPH,?V0 + 3
   \   000171   12....       LCALL   ??Subroutine205_0 & 0xFFFF
   1692              }
   1693          
   1694              item->type = cJSON_Object;
   \                     ??CrossCallReturnLabel_503:
   \   000174   85..82       MOV     DPL,?V0 + 6
   \   000177   85..83       MOV     DPH,?V0 + 7
   \   00017A   A3           INC     DPTR
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   7440         MOV     A,#0x40
   \   000182   12....       LCALL   ?Subroutine97 & 0xFFFF
   1695              item->child = head;
   \                     ??CrossCallReturnLabel_153:
   \   000185   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   1696          
   1697              input_buffer->offset++;
   \                     ??CrossCallReturnLabel_335:
   \   000188   8E82         MOV     DPL,R6
   \   00018A   8F83         MOV     DPH,R7
   \   00018C   12....       LCALL   ?Subroutine54 & 0xFFFF
   1698              return true;
   \                     ??CrossCallReturnLabel_82:
   \   00018F   02....       LJMP    ??parse_object_2 & 0xFFFF
   1699          
   1700          fail:
   1701              if (head != NULL)
   \                     ??parse_object_5:
   \   000192   E5..         MOV     A,?V0 + 2
   \   000194   45..         ORL     A,?V0 + 3
   \   000196   7003         JNZ     $+5
   \   000198   02....       LJMP    ??parse_object_1 & 0xFFFF
   1702              {
   1703                  cJSON_Delete(head);
   \   00019B                ; Setup parameters for call to function cJSON_Delete
   \   00019B   AA..         MOV     R2,?V0 + 2
   \   00019D   AB..         MOV     R3,?V0 + 3
   \   00019F   12....       LCALL   ??cJSON_Delete?relay
   \   0001A2   02....       LJMP    ??parse_object_1 & 0xFFFF
   1704              }
   1705          
   1706              return false;
   1707          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000007                ; Setup parameters for call to function buffer_skip_whitespace
   \   000007                ; Setup parameters for call to function buffer_skip_whitespace
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   12....       LCALL   ??buffer_skip_whitespace?relay
   \   00000E                ; Setup parameters for call to function parse_string
   \   00000E                ; Setup parameters for call to function parse_value
   \   00000E   EE           MOV     A,R6
   \   00000F   FC           MOV     R4,A
   \   000010   EF           MOV     A,R7
   \   000011   FD           MOV     R5,A
   \   000012   AA..         MOV     R2,?V0 + 0
   \   000014   AB..         MOV     R3,?V0 + 1
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   12....       LCALL   ?Subroutine142 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004                REQUIRE ??Subroutine205_0
   \   000004                ; // Fall through to label ??Subroutine205_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine205_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine206_0
   \   000002                ; // Fall through to label ??Subroutine206_0
   1708          
   1709          /* Render an object to text. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1710          static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
   \                     print_object:
   1711          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine39 & 0xFFFF
   1712              unsigned char *output_pointer = NULL;
   1713              size_t length = 0;
   1714              cJSON *current_item = item->child;
   1715          
   1716              if (output_buffer == NULL)
   \                     ??CrossCallReturnLabel_331:
   \   000008   7005         JNZ     ??print_object_0
   1717              {
   1718                  return false;
   \                     ??print_object_1:
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   02....       LJMP    ??CrossCallReturnLabel_87 & 0xFFFF
   1719              }
   1720          
   1721              /* Compose the output: */
   1722              length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
   \                     ??print_object_0:
   \   00000F   12....       LCALL   ??Subroutine196_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_487:
   \   000012   6005         JZ      ??print_object_2
   \   000014   75..02       MOV     ?V0 + 2,#0x2
   \   000017   8003         SJMP    ??print_object_3
   \                     ??print_object_2:
   \   000019   75..01       MOV     ?V0 + 2,#0x1
   1723              output_pointer = ensure(output_buffer, length + 1);
   \                     ??print_object_3:
   \   00001C                ; Setup parameters for call to function ensure
   \   00001C   12....       LCALL   ?Subroutine83 & 0xFFFF
   1724              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_326:
   \   00001F   60E9         JZ      ??print_object_1
   1725              {
   1726                  return false;
   1727              }
   1728          
   1729              *output_pointer++ = '{';
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   747B         MOV     A,#0x7b
   \   000027   12....       LCALL   ?Subroutine105 & 0xFFFF
   1730              output_buffer->depth++;
   \                     ??CrossCallReturnLabel_164:
   \   00002A   12....       LCALL   ?Subroutine55 & 0xFFFF
   1731              if (output_buffer->format)
   \                     ??CrossCallReturnLabel_239:
   \   00002D   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   000030   6007         JZ      ??print_object_4
   1732              {
   1733                  *output_pointer++ = '\n';
   \   000032   8882         MOV     DPL,R0
   \   000034   8983         MOV     DPH,R1
   \   000036   740A         MOV     A,#0xa
   \   000038   F0           MOVX    @DPTR,A
   1734              }
   1735              output_buffer->offset += length;
   \                     ??print_object_4:
   \   000039   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00003C   804B         SJMP    ??CrossCallReturnLabel_513
   1736          
   1737              while (current_item)
   1738              {
   1739                  if (output_buffer->format)
   1740                  {
   1741                      size_t i;
   1742                      output_pointer = ensure(output_buffer, output_buffer->depth);
   1743                      if (output_pointer == NULL)
   1744                      {
   1745                          return false;
   1746                      }
   1747                      for (i = 0; i < output_buffer->depth; i++)
   1748                      {
   1749                          *output_pointer++ = '\t';
   1750                      }
   1751                      output_buffer->offset += output_buffer->depth;
   1752                  }
   1753          
   1754                  /* print key */
   1755                  if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
   1756                  {
   1757                      return false;
   1758                  }
   1759                  update_offset(output_buffer);
   1760          
   1761                  length = (size_t) (output_buffer->format ? 2 : 1);
   1762                  output_pointer = ensure(output_buffer, length);
   1763                  if (output_pointer == NULL)
   1764                  {
   1765                      return false;
   1766                  }
   1767                  *output_pointer++ = ':';
   1768                  if (output_buffer->format)
   1769                  {
   1770                      *output_pointer++ = '\t';
   1771                  }
   1772                  output_buffer->offset += length;
   1773          
   1774                  /* print value */
   1775                  if (!print_value(current_item, output_buffer))
   1776                  {
   1777                      return false;
   1778                  }
   1779                  update_offset(output_buffer);
   \                     ??print_object_5:
   \   00003E   7800         MOV     R0,#0x0
   \                     ??print_object_6:
   \   000040   EA           MOV     A,R2
   \   000041   28           ADD     A,R0
   \   000042   F5..         MOV     ?V0 + 2,A
   \   000044   E4           CLR     A
   \   000045   3400         ADDC    A,#0x0
   \   000047   F5..         MOV     ?V0 + 3,A
   1780          
   1781                  /* print comma if not last */
   1782                  length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
   1783                  output_pointer = ensure(output_buffer, length + 1);
   \   000049                ; Setup parameters for call to function ensure
   \   000049   E5..         MOV     A,?V0 + 2
   \   00004B   2401         ADD     A,#0x1
   \   00004D   FC           MOV     R4,A
   \   00004E   E5..         MOV     A,?V0 + 3
   \   000050   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   1784                  if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_327:
   \   000053   60B5         JZ      ??print_object_1
   1785                  {
   1786                      return false;
   1787                  }
   1788                  if (current_item->next)
   \   000055   85..82       MOV     DPL,?V0 + 0
   \   000058   85..83       MOV     DPH,?V0 + 1
   \   00005B   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_372:
   \   00005E   6009         JZ      ??CrossCallReturnLabel_165
   1789                  {
   1790                      *output_pointer++ = ',';
   \   000060   8882         MOV     DPL,R0
   \   000062   8983         MOV     DPH,R1
   \   000064   742C         MOV     A,#0x2c
   \   000066   12....       LCALL   ?Subroutine105 & 0xFFFF
   1791                  }
   1792          
   1793                  if (output_buffer->format)
   \                     ??CrossCallReturnLabel_165:
   \   000069   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   00006C   6009         JZ      ??CrossCallReturnLabel_166
   1794                  {
   1795                      *output_pointer++ = '\n';
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   740A         MOV     A,#0xa
   \   000074   12....       LCALL   ?Subroutine105 & 0xFFFF
   1796                  }
   1797                  *output_pointer = '\0';
   \                     ??CrossCallReturnLabel_166:
   \   000077   8882         MOV     DPL,R0
   \   000079   8983         MOV     DPH,R1
   \   00007B   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   1798                  output_buffer->offset += length;
   \                     ??CrossCallReturnLabel_341:
   \   00007E   25..         ADD     A,?V0 + 2
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   E0           MOVX    A,@DPTR
   \   000083   35..         ADDC    A,?V0 + 3
   \   000085   F0           MOVX    @DPTR,A
   1799          
   1800                  current_item = current_item->next;
   \   000086   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_513:
   \   000089   E5..         MOV     A,?V0 + 0
   \   00008B   45..         ORL     A,?V0 + 1
   \   00008D   8E82         MOV     DPL,R6
   \   00008F   8F83         MOV     DPH,R7
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   7003         JNZ     $+5
   \   00009D   02....       LJMP    ??print_object_7 & 0xFFFF
   \   0000A0   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   0000A3   6039         JZ      ??print_object_8
   \   0000A5                ; Setup parameters for call to function ensure
   \   0000A5   8E82         MOV     DPL,R6
   \   0000A7   8F83         MOV     DPH,R7
   \   0000A9   A3           INC     DPTR
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   12....       LCALL   ??Subroutine229_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_652:
   \   0000B2   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   0000B5   7003         JNZ     $+5
   \   0000B7   02....       LJMP    ??print_object_1 & 0xFFFF
   \   0000BA   7C00         MOV     R4,#0x0
   \   0000BC   7D00         MOV     R5,#0x0
   \   0000BE   8003         SJMP    ??CrossCallReturnLabel_365
   \                     ??print_object_9:
   \   0000C0   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   0000C3   8E82         MOV     DPL,R6
   \   0000C5   8F83         MOV     DPH,R7
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   0000CE   40F0         JC      ??print_object_9
   \   0000D0   8E82         MOV     DPL,R6
   \   0000D2   8F83         MOV     DPH,R7
   \   0000D4   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   28           ADD     A,R0
   \   0000D9   F0           MOVX    @DPTR,A
   \   0000DA   A3           INC     DPTR
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   39           ADDC    A,R1
   \   0000DD   F0           MOVX    @DPTR,A
   \                     ??print_object_8:
   \   0000DE                ; Setup parameters for call to function print_string_ptr
   \   0000DE   EE           MOV     A,R6
   \   0000DF   FC           MOV     R4,A
   \   0000E0   EF           MOV     A,R7
   \   0000E1   FD           MOV     R5,A
   \   0000E2   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_352:
   \   0000E5   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   0000E8   8B..         MOV     ?V0 + 3,R3
   \   0000EA   EA           MOV     A,R2
   \   0000EB   45..         ORL     A,?V0 + 3
   \   0000ED   7003         JNZ     $+5
   \   0000EF   02....       LJMP    ??print_object_1 & 0xFFFF
   \   0000F2                ; Setup parameters for call to function update_offset
   \   0000F2   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   0000F5   6005         JZ      ??print_object_10
   \   0000F7   75..02       MOV     ?V0 + 2,#0x2
   \   0000FA   8003         SJMP    ??print_object_11
   \                     ??print_object_10:
   \   0000FC   75..01       MOV     ?V0 + 2,#0x1
   \                     ??print_object_11:
   \   0000FF   75..00       MOV     ?V0 + 3,#0x0
   \   000102                ; Setup parameters for call to function ensure
   \   000102   AC..         MOV     R4,?V0 + 2
   \   000104   AD..         MOV     R5,?V0 + 3
   \   000106   12....       LCALL   ?Subroutine145 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000109   7003         JNZ     $+5
   \   00010B   02....       LJMP    ??print_object_1 & 0xFFFF
   \   00010E   8882         MOV     DPL,R0
   \   000110   8983         MOV     DPH,R1
   \   000112   743A         MOV     A,#0x3a
   \   000114   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000117   6007         JZ      ??print_object_12
   \   000119   8882         MOV     DPL,R0
   \   00011B   8983         MOV     DPH,R1
   \   00011D   7409         MOV     A,#0x9
   \   00011F   F0           MOVX    @DPTR,A
   \                     ??print_object_12:
   \   000120   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000123                ; Setup parameters for call to function print_value
   \   000123   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000126   7003         JNZ     $+5
   \   000128   02....       LJMP    ??print_object_1 & 0xFFFF
   \   00012B                ; Setup parameters for call to function update_offset
   \   00012B   12....       LCALL   ?Subroutine14 & 0xFFFF
   1801              }
   \                     ??CrossCallReturnLabel_440:
   \   00012E   6004         JZ      ??print_object_13
   \   000130   7A01         MOV     R2,#0x1
   \   000132   8002         SJMP    ??print_object_14
   \                     ??print_object_13:
   \   000134   7A00         MOV     R2,#0x0
   \                     ??print_object_14:
   \   000136   85..82       MOV     DPL,?V0 + 0
   \   000139   85..83       MOV     DPH,?V0 + 1
   \   00013C   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   00013F   7003         JNZ     $+5
   \   000141   02....       LJMP    ??print_object_5 & 0xFFFF
   \   000144   7801         MOV     R0,#0x1
   \   000146   02....       LJMP    ??print_object_6 & 0xFFFF
   1802          
   1803              output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
   \                     ??print_object_7:
   \   000149   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   00014C   600F         JZ      ??print_object_15
   \   00014E   8E82         MOV     DPL,R6
   \   000150   8F83         MOV     DPH,R7
   \   000152   A3           INC     DPTR
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   A3           INC     DPTR
   \   000158   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00015B   8004         SJMP    ??print_object_16
   \                     ??print_object_15:
   \   00015D   7C02         MOV     R4,#0x2
   \   00015F   7D00         MOV     R5,#0x0
   \                     ??print_object_16:
   \   000161                ; Setup parameters for call to function ensure
   \   000161   12....       LCALL   ?Subroutine112 & 0xFFFF
   1804              if (output_pointer == NULL)
   \                     ??CrossCallReturnLabel_178:
   \   000164   7003         JNZ     $+5
   \   000166   02....       LJMP    ??print_object_1 & 0xFFFF
   1805              {
   1806                  return false;
   1807              }
   1808              if (output_buffer->format)
   \   000169   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   00016C   6023         JZ      ??print_object_17
   1809              {
   1810                  size_t i;
   1811                  for (i = 0; i < (output_buffer->depth - 1); i++)
   \   00016E   7C00         MOV     R4,#0x0
   \   000170   7D00         MOV     R5,#0x0
   \   000172   8003         SJMP    ??CrossCallReturnLabel_366
   1812                  {
   1813                      *output_pointer++ = '\t';
   \                     ??print_object_18:
   \   000174   12....       LCALL   ?Subroutine89 & 0xFFFF
   1814                  }
   \                     ??CrossCallReturnLabel_366:
   \   000177   8E82         MOV     DPL,R6
   \   000179   8F83         MOV     DPH,R7
   \   00017B   A3           INC     DPTR
   \   00017C   A3           INC     DPTR
   \   00017D   A3           INC     DPTR
   \   00017E   A3           INC     DPTR
   \   00017F   A3           INC     DPTR
   \   000180   A3           INC     DPTR
   \   000181   E0           MOVX    A,@DPTR
   \   000182   24FF         ADD     A,#-0x1
   \   000184   FA           MOV     R2,A
   \   000185   A3           INC     DPTR
   \   000186   E0           MOVX    A,@DPTR
   \   000187   34FF         ADDC    A,#-0x1
   \   000189   FB           MOV     R3,A
   \   00018A   C3           CLR     C
   \   00018B   EC           MOV     A,R4
   \   00018C   9A           SUBB    A,R2
   \   00018D   ED           MOV     A,R5
   \   00018E   9B           SUBB    A,R3
   \   00018F   40E3         JC      ??print_object_18
   1815              }
   1816              *output_pointer++ = '}';
   \                     ??print_object_17:
   \   000191   8882         MOV     DPL,R0
   \   000193   8983         MOV     DPH,R1
   \   000195   747D         MOV     A,#0x7d
   \   000197   12....       LCALL   ?Subroutine57 & 0xFFFF
   1817              *output_pointer = '\0';
   1818              output_buffer->depth--;
   1819          
   1820              return true;
   \                     ??CrossCallReturnLabel_87:
   \   00019A   02....       LJMP    ?Subroutine4 & 0xFFFF
   1821          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_639:
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007                REQUIRE ??Subroutine178_0
   \   000007                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   7409         MOV     A,#0x9
   \   000006   12....       LCALL   ?Subroutine141 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000009                REQUIRE ??Subroutine180_0
   \   000009                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004   12....       LCALL   ??update_offset?relay
   \   000007                REQUIRE ??Subroutine196_0
   \   000007                ; // Fall through to label ??Subroutine196_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_632:
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine229_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   1822          
   1823          /* Get Array size/item / object item. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array)
   \                     cJSON_GetArraySize:
   1825          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1826              cJSON *child = NULL;
   1827              size_t size = 0;
   \   000004   7C00         MOV     R4,#0x0
   \   000006   7D00         MOV     R5,#0x0
   1828          
   1829              if (array == NULL)
   \   000008   EA           MOV     A,R2
   \   000009   4B           ORL     A,R3
   \   00000A   7006         JNZ     ??cJSON_GetArraySize_0
   1830              {
   1831                  return 0;
   \   00000C   7A00         MOV     R2,#0x0
   \   00000E   7B00         MOV     R3,#0x0
   \   000010   801E         SJMP    ??cJSON_GetArraySize_1
   1832              }
   1833          
   1834              child = array->child;
   \                     ??cJSON_GetArraySize_0:
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   8003         SJMP    ??CrossCallReturnLabel_368
   1835          
   1836              while(child != NULL)
   1837              {
   1838                  size++;
   \                     ??cJSON_GetArraySize_2:
   \   00001C   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   1839                  child = child->next;
   1840              }
   \                     ??CrossCallReturnLabel_368:
   \   00001F   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_612:
   \   000022   8882         MOV     DPL,R0
   \   000024   8983         MOV     DPH,R1
   \   000026   E582         MOV     A,DPL
   \   000028   4583         ORL     A,DPH
   \   00002A   70F0         JNZ     ??cJSON_GetArraySize_2
   1841          
   1842              /* FIXME: Can overflow here. Cannot be fixed without breaking the API */
   1843          
   1844              return (int)size;
   \   00002C   EC           MOV     A,R4
   \   00002D   FA           MOV     R2,A
   \   00002E   ED           MOV     A,R5
   \   00002F   FB           MOV     R3,A
   \                     ??cJSON_GetArraySize_1:
   \   000030   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   1845          }
   1846          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1847          static cJSON* get_array_item(const cJSON *array, size_t index)
   \                     get_array_item:
   1848          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1849              cJSON *current_child = NULL;
   1850          
   1851              if (array == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7006         JNZ     ??get_array_item_0
   1852              {
   1853                  return NULL;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   7B00         MOV     R3,#0x0
   \   00000C   801F         SJMP    ??get_array_item_1
   1854              }
   1855          
   1856              current_child = array->child;
   \                     ??get_array_item_0:
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   800C         SJMP    ??get_array_item_2
   1857              while ((current_child != NULL) && (index > 0))
   1858              {
   1859                  index--;
   \                     ??get_array_item_3:
   \   000018   EC           MOV     A,R4
   \   000019   24FF         ADD     A,#-0x1
   \   00001B   1C           DEC     R4
   \   00001C   ED           MOV     A,R5
   \   00001D   34FF         ADDC    A,#-0x1
   \   00001F   FD           MOV     R5,A
   1860                  current_child = current_child->next;
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
   1861              }
   \                     ??get_array_item_2:
   \   000024   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000027   6004         JZ      ??get_array_item_1
   \   000029   EC           MOV     A,R4
   \   00002A   4D           ORL     A,R5
   \   00002B   70EB         JNZ     ??get_array_item_3
   1862          
   1863              return current_child;
   \                     ??get_array_item_1:
   \   00002D   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   1864          }
   1865          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1866          CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index)
   \                     cJSON_GetArrayItem:
   1867          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1868              if (index < 0)
   \   000004   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_495:
   \   000007   5006         JNC     ??cJSON_GetArrayItem_0
   1869              {
   1870                  return NULL;
   \   000009   7A00         MOV     R2,#0x0
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   8003         SJMP    ??cJSON_GetArrayItem_1
   1871              }
   1872          
   1873              return get_array_item(array, (size_t)index);
   \                     ??cJSON_GetArrayItem_0:
   \   00000F                ; Setup parameters for call to function get_array_item
   \   00000F   12....       LCALL   ??get_array_item?relay
   \                     ??cJSON_GetArrayItem_1:
   \   000012   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   1874          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine202_0:
   \   000000   C3           CLR     C
   \   000001   ED           MOV     A,R5
   \   000002                REQUIRE ??Subroutine203_0
   \   000002                ; // Fall through to label ??Subroutine203_0
   1875          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1876          static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
   \                     get_object_item:
   1877          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   1878              cJSON *current_element = NULL;
   1879          
   1880              if ((object == NULL) || (name == NULL))
   \                     ??CrossCallReturnLabel_613:
   \   000011   EA           MOV     A,R2
   \   000012   4B           ORL     A,R3
   \   000013   6004         JZ      ??get_object_item_0
   \   000015   EE           MOV     A,R6
   \   000016   4F           ORL     A,R7
   \   000017   7006         JNZ     ??get_object_item_1
   1881              {
   1882                  return NULL;
   \                     ??get_object_item_0:
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   8051         SJMP    ??get_object_item_2
   1883              }
   1884          
   1885              current_element = object->child;
   \                     ??get_object_item_1:
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   1886              if (case_sensitive)
   \                     ??CrossCallReturnLabel_508:
   \   00002A   E8           MOV     A,R0
   \   00002B   49           ORL     A,R1
   \   00002C   6023         JZ      ??CrossCallReturnLabel_515
   1887              {
   1888                  while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
   \                     ??get_object_item_3:
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   45..         ORL     A,?V0 + 1
   \   000032   60E5         JZ      ??get_object_item_0
   \   000034   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000037   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   00003A   6028         JZ      ??get_object_item_4
   \   00003C                ; Setup parameters for call to function strcmp
   \   00003C   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_654:
   \   00003F   12....       LCALL   ??strcmp?relay
   \   000042   8B..         MOV     ?V0 + 3,R3
   \   000044   EA           MOV     A,R2
   \   000045   45..         ORL     A,?V0 + 3
   \   000047   601B         JZ      ??get_object_item_4
   1889                  {
   1890                      current_element = current_element->next;
   \   000049   12....       LCALL   ?Subroutine60 & 0xFFFF
   1891                  }
   1892              }
   \                     ??CrossCallReturnLabel_514:
   \   00004C   80E0         SJMP    ??get_object_item_3
   1893              else
   1894              {
   1895                  while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
   1896                  {
   1897                      current_element = current_element->next;
   \                     ??get_object_item_5:
   \   00004E   12....       LCALL   ?Subroutine60 & 0xFFFF
   1898                  }
   \                     ??CrossCallReturnLabel_515:
   \   000051   E5..         MOV     A,?V0 + 0
   \   000053   45..         ORL     A,?V0 + 1
   \   000055   60C2         JZ      ??get_object_item_0
   \   000057                ; Setup parameters for call to function case_insensitive_strcmp
   \   000057   12....       LCALL   ?Subroutine31 & 0xFFFF
   1899              }
   \                     ??CrossCallReturnLabel_655:
   \   00005A   12....       LCALL   ??case_insensitive_strcmp?relay
   \   00005D   8B..         MOV     ?V0 + 3,R3
   \   00005F   EA           MOV     A,R2
   \   000060   45..         ORL     A,?V0 + 3
   \   000062   70EA         JNZ     ??get_object_item_5
   \                     ??get_object_item_4:
   \   000064   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000067   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   00006A   60AD         JZ      ??get_object_item_0
   1900          
   1901              if ((current_element == NULL) || (current_element->string == NULL)) {
   1902                  return NULL;
   1903              }
   1904          
   1905              return current_element;
   \   00006C   AA..         MOV     R2,?V0 + 0
   \   00006E   AB..         MOV     R3,?V0 + 1
   \                     ??get_object_item_2:
   \   000070   80..         SJMP    ??Subroutine182_0
   1906          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_638:
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007                REQUIRE ??Subroutine228_0
   \   000007                ; // Fall through to label ??Subroutine228_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine228_0:
   \   000000   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_651:
   \   000003                REQUIRE ??Subroutine229_0
   \   000003                ; // Fall through to label ??Subroutine229_0
   1907          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   12....       LCALL   ??get_object_item?relay
   \   000008                REQUIRE ??Subroutine158_0
   \   000008                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1908          CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
   \                     cJSON_GetObjectItem:
   1909          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1910              return get_object_item(object, string, false);
   \   000005                ; Setup parameters for call to function get_object_item
   \   000005   E4           CLR     A
   \   000006   F5..         MOV     ?V0 + 0,A
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   02....       LJMP    ?Subroutine1 & 0xFFFF
   1911          }
   1912          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1913          CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string)
   \                     cJSON_GetObjectItemCaseSensitive:
   1914          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1915              return get_object_item(object, string, true);
   \   000005                ; Setup parameters for call to function get_object_item
   \   000005   75..01       MOV     ?V0 + 0,#0x1
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   \   00000B   02....       LJMP    ?Subroutine1 & 0xFFFF
   1916          }
   1917          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1918          CJSON_PUBLIC(cJSON_bool) cJSON_HasObjectItem(const cJSON *object, const char *string)
   \                     cJSON_HasObjectItem:
   1919          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1920              return cJSON_GetObjectItem(object, string) ? 1 : 0;
   \   000005                ; Setup parameters for call to function cJSON_GetObjectItem
   \   000005   12....       LCALL   ??cJSON_GetObjectItem?relay
   \   000008   8B..         MOV     ?V0 + 1,R3
   \   00000A   EA           MOV     A,R2
   \   00000B   45..         ORL     A,?V0 + 1
   \   00000D   6004         JZ      ??cJSON_HasObjectItem_0
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   8002         SJMP    ??cJSON_HasObjectItem_1
   \                     ??cJSON_HasObjectItem_0:
   \   000013   7A00         MOV     R2,#0x0
   \                     ??cJSON_HasObjectItem_1:
   \   000015                REQUIRE ?Subroutine10
   \   000015                ; // Fall through to label ?Subroutine10
   1921          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   1922          
   1923          /* Utility for array list handling. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1924          static void suffix_object(cJSON *prev, cJSON *item)
   \                     suffix_object:
   1925          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1926              prev->next = item;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   EC           MOV     A,R4
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   ED           MOV     A,R5
   \   00000C   F0           MOVX    @DPTR,A
   1927              item->prev = prev;
   \   00000D   8C82         MOV     DPL,R4
   \   00000F   8D83         MOV     DPH,R5
   \   000011   12....       LCALL   ??Subroutine218_0 & 0xFFFF
   1928          }
   \                     ??CrossCallReturnLabel_578:
   \   000014   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine218_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine219_0
   \   000002                ; // Fall through to label ??Subroutine219_0
   1929          
   1930          /* Utility for handling references. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1931          static cJSON *create_reference(const cJSON *item, const internal_hooks * const hooks)
   \                     create_reference:
   1932          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   1933              cJSON *reference = NULL;
   1934              if (item == NULL)
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   45..         ORL     A,?V0 + 1
   \   000011   7006         JNZ     ??create_reference_0
   1935              {
   1936                  return NULL;
   \                     ??create_reference_1:
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   803B         SJMP    ??create_reference_2
   1937              }
   1938          
   1939              reference = cJSON_New_Item(hooks);
   \                     ??create_reference_0:
   \   000019                ; Setup parameters for call to function cJSON_New_Item
   \   000019   12....       LCALL   ??Subroutine213_0 & 0xFFFF
   1940              if (reference == NULL)
   \                     ??CrossCallReturnLabel_555:
   \   00001C   60F5         JZ      ??create_reference_1
   1941              {
   1942                  return NULL;
   1943              }
   1944          
   1945              memcpy(reference, item, sizeof(cJSON));
   \   00001E                ; Setup parameters for call to function memcpy
   \   00001E   75..12       MOV     ?V0 + 2,#0x12
   \   000021   75..00       MOV     ?V0 + 3,#0x0
   \   000024   78..         MOV     R0,#?V0 + 2
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   AC..         MOV     R4,?V0 + 0
   \   00002B   AD..         MOV     R5,?V0 + 1
   \   00002D   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000030   12....       LCALL   ?DEALLOC_XSTACK8
   1946              reference->string = NULL;
   \   000033   12....       LCALL   ?Subroutine144 & 0xFFFF
   \                     ??CrossCallReturnLabel_643:
   \   000036   EF           MOV     A,R7
   \   000037   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   00003A   12....       LCALL   ?Subroutine99 & 0xFFFF
   1947              reference->type |= cJSON_IsReference;
   \                     ??CrossCallReturnLabel_155:
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   4401         ORL     A,#0x1
   \   000043   12....       LCALL   ?Subroutine106 & 0xFFFF
   1948              reference->next = reference->prev = NULL;
   \                     ??CrossCallReturnLabel_167:
   \   000046   A3           INC     DPTR
   \   000047   E4           CLR     A
   \   000048   F0           MOVX    @DPTR,A
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
   \   00004F   F0           MOVX    @DPTR,A
   1949              return reference;
   \   000050   EE           MOV     A,R6
   \   000051   FA           MOV     R2,A
   \   000052   EF           MOV     A,R7
   \   000053   FB           MOV     R3,A
   \                     ??create_reference_2:
   \   000054   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   1950          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine213_0:
   \   000000   12....       LCALL   ??cJSON_New_Item?relay
   \   000003   8A..         MOV     ?V0 + 2,R2
   \   000005   8B..         MOV     ?V0 + 3,R3
   \   000007   AE..         MOV     R6,?V0 + 2
   \   000009   AF..         MOV     R7,?V0 + 3
   \   00000B   EE           MOV     A,R6
   \   00000C   4F           ORL     A,R7
   \   00000D   22           RET
   1951          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1952          static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
   \                     add_item_to_array:
   1953          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   1954              cJSON *child = NULL;
   1955          
   1956              if ((item == NULL) || (array == NULL) || (array == item))
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   600F         JZ      ??add_item_to_array_0
   \   000011   EA           MOV     A,R2
   \   000012   45..         ORL     A,?V0 + 1
   \   000014   600A         JZ      ??add_item_to_array_0
   \   000016   EE           MOV     A,R6
   \   000017   65..         XRL     A,?V0 + 0
   \   000019   7003         JNZ     ??add_item_to_array_1
   \   00001B   EF           MOV     A,R7
   \   00001C   65..         XRL     A,?V0 + 1
   \                     ??add_item_to_array_1:
   \   00001E   7004         JNZ     ??add_item_to_array_2
   1957              {
   1958                  return false;
   \                     ??add_item_to_array_0:
   \   000020   7A00         MOV     R2,#0x0
   \   000022   8046         SJMP    ??add_item_to_array_3
   1959              }
   1960          
   1961              child = array->child;
   \                     ??add_item_to_array_2:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   1962              /*
   1963               * To find the last item in array quickly, we use prev in array
   1964               */
   1965              if (child == NULL)
   \                     ??CrossCallReturnLabel_441:
   \   00002B   701C         JNZ     ??add_item_to_array_4
   1966              {
   1967                  /* list is empty, start new one */
   1968                  array->child = item;
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   EE           MOV     A,R6
   \   000036   F0           MOVX    @DPTR,A
   \   000037   A3           INC     DPTR
   \   000038   EF           MOV     A,R7
   \   000039   12....       LCALL   ?Subroutine106 & 0xFFFF
   1969                  item->prev = item;
   1970                  item->next = NULL;
   1971              }
   \                     ??CrossCallReturnLabel_168:
   \   00003C   A3           INC     DPTR
   \   00003D   EE           MOV     A,R6
   \   00003E   F0           MOVX    @DPTR,A
   \   00003F   A3           INC     DPTR
   \   000040   EF           MOV     A,R7
   \   000041   12....       LCALL   ?Subroutine143 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000044   E4           CLR     A
   \   000045   F0           MOVX    @DPTR,A
   \   000046   A3           INC     DPTR
   \   000047   801E         SJMP    ??add_item_to_array_5
   1972              else
   1973              {
   1974                  /* append to the end */
   1975                  if (child->prev)
   \                     ??add_item_to_array_4:
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000050   6016         JZ      ??add_item_to_array_6
   1976                  {
   1977                      suffix_object(child->prev, item);
   \   000052                ; Setup parameters for call to function suffix_object
   \   000052   12....       LCALL   ??suffix_object?relay
   1978                      array->child->prev = item;
   \   000055   85..82       MOV     DPL,?V0 + 0
   \   000058   85..83       MOV     DPH,?V0 + 1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   12....       LCALL   ?Subroutine68 & 0xFFFF
   1979                  }
   1980              }
   \                     ??CrossCallReturnLabel_103:
   \   000062   A3           INC     DPTR
   \   000063   EE           MOV     A,R6
   \   000064   F0           MOVX    @DPTR,A
   \   000065   A3           INC     DPTR
   \   000066   EF           MOV     A,R7
   \                     ??add_item_to_array_5:
   \   000067   F0           MOVX    @DPTR,A
   1981          
   1982              return true;
   \                     ??add_item_to_array_6:
   \   000068   7A01         MOV     R2,#0x1
   \                     ??add_item_to_array_3:
   \   00006A   02....       LJMP    ?Subroutine10 & 0xFFFF
   1983          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000003   A3           INC     DPTR
   \   000004   22           RET
   1984          
   1985          /* Add item to array/object. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1986          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item)
   \                     cJSON_AddItemToArray:
   1987          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1988              return add_item_to_array(array, item);
   \   000004                ; Setup parameters for call to function add_item_to_array
   \   000004   12....       LCALL   ??add_item_to_array?relay
   \   000007   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   1989          }
   1990          
   1991          #if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
   1992              #pragma GCC diagnostic push
   1993          #endif
   1994          #ifdef __GNUC__
   1995          #pragma GCC diagnostic ignored "-Wcast-qual"
   1996          #endif
   1997          /* helper function to cast away const */
   1998          static void* cast_away_const(const void* string)
   1999          {
   2000              return (void*)string;
   2001          }
   2002          #if defined(__clang__) || (defined(__GNUC__)  && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ > 5))))
   2003              #pragma GCC diagnostic pop
   2004          #endif
   2005          
   2006          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2007          static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
   \                     add_item_to_object:
   2008          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_509:
   \   000015   7412         MOV     A,#0x12
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 6,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 7,A
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine45 & 0xFFFF
   2009              char *new_key = NULL;
   2010              int new_type = cJSON_Invalid;
   2011          
   2012              if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
   \                     ??CrossCallReturnLabel_65:
   \   000029   4F           ORL     A,R7
   \   00002A   6014         JZ      ??add_item_to_object_0
   \   00002C   EA           MOV     A,R2
   \   00002D   4B           ORL     A,R3
   \   00002E   6010         JZ      ??add_item_to_object_0
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   45..         ORL     A,?V0 + 1
   \   000034   600A         JZ      ??add_item_to_object_0
   \   000036   E5..         MOV     A,?V0 + 0
   \   000038   6E           XRL     A,R6
   \   000039   7003         JNZ     ??add_item_to_object_1
   \   00003B   E5..         MOV     A,?V0 + 1
   \   00003D   6F           XRL     A,R7
   \                     ??add_item_to_object_1:
   \   00003E   7007         JNZ     ??add_item_to_object_2
   2013              {
   2014                  return false;
   \                     ??add_item_to_object_0:
   \   000040   7A00         MOV     R2,#0x0
   \   000042   7B00         MOV     R3,#0x0
   \   000044   02....       LJMP    ??add_item_to_object_3 & 0xFFFF
   2015              }
   2016          
   2017              if (constant_key)
   \                     ??add_item_to_object_2:
   \   000047   E8           MOV     A,R0
   \   000048   49           ORL     A,R1
   \   000049   6019         JZ      ??add_item_to_object_4
   2018              {
   2019                  new_key = (char*)cast_away_const(string);
   \   00004B   8A..         MOV     ?V0 + 2,R2
   \   00004D   8B..         MOV     ?V0 + 3,R3
   2020                  new_type = item->type | cJSON_StringIsConst;
   \   00004F   85..82       MOV     DPL,?V0 + 0
   \   000052   85..83       MOV     DPH,?V0 + 1
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F5..         MOV     ?V0 + 4,A
   \   00005E   A3           INC     DPTR
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   4402         ORL     A,#0x2
   \   000062   8023         SJMP    ??add_item_to_object_5
   2021              }
   2022              else
   2023              {
   2024                  new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
   \                     ??add_item_to_object_4:
   \   000064                ; Setup parameters for call to function cJSON_strdup
   \   000064   AC..         MOV     R4,?V0 + 6
   \   000066   AD..         MOV     R5,?V0 + 7
   \   000068   12....       LCALL   ??cJSON_strdup?relay
   \   00006B   8A..         MOV     ?V0 + 2,R2
   \   00006D   8B..         MOV     ?V0 + 3,R3
   2025                  if (new_key == NULL)
   \   00006F   EA           MOV     A,R2
   \   000070   45..         ORL     A,?V0 + 3
   \   000072   60CC         JZ      ??add_item_to_object_0
   2026                  {
   2027                      return false;
   2028                  }
   2029          
   2030                  new_type = item->type & ~cJSON_StringIsConst;
   \   000074   85..82       MOV     DPL,?V0 + 0
   \   000077   85..83       MOV     DPH,?V0 + 1
   \   00007A   A3           INC     DPTR
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   E0           MOVX    A,@DPTR
   \   000081   F5..         MOV     ?V0 + 4,A
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   54FD         ANL     A,#0xfd
   \                     ??add_item_to_object_5:
   \   000087   F5..         MOV     ?V0 + 5,A
   2031              }
   2032          
   2033              if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
   \   000089   85..82       MOV     DPL,?V0 + 0
   \   00008C   85..83       MOV     DPH,?V0 + 1
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   E0           MOVX    A,@DPTR
   \   000097   5402         ANL     A,#0x2
   \   000099   701C         JNZ     ??add_item_to_object_6
   \   00009B   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   00009E   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   0000A1   6014         JZ      ??add_item_to_object_6
   2034              {
   2035                  hooks->deallocate(item->string);
   \   0000A3                ; Setup parameters for indirect call
   \   0000A3   12....       LCALL   ?Subroutine85 & 0xFFFF
   2036              }
   \                     ??CrossCallReturnLabel_356:
   \   0000A6   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   0000A9   85..82       MOV     DPL,?V0 + 6
   \   0000AC   85..83       MOV     DPH,?V0 + 7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   0000B4   12....       LCALL   ?CALL_IND
   2037          
   2038              item->string = new_key;
   \                     ??add_item_to_object_6:
   \   0000B7   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0000BA   E5..         MOV     A,?V0 + 2
   \   0000BC   F0           MOVX    @DPTR,A
   \   0000BD   A3           INC     DPTR
   \   0000BE   E5..         MOV     A,?V0 + 3
   \   0000C0   12....       LCALL   ?Subroutine92 & 0xFFFF
   2039              item->type = new_type;
   \                     ??CrossCallReturnLabel_149:
   \   0000C3   E5..         MOV     A,?V0 + 4
   \   0000C5   F0           MOVX    @DPTR,A
   \   0000C6   A3           INC     DPTR
   \   0000C7   E5..         MOV     A,?V0 + 5
   \   0000C9   F0           MOVX    @DPTR,A
   2040          
   2041              return add_item_to_array(object, item);
   \   0000CA                ; Setup parameters for call to function add_item_to_array
   \   0000CA   AC..         MOV     R4,?V0 + 0
   \   0000CC   AD..         MOV     R5,?V0 + 1
   \   0000CE   EE           MOV     A,R6
   \   0000CF   FA           MOV     R2,A
   \   0000D0   EF           MOV     A,R7
   \   0000D1   FB           MOV     R3,A
   \   0000D2   12....       LCALL   ??add_item_to_array?relay
   \                     ??add_item_to_object_3:
   \   0000D5   02....       LJMP    ??Subroutine151_0 & 0xFFFF
   2042          }
   2043          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   78..         MOV     R0,#?V0 + 2
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   75....       MOV     ?V0 + 2,#global_hooks & 0xff
   \   000008   75....       MOV     ?V0 + 3,#(global_hooks >> 8) & 0xff
   \   00000B   78..         MOV     R0,#?V0 + 2
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   12....       LCALL   ??Subroutine190_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   000018                REQUIRE ??Subroutine181_0
   \   000018                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2044          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item)
   \                     cJSON_AddItemToObject:
   2045          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine48 & 0xFFFF
   2046              return add_item_to_object(object, string, item, &global_hooks, false);
   \                     ??CrossCallReturnLabel_71:
   \   00000D   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine190_0:
   \   000000   12....       LCALL   ??add_item_to_object?relay
   \   000003   7406         MOV     A,#0x6
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_520:
   \   000003                ; Setup parameters for call to function add_item_to_object
   \   000003                ; Setup parameters for call to function replace_item_in_object
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008   22           RET
   2047          }
   2048          
   2049          /* Add an item to an object with constant string as key */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2050          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObjectCS(cJSON *object, const char *string, cJSON *item)
   \                     cJSON_AddItemToObjectCS:
   2051          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine44 & 0xFFFF
   2052              return add_item_to_object(object, string, item, &global_hooks, true);
   \                     ??CrossCallReturnLabel_63:
   \   00000D   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_519:
   \   000003                ; Setup parameters for call to function add_item_to_object
   \   000003                ; Setup parameters for call to function replace_item_in_object
   \   000003   75..01       MOV     ?V0 + 2,#0x1
   \   000006   75..00       MOV     ?V0 + 3,#0x0
   \   000009   22           RET
   2053          }
   2054          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2055          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)
   \                     cJSON_AddItemReferenceToArray:
   2056          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   2057              if (array == NULL)
   \   00000D   EE           MOV     A,R6
   \   00000E   4F           ORL     A,R7
   \   00000F   7006         JNZ     ??cJSON_AddItemReferenceToArray_0
   2058              {
   2059                  return false;
   \   000011   7A00         MOV     R2,#0x0
   \   000013   7B00         MOV     R3,#0x0
   \   000015   8012         SJMP    ??cJSON_AddItemReferenceToArray_1
   2060              }
   2061          
   2062              return add_item_to_array(array, create_reference(item, &global_hooks));
   \                     ??cJSON_AddItemReferenceToArray_0:
   \   000017                ; Setup parameters for call to function add_item_to_array
   \   000017                ; Setup parameters for call to function create_reference
   \   000017   7C..         MOV     R4,#global_hooks & 0xff
   \   000019   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   00001B   12....       LCALL   ??create_reference?relay
   \   00001E   EA           MOV     A,R2
   \   00001F   FC           MOV     R4,A
   \   000020   EB           MOV     A,R3
   \   000021   FD           MOV     R5,A
   \   000022   EE           MOV     A,R6
   \   000023   FA           MOV     R2,A
   \   000024   EF           MOV     A,R7
   \   000025   FB           MOV     R3,A
   \   000026   12....       LCALL   ??add_item_to_array?relay
   \                     ??cJSON_AddItemReferenceToArray_1:
   \   000029   80..         SJMP    ??Subroutine186_0
   2063          }
   2064          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2065          CJSON_PUBLIC(cJSON_bool) cJSON_AddItemReferenceToObject(cJSON *object, const char *string, cJSON *item)
   \                     cJSON_AddItemReferenceToObject:
   2066          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740C         MOV     A,#0xc
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2067              if ((object == NULL) || (string == NULL))
   \                     ??CrossCallReturnLabel_385:
   \   000015   EE           MOV     A,R6
   \   000016   4F           ORL     A,R7
   \   000017   6005         JZ      ??cJSON_AddItemReferenceToObject_0
   \   000019   EC           MOV     A,R4
   \   00001A   45..         ORL     A,?V0 + 1
   \   00001C   7006         JNZ     ??cJSON_AddItemReferenceToObject_1
   2068              {
   2069                  return false;
   \                     ??cJSON_AddItemReferenceToObject_0:
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7B00         MOV     R3,#0x0
   \   000022   802B         SJMP    ??cJSON_AddItemReferenceToObject_2
   2070              }
   2071          
   2072              return add_item_to_object(object, string, create_reference(item, &global_hooks), &global_hooks, false);
   \                     ??cJSON_AddItemReferenceToObject_1:
   \   000024                ; Setup parameters for call to function add_item_to_object
   \   000024   E4           CLR     A
   \   000025   F5..         MOV     ?V0 + 2,A
   \   000027   F5..         MOV     ?V0 + 3,A
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75....       MOV     ?V0 + 2,#global_hooks & 0xff
   \   000031   75....       MOV     ?V0 + 3,#(global_hooks >> 8) & 0xff
   \   000034   78..         MOV     R0,#?V0 + 2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039                ; Setup parameters for call to function create_reference
   \   000039   7C..         MOV     R4,#global_hooks & 0xff
   \   00003B   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   00003D   12....       LCALL   ??create_reference?relay
   \   000040   8A..         MOV     ?V0 + 2,R2
   \   000042   8B..         MOV     ?V0 + 3,R3
   \   000044   78..         MOV     R0,#?V0 + 2
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00004C   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??cJSON_AddItemReferenceToObject_2:
   \   00004F   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   2073          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   AC..         MOV     R4,?V0 + 0
   \   000002   AD..         MOV     R5,?V0 + 1
   \   000004   EE           MOV     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   EF           MOV     A,R7
   \   000007   FB           MOV     R3,A
   \   000008                REQUIRE ??Subroutine190_0
   \   000008                ; // Fall through to label ??Subroutine190_0
   2074          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2075          CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddNullToObject:
   2076          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2077              cJSON *null = cJSON_CreateNull();
   \   00000D                ; Setup parameters for call to function cJSON_CreateNull
   \   00000D   12....       LCALL   ??cJSON_CreateNull?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2078              if (add_item_to_object(object, name, null, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_405
   2079              {
   2080                  return null;
   2081              }
   2082          
   2083              cJSON_Delete(null);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2084              return NULL;
   \                     ??CrossCallReturnLabel_405:
   \   00003C   80..         SJMP    ??Subroutine189_0
   2085          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   8B..         MOV     ?V0 + 1,R3
   \   000002   EA           MOV     A,R2
   \   000003   45..         ORL     A,?V0 + 1
   \   000005   AA..         MOV     R2,?V0 + 2
   \   000007   AB..         MOV     R3,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine191_0:
   \   000000   12....       LCALL   ??cJSON_Delete?relay
   \   000003   7A00         MOV     R2,#0x0
   \   000005   7B00         MOV     R3,#0x0
   \   000007   22           RET
   2086          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2087          CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddTrueToObject:
   2088          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2089              cJSON *true_item = cJSON_CreateTrue();
   \   00000D                ; Setup parameters for call to function cJSON_CreateTrue
   \   00000D   12....       LCALL   ??cJSON_CreateTrue?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2090              if (add_item_to_object(object, name, true_item, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_406
   2091              {
   2092                  return true_item;
   2093              }
   2094          
   2095              cJSON_Delete(true_item);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2096              return NULL;
   \                     ??CrossCallReturnLabel_406:
   \   00003C   80..         SJMP    ??Subroutine189_0
   2097          }
   2098          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2099          CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddFalseToObject:
   2100          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2101              cJSON *false_item = cJSON_CreateFalse();
   \   00000D                ; Setup parameters for call to function cJSON_CreateFalse
   \   00000D   12....       LCALL   ??cJSON_CreateFalse?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2102              if (add_item_to_object(object, name, false_item, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_407
   2103              {
   2104                  return false_item;
   2105              }
   2106          
   2107              cJSON_Delete(false_item);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2108              return NULL;
   \                     ??CrossCallReturnLabel_407:
   \   00003C   80..         SJMP    ??Subroutine189_0
   2109          }
   2110          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2111          CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean)
   \                     cJSON_AddBoolToObject:
   2112          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2113              cJSON *bool_item = cJSON_CreateBool(boolean);
   \                     ??CrossCallReturnLabel_386:
   \   000015                ; Setup parameters for call to function cJSON_CreateBool
   \   000015   12....       LCALL   ??cJSON_CreateBool?relay
   \   000018   8A..         MOV     ?V0 + 2,R2
   \   00001A   8B..         MOV     ?V0 + 3,R3
   2114              if (add_item_to_object(object, name, bool_item, &global_hooks, false))
   \   00001C                ; Setup parameters for call to function add_item_to_object
   \   00001C   E4           CLR     A
   \   00001D   F5..         MOV     ?V0 + 4,A
   \   00001F   F5..         MOV     ?V0 + 5,A
   \   000021   78..         MOV     R0,#?V0 + 4
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000029   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   78..         MOV     R0,#?V0 + 2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00003F   7003         JNZ     ??CrossCallReturnLabel_408
   2115              {
   2116                  return bool_item;
   2117              }
   2118          
   2119              cJSON_Delete(bool_item);
   \   000041                ; Setup parameters for call to function cJSON_Delete
   \   000041   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2120              return NULL;
   \                     ??CrossCallReturnLabel_408:
   \   000044   02....       LJMP    ??Subroutine189_0 & 0xFFFF
   2121          }
   2122          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2123          CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number)
   \                     cJSON_AddNumberToObject:
   2124          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_X
   2125              cJSON *number_item = cJSON_CreateNumber(number);
   \   000017                ; Setup parameters for call to function cJSON_CreateNumber
   \   000017   AA..         MOV     R2,?V0 + 4
   \   000019   AB..         MOV     R3,?V0 + 5
   \   00001B   AC..         MOV     R4,?V0 + 6
   \   00001D   AD..         MOV     R5,?V0 + 7
   \   00001F   12....       LCALL   ??cJSON_CreateNumber?relay
   \   000022   8A..         MOV     ?V0 + 2,R2
   \   000024   8B..         MOV     ?V0 + 3,R3
   2126              if (add_item_to_object(object, name, number_item, &global_hooks, false))
   \   000026                ; Setup parameters for call to function add_item_to_object
   \   000026   E4           CLR     A
   \   000027   F5..         MOV     ?V0 + 4,A
   \   000029   F5..         MOV     ?V0 + 5,A
   \   00002B   78..         MOV     R0,#?V0 + 4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000033   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000036   78..         MOV     R0,#?V0 + 4
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000043   12....       LCALL   ?DEALLOC_XSTACK8
   \   000046   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000049   7003         JNZ     ??CrossCallReturnLabel_409
   2127              {
   2128                  return number_item;
   2129              }
   2130          
   2131              cJSON_Delete(number_item);
   \   00004B                ; Setup parameters for call to function cJSON_Delete
   \   00004B   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2132              return NULL;
   \                     ??CrossCallReturnLabel_409:
   \   00004E   02....       LJMP    ??Subroutine151_0 & 0xFFFF
   2133          }
   2134          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2135          CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
   \                     cJSON_AddStringToObject:
   2136          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine47 & 0xFFFF
   2137              cJSON *string_item = cJSON_CreateString(string);
   2138              if (add_item_to_object(object, name, string_item, &global_hooks, false))
   \                     ??CrossCallReturnLabel_69:
   \   000015                ; Setup parameters for call to function add_item_to_object
   \   000015   E4           CLR     A
   \   000016   F5..         MOV     ?V0 + 4,A
   \   000018   F5..         MOV     ?V0 + 5,A
   \   00001A   78..         MOV     R0,#?V0 + 4
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000022   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000025   78..         MOV     R0,#?V0 + 4
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   78..         MOV     R0,#?V0 + 2
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   000032   12....       LCALL   ?DEALLOC_XSTACK8
   \   000035   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000038   7003         JNZ     ??CrossCallReturnLabel_410
   2139              {
   2140                  return string_item;
   2141              }
   2142          
   2143              cJSON_Delete(string_item);
   \   00003A                ; Setup parameters for call to function cJSON_Delete
   \   00003A   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2144              return NULL;
   \                     ??CrossCallReturnLabel_410:
   \   00003D   02....       LJMP    ??Subroutine189_0 & 0xFFFF
   2145          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_534:
   \   000003                ; Setup parameters for call to function cJSON_CreateString
   \   000003   12....       LCALL   ??cJSON_CreateString?relay
   \   000006   8A..         MOV     ?V0 + 2,R2
   \   000008   8B..         MOV     ?V0 + 3,R3
   \   00000A   22           RET
   2146          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2147          CJSON_PUBLIC(cJSON*) cJSON_AddRawToObject(cJSON * const object, const char * const name, const char * const raw)
   \                     cJSON_AddRawToObject:
   2148          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ??Subroutine188_0 & 0xFFFF
   2149              cJSON *raw_item = cJSON_CreateRaw(raw);
   \                     ??CrossCallReturnLabel_387:
   \   000015                ; Setup parameters for call to function cJSON_CreateRaw
   \   000015   12....       LCALL   ??cJSON_CreateRaw?relay
   \   000018   8A..         MOV     ?V0 + 2,R2
   \   00001A   8B..         MOV     ?V0 + 3,R3
   2150              if (add_item_to_object(object, name, raw_item, &global_hooks, false))
   \   00001C                ; Setup parameters for call to function add_item_to_object
   \   00001C   E4           CLR     A
   \   00001D   F5..         MOV     ?V0 + 4,A
   \   00001F   F5..         MOV     ?V0 + 5,A
   \   000021   78..         MOV     R0,#?V0 + 4
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000029   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   78..         MOV     R0,#?V0 + 2
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000039   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003C   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   00003F   7003         JNZ     ??CrossCallReturnLabel_411
   2151              {
   2152                  return raw_item;
   2153              }
   2154          
   2155              cJSON_Delete(raw_item);
   \   000041                ; Setup parameters for call to function cJSON_Delete
   \   000041   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2156              return NULL;
   \                     ??CrossCallReturnLabel_411:
   \   000044   02....       LJMP    ??Subroutine189_0 & 0xFFFF
   2157          }
   2158          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2159          CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddObjectToObject:
   2160          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2161              cJSON *object_item = cJSON_CreateObject();
   \   00000D                ; Setup parameters for call to function cJSON_CreateObject
   \   00000D   12....       LCALL   ??cJSON_CreateObject?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2162              if (add_item_to_object(object, name, object_item, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_412
   2163              {
   2164                  return object_item;
   2165              }
   2166          
   2167              cJSON_Delete(object_item);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2168              return NULL;
   \                     ??CrossCallReturnLabel_412:
   \   00003C   02....       LJMP    ??Subroutine189_0 & 0xFFFF
   2169          }
   2170          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2171          CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name)
   \                     cJSON_AddArrayToObject:
   2172          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   2173              cJSON *array = cJSON_CreateArray();
   \   00000D                ; Setup parameters for call to function cJSON_CreateArray
   \   00000D   12....       LCALL   ??cJSON_CreateArray?relay
   \   000010   8A..         MOV     ?V0 + 2,R2
   \   000012   8B..         MOV     ?V0 + 3,R3
   2174              if (add_item_to_object(object, name, array, &global_hooks, false))
   \   000014                ; Setup parameters for call to function add_item_to_object
   \   000014   E4           CLR     A
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   F5..         MOV     ?V0 + 5,A
   \   000019   78..         MOV     R0,#?V0 + 4
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E   75....       MOV     ?V0 + 4,#global_hooks & 0xff
   \   000021   75....       MOV     ?V0 + 5,#(global_hooks >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0 + 4
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   78..         MOV     R0,#?V0 + 2
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   000031   12....       LCALL   ?DEALLOC_XSTACK8
   \   000034   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000037   7003         JNZ     ??CrossCallReturnLabel_413
   2175              {
   2176                  return array;
   2177              }
   2178          
   2179              cJSON_Delete(array);
   \   000039                ; Setup parameters for call to function cJSON_Delete
   \   000039   12....       LCALL   ??Subroutine191_0 & 0xFFFF
   2180              return NULL;
   \                     ??CrossCallReturnLabel_413:
   \   00003C   02....       LJMP    ??Subroutine189_0 & 0xFFFF
   2181          }
   2182          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2183          CJSON_PUBLIC(cJSON *) cJSON_DetachItemViaPointer(cJSON *parent, cJSON * const item)
   \                     cJSON_DetachItemViaPointer:
   2184          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2185              if ((parent == NULL) || (item == NULL))
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6004         JZ      ??cJSON_DetachItemViaPointer_0
   \   000009   EC           MOV     A,R4
   \   00000A   4D           ORL     A,R5
   \   00000B   7007         JNZ     ??cJSON_DetachItemViaPointer_1
   2186              {
   2187                  return NULL;
   \                     ??cJSON_DetachItemViaPointer_0:
   \   00000D   7A00         MOV     R2,#0x0
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   02....       LJMP    ??cJSON_DetachItemViaPointer_2 & 0xFFFF
   2188              }
   2189          
   2190              if (item != parent->child)
   \                     ??cJSON_DetachItemViaPointer_1:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_621:
   \   00001D   EC           MOV     A,R4
   \   00001E   68           XRL     A,R0
   \   00001F   7002         JNZ     ??cJSON_DetachItemViaPointer_3
   \   000021   ED           MOV     A,R5
   \   000022   69           XRL     A,R1
   \                     ??cJSON_DetachItemViaPointer_3:
   \   000023   600F         JZ      ??CrossCallReturnLabel_422
   2191              {
   2192                  /* not the first element */
   2193                  item->prev->next = item->next;
   \   000025   8C82         MOV     DPL,R4
   \   000027   8D83         MOV     DPH,R5
   \   000029   12....       LCALL   ??Subroutine153_0 & 0xFFFF
   2194              }
   \                     ??CrossCallReturnLabel_227:
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000031   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2195              if (item->next != NULL)
   \                     ??CrossCallReturnLabel_422:
   \   000034   8C82         MOV     DPL,R4
   \   000036   8D83         MOV     DPH,R5
   \   000038   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   00003B   600D         JZ      ??CrossCallReturnLabel_430
   2196              {
   2197                  /* not the last element */
   2198                  item->next->prev = item->prev;
   \   00003D   8C82         MOV     DPL,R4
   \   00003F   8D83         MOV     DPH,R5
   \   000041   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   2199              }
   \                     ??CrossCallReturnLabel_228:
   \   000044   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000047   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   2200          
   2201              if (item == parent->child)
   \                     ??CrossCallReturnLabel_430:
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ??Subroutine225_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_622:
   \   000053   EC           MOV     A,R4
   \   000054   68           XRL     A,R0
   \   000055   7002         JNZ     ??cJSON_DetachItemViaPointer_4
   \   000057   ED           MOV     A,R5
   \   000058   69           XRL     A,R1
   \                     ??cJSON_DetachItemViaPointer_4:
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   7005         JNZ     ??cJSON_DetachItemViaPointer_5
   2202              {
   2203                  /* first element */
   2204                  parent->child = item->next;
   \   00005F   12....       LCALL   ?Subroutine49 & 0xFFFF
   2205              }
   \                     ??CrossCallReturnLabel_73:
   \   000062   8018         SJMP    ??cJSON_DetachItemViaPointer_6
   2206              else if (item->next == NULL)
   \                     ??cJSON_DetachItemViaPointer_5:
   \   000064   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000067   7016         JNZ     ??CrossCallReturnLabel_431
   2207              {
   2208                  /* last element */
   2209                  parent->child->prev = item->prev;
   \   000069   8C82         MOV     DPL,R4
   \   00006B   8D83         MOV     DPH,R5
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   12....       LCALL   ?Subroutine49 & 0xFFFF
   2210              }
   \                     ??CrossCallReturnLabel_74:
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   FA           MOV     R2,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   F583         MOV     DPH,A
   \   00007A   8A82         MOV     DPL,R2
   \                     ??cJSON_DetachItemViaPointer_6:
   \   00007C   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   2211          
   2212              /* make sure the detached item doesn't point anywhere anymore */
   2213              item->prev = NULL;
   \                     ??CrossCallReturnLabel_431:
   \   00007F   8C82         MOV     DPL,R4
   \   000081   8D83         MOV     DPH,R5
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   E4           CLR     A
   \   000086   F0           MOVX    @DPTR,A
   \   000087   A3           INC     DPTR
   \   000088   F0           MOVX    @DPTR,A
   2214              item->next = NULL;
   \   000089   8C82         MOV     DPL,R4
   \   00008B   8D83         MOV     DPH,R5
   \   00008D   F0           MOVX    @DPTR,A
   \   00008E   A3           INC     DPTR
   \   00008F   F0           MOVX    @DPTR,A
   2215          
   2216              return item;
   \   000090   EC           MOV     A,R4
   \   000091   FA           MOV     R2,A
   \   000092   ED           MOV     A,R5
   \   000093   FB           MOV     R3,A
   \                     ??cJSON_DetachItemViaPointer_2:
   \   000094   02....       LJMP    ??Subroutine186_0 & 0xFFFF
   2217          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8E82         MOV     DPL,R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ??Subroutine201_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_629:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   2218          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2219          CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromArray(cJSON *array, int which)
   \                     cJSON_DetachItemFromArray:
   2220          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2221              if (which < 0)
   \   000009   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_496:
   \   00000C   5006         JNC     ??cJSON_DetachItemFromArray_0
   2222              {
   2223                  return NULL;
   \   00000E   7A00         MOV     R2,#0x0
   \   000010   7B00         MOV     R3,#0x0
   \   000012   8006         SJMP    ??cJSON_DetachItemFromArray_1
   2224              }
   2225          
   2226              return cJSON_DetachItemViaPointer(array, get_array_item(array, (size_t)which));
   \                     ??cJSON_DetachItemFromArray_0:
   \   000014                ; Setup parameters for call to function cJSON_DetachItemViaPointer
   \   000014                ; Setup parameters for call to function get_array_item
   \   000014   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000017   12....       LCALL   ??cJSON_DetachItemViaPointer?relay
   \                     ??cJSON_DetachItemFromArray_1:
   \   00001A   02....       LJMP    ??Subroutine186_0 & 0xFFFF
   2227          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   12....       LCALL   ??get_array_item?relay
   \   000003   EA           MOV     A,R2
   \   000004   FC           MOV     R4,A
   \   000005   EB           MOV     A,R3
   \   000006   FD           MOV     R5,A
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET
   2228          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2229          CJSON_PUBLIC(void) cJSON_DeleteItemFromArray(cJSON *array, int which)
   \                     cJSON_DeleteItemFromArray:
   2230          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2231              cJSON_Delete(cJSON_DetachItemFromArray(array, which));
   \   000004                ; Setup parameters for call to function cJSON_Delete
   \   000004                ; Setup parameters for call to function cJSON_DetachItemFromArray
   \   000004   12....       LCALL   ??cJSON_DetachItemFromArray?relay
   \   000007                REQUIRE ?Subroutine8
   \   000007                ; // Fall through to label ?Subroutine8
   2232          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ??cJSON_Delete?relay
   \   000003   80..         SJMP    ??Subroutine204_0
   2233          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   EE           MOV     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   EF           MOV     A,R7
   \   000007   FB           MOV     R3,A
   \   000008   12....       LCALL   ??cJSON_DetachItemViaPointer?relay
   \   00000B                REQUIRE ??Subroutine186_0
   \   00000B                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2234          CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObject(cJSON *object, const char *string)
   \                     cJSON_DetachItemFromObject:
   2235          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2236              cJSON *to_detach = cJSON_GetObjectItem(object, string);
   2237          
   2238              return cJSON_DetachItemViaPointer(object, to_detach);
   \   000009                ; Setup parameters for call to function cJSON_DetachItemViaPointer
   \   000009                ; Setup parameters for call to function cJSON_GetObjectItem
   \   000009   12....       LCALL   ??cJSON_GetObjectItem?relay
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2239          }
   2240          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2241          CJSON_PUBLIC(cJSON *) cJSON_DetachItemFromObjectCaseSensitive(cJSON *object, const char *string)
   \                     cJSON_DetachItemFromObjectCaseSensitive:
   2242          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2243              cJSON *to_detach = cJSON_GetObjectItemCaseSensitive(object, string);
   2244          
   2245              return cJSON_DetachItemViaPointer(object, to_detach);
   \   000009                ; Setup parameters for call to function cJSON_DetachItemViaPointer
   \   000009                ; Setup parameters for call to function cJSON_GetObjectItemCaseSensitive
   \   000009   12....       LCALL   ??cJSON_GetObjectItemCaseSensitive?relay
   \   00000C   02....       LJMP    ?Subroutine3 & 0xFFFF
   2246          }
   2247          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2248          CJSON_PUBLIC(void) cJSON_DeleteItemFromObject(cJSON *object, const char *string)
   \                     cJSON_DeleteItemFromObject:
   2249          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2250              cJSON_Delete(cJSON_DetachItemFromObject(object, string));
   \   000004                ; Setup parameters for call to function cJSON_Delete
   \   000004                ; Setup parameters for call to function cJSON_DetachItemFromObject
   \   000004   12....       LCALL   ??cJSON_DetachItemFromObject?relay
   \   000007   80..         SJMP    ?Subroutine8
   2251          }
   2252          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2253          CJSON_PUBLIC(void) cJSON_DeleteItemFromObjectCaseSensitive(cJSON *object, const char *string)
   \                     cJSON_DeleteItemFromObjectCaseSensitive:
   2254          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2255              cJSON_Delete(cJSON_DetachItemFromObjectCaseSensitive(object, string));
   \   000004                ; Setup parameters for call to function cJSON_Delete
   \   000004                ; Setup parameters for call to function cJSON_DetachItemFromObjectCaseSensitive
   \   000004   12....       LCALL   ??cJSON_DetachItemFromObjectCaseSensitive?relay
   \   000007   80..         SJMP    ?Subroutine8
   2256          }
   2257          
   2258          /* Replace array/object items with new ones. */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2259          CJSON_PUBLIC(cJSON_bool) cJSON_InsertItemInArray(cJSON *array, int which, cJSON *newitem)
   \                     cJSON_InsertItemInArray:
   2260          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine37 & 0xFFFF
   2261              cJSON *after_inserted = NULL;
   2262          
   2263              if (which < 0)
   \                     ??CrossCallReturnLabel_52:
   \   000011   5004         JNC     ??cJSON_InsertItemInArray_0
   2264              {
   2265                  return false;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   8070         SJMP    ??cJSON_InsertItemInArray_1
   2266              }
   2267          
   2268              after_inserted = get_array_item(array, (size_t)which);
   \                     ??cJSON_InsertItemInArray_0:
   \   000017                ; Setup parameters for call to function get_array_item
   \   000017   12....       LCALL   ??get_array_item?relay
   \   00001A   8A..         MOV     ?V0 + 2,R2
   \   00001C   8B..         MOV     ?V0 + 3,R3
   \   00001E   A8..         MOV     R0,?V0 + 2
   \   000020   A9..         MOV     R1,?V0 + 3
   2269              if (after_inserted == NULL)
   \   000022   E8           MOV     A,R0
   \   000023   49           ORL     A,R1
   \   000024   700D         JNZ     ??cJSON_InsertItemInArray_2
   2270              {
   2271                  return add_item_to_array(array, newitem);
   \   000026                ; Setup parameters for call to function add_item_to_array
   \   000026   AC..         MOV     R4,?V0 + 0
   \   000028   AD..         MOV     R5,?V0 + 1
   \   00002A   EE           MOV     A,R6
   \   00002B   FA           MOV     R2,A
   \   00002C   EF           MOV     A,R7
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   ??add_item_to_array?relay
   \   000031   8056         SJMP    ??cJSON_InsertItemInArray_3
   2272              }
   2273          
   2274              newitem->next = after_inserted;
   \                     ??cJSON_InsertItemInArray_2:
   \   000033   85..82       MOV     DPL,?V0 + 0
   \   000036   85..83       MOV     DPH,?V0 + 1
   \   000039   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2275              newitem->prev = after_inserted->prev;
   \                     ??CrossCallReturnLabel_423:
   \   00003C   E8           MOV     A,R0
   \   00003D   2402         ADD     A,#0x2
   \   00003F   0A           INC     R2
   \   000040   0A           INC     R2
   \   000041   E9           MOV     A,R1
   \   000042   3400         ADDC    A,#0x0
   \   000044   FB           MOV     R3,A
   \   000045   8A82         MOV     DPL,R2
   \   000047   8B83         MOV     DPH,R3
   \   000049   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_524:
   \   00004C   85..82       MOV     DPL,?V0 + 0
   \   00004F   85..83       MOV     DPH,?V0 + 1
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   EC           MOV     A,R4
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
   \   000057   ED           MOV     A,R5
   \   000058   12....       LCALL   ?Subroutine102 & 0xFFFF
   2276              after_inserted->prev = newitem;
   \                     ??CrossCallReturnLabel_161:
   \   00005B   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   2277              if (after_inserted == array->child)
   \                     ??CrossCallReturnLabel_501:
   \   00005E   8E82         MOV     DPL,R6
   \   000060   8F83         MOV     DPH,R7
   \   000062   12....       LCALL   ??Subroutine187_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000065   E8           MOV     A,R0
   \   000066   6A           XRL     A,R2
   \   000067   7002         JNZ     ??cJSON_InsertItemInArray_4
   \   000069   E9           MOV     A,R1
   \   00006A   6B           XRL     A,R3
   \                     ??cJSON_InsertItemInArray_4:
   \   00006B   700A         JNZ     ??cJSON_InsertItemInArray_5
   2278              {
   2279                  array->child = newitem;
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   800B         SJMP    ??CrossCallReturnLabel_261
   2280              }
   2281              else
   2282              {
   2283                  newitem->prev->next = newitem;
   \                     ??cJSON_InsertItemInArray_5:
   \   000077   85..82       MOV     DPL,?V0 + 0
   \   00007A   85..83       MOV     DPH,?V0 + 1
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   2284              }
   \                     ??CrossCallReturnLabel_261:
   \   000082   12....       LCALL   ??Subroutine206_0 & 0xFFFF
   2285              return true;
   \                     ??CrossCallReturnLabel_502:
   \   000085   7A01         MOV     R2,#0x1
   \                     ??cJSON_InsertItemInArray_1:
   \   000087   7B00         MOV     R3,#0x0
   \                     ??cJSON_InsertItemInArray_3:
   \   000089   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   2286          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine209_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_517:
   \   000003   C3           CLR     C
   \   000004   ED           MOV     A,R5
   \   000005   9400         SUBB    A,#0x0
   \   000007   A2D2         MOV     C,0xD0 /* PSW */.2
   \   000009   65D0         XRL     A,PSW
   \   00000B   33           RLC     A
   \   00000C   22           RET
   2287          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2288          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemViaPointer(cJSON * const parent, cJSON * const item, cJSON * replacement)
   \                     cJSON_ReplaceItemViaPointer:
   2289          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   EC           MOV     A,R4
   \   00000A   FA           MOV     R2,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FB           MOV     R3,A
   \   00000D   740B         MOV     A,#0xb
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine45 & 0xFFFF
   2290              if ((parent == NULL) || (replacement == NULL) || (item == NULL))
   \                     ??CrossCallReturnLabel_66:
   \   000015   4F           ORL     A,R7
   \   000016   6008         JZ      ??cJSON_ReplaceItemViaPointer_0
   \   000018   E8           MOV     A,R0
   \   000019   49           ORL     A,R1
   \   00001A   6004         JZ      ??cJSON_ReplaceItemViaPointer_0
   \   00001C   EA           MOV     A,R2
   \   00001D   4B           ORL     A,R3
   \   00001E   7005         JNZ     ??cJSON_ReplaceItemViaPointer_1
   2291              {
   2292                  return false;
   \                     ??cJSON_ReplaceItemViaPointer_0:
   \   000020   7A00         MOV     R2,#0x0
   \   000022   02....       LJMP    ??cJSON_ReplaceItemViaPointer_2 & 0xFFFF
   2293              }
   2294          
   2295              if (replacement == item)
   \                     ??cJSON_ReplaceItemViaPointer_1:
   \   000025   EA           MOV     A,R2
   \   000026   68           XRL     A,R0
   \   000027   7002         JNZ     ??cJSON_ReplaceItemViaPointer_3
   \   000029   EB           MOV     A,R3
   \   00002A   69           XRL     A,R1
   \                     ??cJSON_ReplaceItemViaPointer_3:
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??cJSON_ReplaceItemViaPointer_4 & 0xFFFF
   2296              {
   2297                  return true;
   2298              }
   2299          
   2300              replacement->next = item->next;
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_525:
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   EC           MOV     A,R4
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   ED           MOV     A,R5
   \   00003F   12....       LCALL   ?Subroutine101 & 0xFFFF
   2301              replacement->prev = item->prev;
   \                     ??CrossCallReturnLabel_156:
   \   000042   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_510:
   \   000045   12....       LCALL   ?Subroutine94 & 0xFFFF
   2302          
   2303              if (replacement->next != NULL)
   \                     ??CrossCallReturnLabel_505:
   \   000048   EC           MOV     A,R4
   \   000049   4D           ORL     A,R5
   \   00004A   600A         JZ      ??CrossCallReturnLabel_432
   2304              {
   2305                  replacement->next->prev = replacement;
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   12....       LCALL   ?Subroutine75 & 0xFFFF
   2306              }
   \                     ??CrossCallReturnLabel_113:
   \   000053   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   2307              if (parent->child == item)
   \                     ??CrossCallReturnLabel_432:
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_529:
   \   00005D   EA           MOV     A,R2
   \   00005E   6C           XRL     A,R4
   \   00005F   7002         JNZ     ??cJSON_ReplaceItemViaPointer_5
   \   000061   EB           MOV     A,R3
   \   000062   6D           XRL     A,R5
   \                     ??cJSON_ReplaceItemViaPointer_5:
   \   000063   7022         JNZ     ??cJSON_ReplaceItemViaPointer_6
   \   000065   8C82         MOV     DPL,R4
   \   000067   8D83         MOV     DPH,R5
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   12....       LCALL   ??Subroutine207_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_511:
   \   00006E   EC           MOV     A,R4
   \   00006F   65..         XRL     A,?V0 + 0
   \   000071   7003         JNZ     ??cJSON_ReplaceItemViaPointer_7
   \   000073   ED           MOV     A,R5
   \   000074   65..         XRL     A,?V0 + 1
   \                     ??cJSON_ReplaceItemViaPointer_7:
   \   000076   7007         JNZ     ??CrossCallReturnLabel_433
   2308              {
   2309                  if (parent->child->prev == parent->child)
   2310                  {
   2311                      replacement->prev = replacement;
   \   000078   8882         MOV     DPL,R0
   \   00007A   8983         MOV     DPH,R1
   \   00007C   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   2312                  }
   2313                  parent->child = replacement;
   \                     ??CrossCallReturnLabel_433:
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   8030         SJMP    ??CrossCallReturnLabel_114
   2314              }
   2315              else
   2316              {   /*
   2317                   * To find the last item in array quickly, we use prev in array.
   2318                   * We can't modify the last item's next pointer where this item was the parent's child
   2319                   */
   2320                  if (replacement->prev != NULL)
   \                     ??cJSON_ReplaceItemViaPointer_6:
   \   000087   8882         MOV     DPL,R0
   \   000089   8983         MOV     DPH,R1
   \   00008B   12....       LCALL   ??Subroutine208_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_528:
   \   00008E   EC           MOV     A,R4
   \   00008F   4D           ORL     A,R5
   \   000090   600F         JZ      ??CrossCallReturnLabel_424
   2321                  {
   2322                      replacement->prev->next = replacement;
   \   000092   8882         MOV     DPL,R0
   \   000094   8983         MOV     DPH,R1
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   A3           INC     DPTR
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   F583         MOV     DPH,A
   \   00009C   8C82         MOV     DPL,R4
   \   00009E   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2323                  }
   2324                  if (replacement->next == NULL)
   \                     ??CrossCallReturnLabel_424:
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_526:
   \   0000A8   EC           MOV     A,R4
   \   0000A9   4D           ORL     A,R5
   \   0000AA   700E         JNZ     ??CrossCallReturnLabel_434
   2325                  {
   2326                      parent->child->prev = replacement;
   \   0000AC   8E82         MOV     DPL,R6
   \   0000AE   8F83         MOV     DPH,R7
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   12....       LCALL   ?Subroutine75 & 0xFFFF
   2327                  }
   2328              }
   \                     ??CrossCallReturnLabel_114:
   \   0000B7   12....       LCALL   ??Subroutine193_0 & 0xFFFF
   2329          
   2330              item->next = NULL;
   \                     ??CrossCallReturnLabel_434:
   \   0000BA   8A82         MOV     DPL,R2
   \   0000BC   8B83         MOV     DPH,R3
   \   0000BE   E4           CLR     A
   \   0000BF   F0           MOVX    @DPTR,A
   \   0000C0   A3           INC     DPTR
   \   0000C1   12....       LCALL   ?Subroutine101 & 0xFFFF
   2331              item->prev = NULL;
   \                     ??CrossCallReturnLabel_157:
   \   0000C4   F0           MOVX    @DPTR,A
   \   0000C5   A3           INC     DPTR
   \   0000C6   F0           MOVX    @DPTR,A
   2332              cJSON_Delete(item);
   \   0000C7                ; Setup parameters for call to function cJSON_Delete
   \   0000C7   12....       LCALL   ??cJSON_Delete?relay
   2333          
   2334              return true;
   \                     ??cJSON_ReplaceItemViaPointer_4:
   \   0000CA   7A01         MOV     R2,#0x1
   \                     ??cJSON_ReplaceItemViaPointer_2:
   \   0000CC   7B00         MOV     R3,#0x0
   \   0000CE   7F03         MOV     R7,#0x3
   \   0000D0   02....       LJMP    ?BANKED_LEAVE_XDATA
   2335          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8C82         MOV     DPL,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine208_0
   \   000002                ; // Fall through to label ??Subroutine208_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine208_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine209_0
   \   000002                ; // Fall through to label ??Subroutine209_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
   2336          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2337          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInArray(cJSON *array, int which, cJSON *newitem)
   \                     cJSON_ReplaceItemInArray:
   2338          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   740A         MOV     A,#0xa
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ?Subroutine37 & 0xFFFF
   2339              if (which < 0)
   \                     ??CrossCallReturnLabel_53:
   \   000011   5006         JNC     ??cJSON_ReplaceItemInArray_0
   2340              {
   2341                  return false;
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   8010         SJMP    ??cJSON_ReplaceItemInArray_1
   2342              }
   2343          
   2344              return cJSON_ReplaceItemViaPointer(array, get_array_item(array, (size_t)which), newitem);
   \                     ??cJSON_ReplaceItemInArray_0:
   \   000019                ; Setup parameters for call to function cJSON_ReplaceItemViaPointer
   \   000019   78..         MOV     R0,#?V0 + 0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001E                ; Setup parameters for call to function get_array_item
   \   00001E   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000021   12....       LCALL   ??cJSON_ReplaceItemViaPointer?relay
   \   000024   7402         MOV     A,#0x2
   \   000026   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??cJSON_ReplaceItemInArray_1:
   \   000029   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2345          }
   2346          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2347          static cJSON_bool replace_item_in_object(cJSON *object, const char *string, cJSON *replacement, cJSON_bool case_sensitive)
   \                     replace_item_in_object:
   2348          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   740E         MOV     A,#0xe
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000015   7410         MOV     A,#0x10
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine61 & 0xFFFF
   2349              if ((replacement == NULL) || (string == NULL))
   \                     ??CrossCallReturnLabel_91:
   \   00001D   E5..         MOV     A,?V0 + 4
   \   00001F   45..         ORL     A,?V0 + 5
   \   000021   6004         JZ      ??replace_item_in_object_0
   \   000023   EE           MOV     A,R6
   \   000024   4F           ORL     A,R7
   \   000025   7006         JNZ     ??replace_item_in_object_1
   2350              {
   2351                  return false;
   \                     ??replace_item_in_object_0:
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   8075         SJMP    ??replace_item_in_object_2
   2352              }
   2353          
   2354              /* replace the name in the replacement */
   2355              if (!(replacement->type & cJSON_StringIsConst) && (replacement->string != NULL))
   \                     ??replace_item_in_object_1:
   \   00002D   85..82       MOV     DPL,?V0 + 4
   \   000030   85..83       MOV     DPH,?V0 + 5
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   5402         ANL     A,#0x2
   \   00003D   7014         JNZ     ??CrossCallReturnLabel_98
   \   00003F   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000042   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   000045   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000048   6009         JZ      ??CrossCallReturnLabel_98
   2356              {
   2357                  cJSON_free(replacement->string);
   \   00004A                ; Setup parameters for call to function cJSON_free
   \   00004A   12....       LCALL   ?Subroutine109 & 0xFFFF
   2358              }
   \                     ??CrossCallReturnLabel_171:
   \   00004D   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   000050   12....       LCALL   ?Subroutine64 & 0xFFFF
   2359              replacement->string = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   \                     ??CrossCallReturnLabel_98:
   \   000053                ; Setup parameters for call to function cJSON_strdup
   \   000053   7C..         MOV     R4,#global_hooks & 0xff
   \   000055   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   000057   EE           MOV     A,R6
   \   000058   FA           MOV     R2,A
   \   000059   EF           MOV     A,R7
   \   00005A   FB           MOV     R3,A
   \   00005B   12....       LCALL   ??cJSON_strdup?relay
   \   00005E   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000061   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000064   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2360              replacement->type &= ~cJSON_StringIsConst;
   \                     ??CrossCallReturnLabel_575:
   \   000067   85..82       MOV     DPL,?V0 + 4
   \   00006A   85..83       MOV     DPH,?V0 + 5
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   54FD         ANL     A,#0xfd
   \   000077   F0           MOVX    @DPTR,A
   2361          
   2362              return cJSON_ReplaceItemViaPointer(object, get_object_item(object, string, case_sensitive), replacement);
   \   000078                ; Setup parameters for call to function cJSON_ReplaceItemViaPointer
   \   000078   78..         MOV     R0,#?V0 + 4
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D                ; Setup parameters for call to function get_object_item
   \   00007D   78..         MOV     R0,#?V0 + 2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   EE           MOV     A,R6
   \   000083   FC           MOV     R4,A
   \   000084   EF           MOV     A,R7
   \   000085   FD           MOV     R5,A
   \   000086   AA..         MOV     R2,?V0 + 0
   \   000088   AB..         MOV     R3,?V0 + 1
   \   00008A   12....       LCALL   ??get_object_item?relay
   \   00008D   7402         MOV     A,#0x2
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   EA           MOV     A,R2
   \   000093   FC           MOV     R4,A
   \   000094   EB           MOV     A,R3
   \   000095   FD           MOV     R5,A
   \   000096   AA..         MOV     R2,?V0 + 0
   \   000098   AB..         MOV     R3,?V0 + 1
   \   00009A   12....       LCALL   ??cJSON_ReplaceItemViaPointer?relay
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??replace_item_in_object_2:
   \   0000A2   02....       LJMP    ??Subroutine189_0 & 0xFFFF
   2363          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_640:
   \   000005   E5..         MOV     A,?V0 + 5
   \   000007   22           RET
   2364          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2365          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObject(cJSON *object, const char *string, cJSON *newitem)
   \                     cJSON_ReplaceItemInObject:
   2366          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine48 & 0xFFFF
   2367              return replace_item_in_object(object, string, newitem, false);
   \                     ??CrossCallReturnLabel_72:
   \   00000D                REQUIRE ?Subroutine13
   \   00000D                ; // Fall through to label ?Subroutine13

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   78..         MOV     R0,#?V0 + 2
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000005   78..         MOV     R0,#?V0 + 0
   \   000007   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000A   12....       LCALL   ??replace_item_in_object?relay
   \   00000D   7404         MOV     A,#0x4
   \   00000F   02....       LJMP    ??Subroutine181_0 & 0xFFFF
   2368          }
   2369          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2370          CJSON_PUBLIC(cJSON_bool) cJSON_ReplaceItemInObjectCaseSensitive(cJSON *object, const char *string, cJSON *newitem)
   \                     cJSON_ReplaceItemInObjectCaseSensitive:
   2371          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   740C         MOV     A,#0xc
   \   000007   12....       LCALL   ?XSTACK_DISP0_8
   \   00000A   12....       LCALL   ?Subroutine44 & 0xFFFF
   2372              return replace_item_in_object(object, string, newitem, true);
   \                     ??CrossCallReturnLabel_64:
   \   00000D   80..         SJMP    ?Subroutine13
   2373          }
   2374          
   2375          /* Create basic types: */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2376          CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void)
   \                     cJSON_CreateNull:
   2377          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2378              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2379              if(item)
   \                     ??CrossCallReturnLabel_560:
   \   000008   600F         JZ      ??CrossCallReturnLabel_545
   2380              {
   2381                  item->type = cJSON_NULL;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7404         MOV     A,#0x4
   \   000016   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   2382              }
   2383          
   2384              return item;
   \                     ??CrossCallReturnLabel_545:
   \   000019   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2385          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine214_0:
   \   000000   7A..         MOV     R2,#global_hooks & 0xff
   \   000002   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000004   12....       LCALL   ??cJSON_New_Item?relay
   \   000007   EA           MOV     A,R2
   \   000008   4B           ORL     A,R3
   \   000009   22           RET
   2386          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2387          CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void)
   \                     cJSON_CreateTrue:
   2388          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2389              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2390              if(item)
   \                     ??CrossCallReturnLabel_561:
   \   000008   600F         JZ      ??CrossCallReturnLabel_546
   2391              {
   2392                  item->type = cJSON_True;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7402         MOV     A,#0x2
   \   000016   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   2393              }
   2394          
   2395              return item;
   \                     ??CrossCallReturnLabel_546:
   \   000019   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2396          }
   2397          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2398          CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void)
   \                     cJSON_CreateFalse:
   2399          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2400              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2401              if(item)
   \                     ??CrossCallReturnLabel_562:
   \   000008   600F         JZ      ??CrossCallReturnLabel_547
   2402              {
   2403                  item->type = cJSON_False;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   2404              }
   2405          
   2406              return item;
   \                     ??CrossCallReturnLabel_547:
   \   000019   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2407          }
   2408          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2409          CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean)
   \                     cJSON_CreateBool:
   2410          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine116 & 0xFFFF
   2411              cJSON *item = cJSON_New_Item(&global_hooks);
   2412              if(item)
   \                     ??CrossCallReturnLabel_556:
   \   000008   6018         JZ      ??CrossCallReturnLabel_548
   2413              {
   2414                  item->type = boolean ? cJSON_True : cJSON_False;
   \   00000A   EE           MOV     A,R6
   \   00000B   4F           ORL     A,R7
   \   00000C   6004         JZ      ??cJSON_CreateBool_0
   \   00000E   7802         MOV     R0,#0x2
   \   000010   8002         SJMP    ??cJSON_CreateBool_1
   \                     ??cJSON_CreateBool_0:
   \   000012   7801         MOV     R0,#0x1
   \                     ??cJSON_CreateBool_1:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   E8           MOV     A,R0
   \   00001F   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   2415              }
   2416          
   2417              return item;
   \                     ??CrossCallReturnLabel_548:
   \   000022   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2418          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                REQUIRE ??Subroutine214_0
   \   000004                ; // Fall through to label ??Subroutine214_0
   2419          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2420          CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
   \                     cJSON_CreateNumber:
   2421          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   \   00000B   8D..         MOV     ?V0 + 3,R5
   2422              cJSON *item = cJSON_New_Item(&global_hooks);
   \   00000D                ; Setup parameters for call to function cJSON_New_Item
   \   00000D   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2423              if(item)
   \                     ??CrossCallReturnLabel_563:
   \   000010   607E         JZ      ??cJSON_CreateNumber_0
   2424              {
   2425                  item->type = cJSON_Number;
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   7408         MOV     A,#0x8
   \   00001E   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   2426                  item->valuedouble = num;
   \                     ??CrossCallReturnLabel_549:
   \   000021   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?L_MOV_TO_X
   2427          
   2428                  /* use saturation in case of overflow */
   2429                  if (num >= INT_MAX)
   \   000029   90....       MOV     DPTR,#__Constant_46fffe00
   \   00002C   78..         MOV     R0,#?V0 + 4
   \   00002E   12....       LCALL   ?L_MOV_X
   \   000031   78..         MOV     R0,#?V0 + 0
   \   000033   79..         MOV     R1,#?V0 + 4
   \   000035   12....       LCALL   ?FLT_GE
   \   000038   5016         JNC     ??cJSON_CreateNumber_1
   2430                  {
   2431                      item->valueint = INT_MAX;
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   74FF         MOV     A,#-0x1
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   \   00004C   747F         MOV     A,#0x7f
   \   00004E   803F         SJMP    ??cJSON_CreateNumber_2
   2432                  }
   2433                  else if (num <= (double)INT_MIN)
   \                     ??cJSON_CreateNumber_1:
   \   000050   90....       MOV     DPTR,#__Constant_c6fffffe
   \   000053   78..         MOV     R0,#?V0 + 4
   \   000055   12....       LCALL   ?L_MOV_X
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   79..         MOV     R1,#?V0 + 4
   \   00005C   12....       LCALL   ?FLT_LT
   \   00005F   5015         JNC     ??cJSON_CreateNumber_3
   2434                  {
   2435                      item->valueint = INT_MIN;
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   A3           INC     DPTR
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   E4           CLR     A
   \   000070   F0           MOVX    @DPTR,A
   \   000071   A3           INC     DPTR
   \   000072   7480         MOV     A,#-0x80
   \   000074   8019         SJMP    ??cJSON_CreateNumber_2
   2436                  }
   2437                  else
   2438                  {
   2439                      item->valueint = (int)num;
   \                     ??cJSON_CreateNumber_3:
   \   000076   78..         MOV     R0,#?V0 + 0
   \   000078   12....       LCALL   ?FLT_TO_L
   \   00007B   8A82         MOV     DPL,R2
   \   00007D   8B83         MOV     DPH,R3
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   E5..         MOV     A,?V0 + 0
   \   00008B   F0           MOVX    @DPTR,A
   \   00008C   A3           INC     DPTR
   \   00008D   E5..         MOV     A,?V0 + 1
   \                     ??cJSON_CreateNumber_2:
   \   00008F   F0           MOVX    @DPTR,A
   2440                  }
   2441              }
   2442          
   2443              return item;
   \                     ??cJSON_CreateNumber_0:
   \   000090   02....       LJMP    ??Subroutine151_0 & 0xFFFF
   2444          }
   2445          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine191_0
   \   000004                ; // Fall through to label ??Subroutine191_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2446          CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
   \                     cJSON_CreateString:
   2447          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine115 & 0xFFFF
   2448              cJSON *item = cJSON_New_Item(&global_hooks);
   2449              if(item)
   \                     ??CrossCallReturnLabel_553:
   \   000008   6019         JZ      ??cJSON_CreateString_0
   2450              {
   2451                  item->type = cJSON_String;
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7410         MOV     A,#0x10
   \   000016   12....       LCALL   ?Subroutine84 & 0xFFFF
   2452                  item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
   2453                  if(!item->valuestring)
   \                     ??CrossCallReturnLabel_141:
   \   000019   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_465:
   \   00001C   7005         JNZ     ??cJSON_CreateString_0
   2454                  {
   2455                      cJSON_Delete(item);
   \   00001E                ; Setup parameters for call to function cJSON_Delete
   \   00001E   12....       LCALL   ?Subroutine107 & 0xFFFF
   2456                      return NULL;
   2457                  }
   2458              }
   \                     ??CrossCallReturnLabel_403:
   \   000021   8004         SJMP    ??cJSON_CreateString_1
   2459          
   2460              return item;
   \                     ??cJSON_CreateString_0:
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \                     ??cJSON_CreateString_1:
   \   000027   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   2461          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   8A..         MOV     ?V0 + 0,R2
   \   000002   8B..         MOV     ?V0 + 1,R3
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004                ; Setup parameters for call to function cJSON_New_Item
   \   000004   7A..         MOV     R2,#global_hooks & 0xff
   \   000006   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine213_0
   \   000008                ; // Fall through to label ??Subroutine213_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E4           CLR     A
   \   000003   F0           MOVX    @DPTR,A
   \   000004   EE           MOV     A,R6
   \   000005   2408         ADD     A,#0x8
   \   000007   F8           MOV     R0,A
   \   000008   EF           MOV     A,R7
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   88..         MOV     ?V0 + 2,R0
   \   00000E   89..         MOV     ?V0 + 3,R1
   \   000010                ; Setup parameters for call to function cJSON_strdup
   \   000010                ; Setup parameters for call to function cJSON_strdup
   \   000010   7C..         MOV     R4,#global_hooks & 0xff
   \   000012   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   000014   AA..         MOV     R2,?V0 + 0
   \   000016   AB..         MOV     R3,?V0 + 1
   \   000018   12....       LCALL   ??cJSON_strdup?relay
   \   00001B   85..82       MOV     DPL,?V0 + 2
   \   00001E   85..83       MOV     DPH,?V0 + 3
   \   000021   EA           MOV     A,R2
   \   000022   F0           MOVX    @DPTR,A
   \   000023   A3           INC     DPTR
   \   000024   EB           MOV     A,R3
   \   000025   F0           MOVX    @DPTR,A
   \   000026   85..82       MOV     DPL,?V0 + 2
   \   000029   85..83       MOV     DPH,?V0 + 3
   \   00002C   22           RET
   2462          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2463          CJSON_PUBLIC(cJSON *) cJSON_CreateStringReference(const char *string)
   \                     cJSON_CreateStringReference:
   2464          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine116 & 0xFFFF
   2465              cJSON *item = cJSON_New_Item(&global_hooks);
   2466              if (item != NULL)
   \                     ??CrossCallReturnLabel_557:
   \   000008   601E         JZ      ??cJSON_CreateStringReference_0
   2467              {
   2468                  item->type = cJSON_String | cJSON_IsReference;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7410         MOV     A,#0x10
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   7401         MOV     A,#0x1
   \   00001A   12....       LCALL   ?Subroutine101 & 0xFFFF
   2469                  item->valuestring = (char*)cast_away_const(string);
   2470              }
   \                     ??CrossCallReturnLabel_158:
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
   2471          
   2472              return item;
   \                     ??cJSON_CreateStringReference_0:
   \   000028   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2473          }
   2474          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2475          CJSON_PUBLIC(cJSON *) cJSON_CreateObjectReference(const cJSON *child)
   \                     cJSON_CreateObjectReference:
   2476          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine116 & 0xFFFF
   2477              cJSON *item = cJSON_New_Item(&global_hooks);
   2478              if (item != NULL) {
   \                     ??CrossCallReturnLabel_558:
   \   000008   600F         JZ      ??CrossCallReturnLabel_150
   2479                  item->type = cJSON_Object | cJSON_IsReference;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7440         MOV     A,#0x40
   \   000016   12....       LCALL   ?Subroutine93 & 0xFFFF
   2480                  item->child = (cJSON*)cast_away_const(child);
   2481              }
   2482          
   2483              return item;
   \                     ??CrossCallReturnLabel_150:
   \   000019   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   7401         MOV     A,#0x1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   EE           MOV     A,R6
   \   00000E   F0           MOVX    @DPTR,A
   \   00000F   A3           INC     DPTR
   \   000010   EF           MOV     A,R7
   \   000011   F0           MOVX    @DPTR,A
   \   000012   22           RET
   2485          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2486          CJSON_PUBLIC(cJSON *) cJSON_CreateArrayReference(const cJSON *child) {
   \                     cJSON_CreateArrayReference:
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine116 & 0xFFFF
   2487              cJSON *item = cJSON_New_Item(&global_hooks);
   2488              if (item != NULL) {
   \                     ??CrossCallReturnLabel_559:
   \   000008   600F         JZ      ??CrossCallReturnLabel_151
   2489                  item->type = cJSON_Array | cJSON_IsReference;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7420         MOV     A,#0x20
   \   000016   12....       LCALL   ?Subroutine93 & 0xFFFF
   2490                  item->child = (cJSON*)cast_away_const(child);
   2491              }
   2492          
   2493              return item;
   \                     ??CrossCallReturnLabel_151:
   \   000019   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2494          }
   2495          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2496          CJSON_PUBLIC(cJSON *) cJSON_CreateRaw(const char *raw)
   \                     cJSON_CreateRaw:
   2497          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine115 & 0xFFFF
   2498              cJSON *item = cJSON_New_Item(&global_hooks);
   2499              if(item)
   \                     ??CrossCallReturnLabel_554:
   \   000008   6019         JZ      ??cJSON_CreateRaw_0
   2500              {
   2501                  item->type = cJSON_Raw;
   \   00000A   8E82         MOV     DPL,R6
   \   00000C   8F83         MOV     DPH,R7
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7480         MOV     A,#-0x80
   \   000016   12....       LCALL   ?Subroutine84 & 0xFFFF
   2502                  item->valuestring = (char*)cJSON_strdup((const unsigned char*)raw, &global_hooks);
   2503                  if(!item->valuestring)
   \                     ??CrossCallReturnLabel_142:
   \   000019   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_466:
   \   00001C   7005         JNZ     ??cJSON_CreateRaw_0
   2504                  {
   2505                      cJSON_Delete(item);
   \   00001E                ; Setup parameters for call to function cJSON_Delete
   \   00001E   12....       LCALL   ?Subroutine107 & 0xFFFF
   2506                      return NULL;
   2507                  }
   2508              }
   \                     ??CrossCallReturnLabel_404:
   \   000021   8004         SJMP    ??cJSON_CreateRaw_1
   2509          
   2510              return item;
   \                     ??cJSON_CreateRaw_0:
   \   000023   EE           MOV     A,R6
   \   000024   FA           MOV     R2,A
   \   000025   EF           MOV     A,R7
   \   000026   FB           MOV     R3,A
   \                     ??cJSON_CreateRaw_1:
   \   000027   02....       LJMP    ??Subroutine182_0 & 0xFFFF
   2511          }
   2512          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2513          CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void)
   \                     cJSON_CreateArray:
   2514          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2515              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2516              if(item)
   \                     ??CrossCallReturnLabel_564:
   \   000008   6007         JZ      ??CrossCallReturnLabel_552
   2517              {
   2518                  item->type=cJSON_Array;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   12....       LCALL   ?Subroutine98 & 0xFFFF
   2519              }
   2520          
   2521              return item;
   \                     ??CrossCallReturnLabel_552:
   \   000011   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2522          }
   2523          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2524          CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
   \                     cJSON_CreateObject:
   2525          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2526              cJSON *item = cJSON_New_Item(&global_hooks);
   \   000005                ; Setup parameters for call to function cJSON_New_Item
   \   000005   12....       LCALL   ??Subroutine214_0 & 0xFFFF
   2527              if (item)
   \                     ??CrossCallReturnLabel_565:
   \   000008   600F         JZ      ??CrossCallReturnLabel_550
   2528              {
   2529                  item->type = cJSON_Object;
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   7440         MOV     A,#0x40
   \   000016   12....       LCALL   ??Subroutine212_0 & 0xFFFF
   2530              }
   2531          
   2532              return item;
   \                     ??CrossCallReturnLabel_550:
   \   000019   02....       LJMP    ??Subroutine160_0 & 0xFFFF
   2533          }
   2534          
   2535          /* Create Arrays: */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2536          CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count)
   \                     cJSON_CreateIntArray:
   2537          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 12,R2
   \   000007   8B..         MOV     ?V0 + 13,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   2538              size_t i = 0;
   2539              cJSON *n = NULL;
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   2540              cJSON *p = NULL;
   \   000013   75..00       MOV     ?V0 + 4,#0x0
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   2541              cJSON *a = NULL;
   2542          
   2543              if ((count < 0) || (numbers == NULL))
   \   000019   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_497:
   \   00001C   4005         JC      ??cJSON_CreateIntArray_0
   \   00001E   EA           MOV     A,R2
   \   00001F   45..         ORL     A,?V0 + 13
   \   000021   7006         JNZ     ??cJSON_CreateIntArray_1
   2544              {
   2545                  return NULL;
   \                     ??cJSON_CreateIntArray_0:
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   8078         SJMP    ??cJSON_CreateIntArray_2
   2546              }
   2547          
   2548              a = cJSON_CreateArray();
   \                     ??cJSON_CreateIntArray_1:
   \   000029                ; Setup parameters for call to function cJSON_CreateArray
   \   000029   12....       LCALL   ?Subroutine124 & 0xFFFF
   2549          
   2550              for(i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_193:
   \   00002C   606F         JZ      ??CrossCallReturnLabel_30
   \   00002E   800E         SJMP    ??CrossCallReturnLabel_566
   2551              {
   2552                  n = cJSON_CreateNumber(numbers[i]);
   2553                  if (!n)
   2554                  {
   2555                      cJSON_Delete(a);
   2556                      return NULL;
   2557                  }
   2558                  if(!i)
   2559                  {
   2560                      a->child = n;
   2561                  }
   2562                  else
   2563                  {
   2564                      suffix_object(p, n);
   \                     ??cJSON_CreateIntArray_3:
   \   000030                ; Setup parameters for call to function suffix_object
   \   000030   AC..         MOV     R4,?V0 + 2
   \   000032   AD..         MOV     R5,?V0 + 3
   \   000034   AA..         MOV     R2,?V0 + 4
   \   000036   AB..         MOV     R3,?V0 + 5
   \   000038   12....       LCALL   ??suffix_object?relay
   2565                  }
   2566                  p = n;
   \                     ??cJSON_CreateIntArray_4:
   \   00003B   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_566:
   \   00003E   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000041   504E         JNC     ??cJSON_CreateIntArray_5
   \   000043                ; Setup parameters for call to function cJSON_CreateNumber
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   C3           CLR     C
   \   000046   33           RLC     A
   \   000047   F8           MOV     R0,A
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   33           RLC     A
   \   00004B   F9           MOV     R1,A
   \   00004C   E5..         MOV     A,?V0 + 12
   \   00004E   28           ADD     A,R0
   \   00004F   F582         MOV     DPL,A
   \   000051   E5..         MOV     A,?V0 + 13
   \   000053   39           ADDC    A,R1
   \   000054   F583         MOV     DPH,A
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V0 + 8,A
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F5..         MOV     ?V0 + 9,A
   \   00005D   33           RLC     A
   \   00005E   95E0         SUBB    A,0xE0 /* A   */
   \   000060   F5..         MOV     ?V0 + 10,A
   \   000062   F5..         MOV     ?V0 + 11,A
   \   000064   78..         MOV     R0,#?V0 + 8
   \   000066   12....       LCALL   ?L_TO_FLT
   \   000069   AA..         MOV     R2,?V0 + 8
   \   00006B   AB..         MOV     R3,?V0 + 9
   \   00006D   AC..         MOV     R4,?V0 + 10
   \   00006F   AD..         MOV     R5,?V0 + 11
   \   000071   12....       LCALL   ??cJSON_CreateNumber?relay
   \   000074   8A..         MOV     ?V0 + 2,R2
   \   000076   8B..         MOV     ?V0 + 3,R3
   \   000078   EA           MOV     A,R2
   \   000079   45..         ORL     A,?V0 + 3
   \   00007B   7009         JNZ     ??cJSON_CreateIntArray_6
   \   00007D                ; Setup parameters for call to function cJSON_Delete
   \   00007D   EE           MOV     A,R6
   \   00007E   FA           MOV     R2,A
   \   00007F   EF           MOV     A,R7
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   ??cJSON_Delete?relay
   \   000084   809D         SJMP    ??cJSON_CreateIntArray_0
   \                     ??cJSON_CreateIntArray_6:
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   45..         ORL     A,?V0 + 1
   \   00008A   70A4         JNZ     ??cJSON_CreateIntArray_3
   \   00008C   12....       LCALL   ?Subroutine104 & 0xFFFF
   2567              }
   \                     ??CrossCallReturnLabel_579:
   \   00008F   80AA         SJMP    ??cJSON_CreateIntArray_4
   \                     ??cJSON_CreateIntArray_5:
   \   000091   8E82         MOV     DPL,R6
   \   000093   8F83         MOV     DPH,R7
   \   000095   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000098   6003         JZ      ??CrossCallReturnLabel_30
   2568          
   2569              if (a && a->child) {
   2570                  a->child->prev = n;
   \   00009A   12....       LCALL   ?Subroutine27 & 0xFFFF
   2571              }
   2572          
   2573              return a;
   \                     ??CrossCallReturnLabel_30:
   \   00009D   EE           MOV     A,R6
   \   00009E   FA           MOV     R2,A
   \   00009F   EF           MOV     A,R7
   \   0000A0   FB           MOV     R3,A
   \                     ??cJSON_CreateIntArray_2:
   \   0000A1   7F0E         MOV     R7,#0xe
   \   0000A3   02....       LJMP    ?BANKED_LEAVE_XDATA
   2574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   85....       MOV     ?V0 + 4,?V0 + 2
   \   000003   85....       MOV     ?V0 + 5,?V0 + 3
   \   000006                REQUIRE ??Subroutine215_0
   \   000006                ; // Fall through to label ??Subroutine215_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine215_0:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2401         ADD     A,#0x1
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   F5..         MOV     ?V0 + 1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   12....       LCALL   ??cJSON_CreateArray?relay
   \   000003   8A..         MOV     ?V0 + 0,R2
   \   000005   8B..         MOV     ?V0 + 1,R3
   \   000007   AE..         MOV     R6,?V0 + 0
   \   000009   AF..         MOV     R7,?V0 + 1
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   EE           MOV     A,R6
   \   000012   4F           ORL     A,R7
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   C3           CLR     C
   \   000001   E5..         MOV     A,?V0 + 0
   \   000003   95..         SUBB    A,?V0 + 6
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   95..         SUBB    A,?V0 + 7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008                REQUIRE ??Subroutine216_0
   \   000008                ; // Fall through to label ??Subroutine216_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine216_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine217_0
   \   000001                ; // Fall through to label ??Subroutine217_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine217_0:
   \   000000   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_606:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_588:
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 3
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine218_0
   \   000006                ; // Fall through to label ??Subroutine218_0
   2575          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   8A..         MOV     ?V0 + 8,R2
   \   000002   8B..         MOV     ?V0 + 9,R3
   \   000004   8C..         MOV     ?V0 + 6,R4
   \   000006   8D..         MOV     ?V0 + 7,R5
   \   000008   75..00       MOV     ?V0 + 4,#0x0
   \   00000B   75..00       MOV     ?V0 + 5,#0x0
   \   00000E   75..00       MOV     ?V0 + 2,#0x0
   \   000011   75..00       MOV     ?V0 + 3,#0x0
   \   000014                REQUIRE ??Subroutine202_0
   \   000014                ; // Fall through to label ??Subroutine202_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2576          CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count)
   \                     cJSON_CreateFloatArray:
   2577          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine108 & 0xFFFF
   2578              size_t i = 0;
   2579              cJSON *n = NULL;
   2580              cJSON *p = NULL;
   2581              cJSON *a = NULL;
   2582          
   2583              if ((count < 0) || (numbers == NULL))
   \                     ??CrossCallReturnLabel_488:
   \   000008   4005         JC      ??cJSON_CreateFloatArray_0
   \   00000A   EA           MOV     A,R2
   \   00000B   45..         ORL     A,?V0 + 9
   \   00000D   7006         JNZ     ??cJSON_CreateFloatArray_1
   2584              {
   2585                  return NULL;
   \                     ??cJSON_CreateFloatArray_0:
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \   000013   805C         SJMP    ??cJSON_CreateFloatArray_2
   2586              }
   2587          
   2588              a = cJSON_CreateArray();
   \                     ??cJSON_CreateFloatArray_1:
   \   000015                ; Setup parameters for call to function cJSON_CreateArray
   \   000015   12....       LCALL   ?Subroutine124 & 0xFFFF
   2589          
   2590              for(i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_194:
   \   000018   6053         JZ      ??CrossCallReturnLabel_59
   \   00001A   8014         SJMP    ??CrossCallReturnLabel_568
   2591              {
   2592                  n = cJSON_CreateNumber((double)numbers[i]);
   2593                  if(!n)
   2594                  {
   2595                      cJSON_Delete(a);
   2596                      return NULL;
   2597                  }
   2598                  if(!i)
   2599                  {
   2600                      a->child = n;
   2601                  }
   2602                  else
   2603                  {
   2604                      suffix_object(p, n);
   \                     ??cJSON_CreateFloatArray_3:
   \   00001C                ; Setup parameters for call to function suffix_object
   \   00001C   AC..         MOV     R4,?V0 + 4
   \   00001E   AD..         MOV     R5,?V0 + 5
   \   000020   AA..         MOV     R2,?V0 + 2
   \   000022   AB..         MOV     R3,?V0 + 3
   \   000024   12....       LCALL   ??suffix_object?relay
   2605                  }
   2606                  p = n;
   \                     ??cJSON_CreateFloatArray_4:
   \   000027   85....       MOV     ?V0 + 2,?V0 + 4
   \   00002A   85....       MOV     ?V0 + 3,?V0 + 5
   \   00002D   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_568:
   \   000030   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000033   502C         JNC     ??cJSON_CreateFloatArray_5
   \   000035                ; Setup parameters for call to function cJSON_CreateNumber
   \   000035   85....       MOV     ?V0 + 4,?V0 + 0
   \   000038   85....       MOV     ?V0 + 5,?V0 + 1
   \   00003B   7402         MOV     A,#0x2
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?S_SHL
   \   000042   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000045   12....       LCALL   ?XLOAD_R2345
   \   000048   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   00004B   7009         JNZ     ??cJSON_CreateFloatArray_6
   \   00004D                ; Setup parameters for call to function cJSON_Delete
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??cJSON_Delete?relay
   \   000054   80B9         SJMP    ??cJSON_CreateFloatArray_0
   \                     ??cJSON_CreateFloatArray_6:
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   45..         ORL     A,?V0 + 1
   \   00005A   70C0         JNZ     ??cJSON_CreateFloatArray_3
   \   00005C   12....       LCALL   ?Subroutine104 & 0xFFFF
   2607              }
   \                     ??CrossCallReturnLabel_580:
   \   00005F   80C6         SJMP    ??cJSON_CreateFloatArray_4
   \                     ??cJSON_CreateFloatArray_5:
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_476:
   \   000068   6003         JZ      ??CrossCallReturnLabel_59
   2608          
   2609              if (a && a->child) {
   2610                  a->child->prev = n;
   \   00006A   12....       LCALL   ?Subroutine42 & 0xFFFF
   2611              }
   2612          
   2613              return a;
   \                     ??CrossCallReturnLabel_59:
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \                     ??cJSON_CreateFloatArray_2:
   \   000071   80..         SJMP    ?Subroutine5
   2614          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ??cJSON_CreateNumber?relay
   \   000003   8A..         MOV     ?V0 + 4,R2
   \   000005   8B..         MOV     ?V0 + 5,R3
   \   000007   EA           MOV     A,R2
   \   000008   45..         ORL     A,?V0 + 5
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   E5..         MOV     A,?V0 + 8
   \   000002   25..         ADD     A,?V0 + 4
   \   000004   F582         MOV     DPL,A
   \   000006   E5..         MOV     A,?V0 + 9
   \   000008   35..         ADDC    A,?V0 + 5
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_589:
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 4
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 5
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET
   2615          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2616          CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count)
   \                     cJSON_CreateDoubleArray:
   2617          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine108 & 0xFFFF
   2618              size_t i = 0;
   2619              cJSON *n = NULL;
   2620              cJSON *p = NULL;
   2621              cJSON *a = NULL;
   2622          
   2623              if ((count < 0) || (numbers == NULL))
   \                     ??CrossCallReturnLabel_489:
   \   000008   4005         JC      ??cJSON_CreateDoubleArray_0
   \   00000A   EA           MOV     A,R2
   \   00000B   45..         ORL     A,?V0 + 9
   \   00000D   7006         JNZ     ??cJSON_CreateDoubleArray_1
   2624              {
   2625                  return NULL;
   \                     ??cJSON_CreateDoubleArray_0:
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   7B00         MOV     R3,#0x0
   \   000013   805C         SJMP    ??cJSON_CreateDoubleArray_2
   2626              }
   2627          
   2628              a = cJSON_CreateArray();
   \                     ??cJSON_CreateDoubleArray_1:
   \   000015                ; Setup parameters for call to function cJSON_CreateArray
   \   000015   12....       LCALL   ?Subroutine124 & 0xFFFF
   2629          
   2630              for(i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_195:
   \   000018   6053         JZ      ??CrossCallReturnLabel_60
   \   00001A   8014         SJMP    ??CrossCallReturnLabel_569
   2631              {
   2632                  n = cJSON_CreateNumber(numbers[i]);
   2633                  if(!n)
   2634                  {
   2635                      cJSON_Delete(a);
   2636                      return NULL;
   2637                  }
   2638                  if(!i)
   2639                  {
   2640                      a->child = n;
   2641                  }
   2642                  else
   2643                  {
   2644                      suffix_object(p, n);
   \                     ??cJSON_CreateDoubleArray_3:
   \   00001C                ; Setup parameters for call to function suffix_object
   \   00001C   AC..         MOV     R4,?V0 + 4
   \   00001E   AD..         MOV     R5,?V0 + 5
   \   000020   AA..         MOV     R2,?V0 + 2
   \   000022   AB..         MOV     R3,?V0 + 3
   \   000024   12....       LCALL   ??suffix_object?relay
   2645                  }
   2646                  p = n;
   \                     ??cJSON_CreateDoubleArray_4:
   \   000027   85....       MOV     ?V0 + 2,?V0 + 4
   \   00002A   85....       MOV     ?V0 + 3,?V0 + 5
   \   00002D   12....       LCALL   ??Subroutine215_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_569:
   \   000030   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000033   502C         JNC     ??cJSON_CreateDoubleArray_5
   \   000035                ; Setup parameters for call to function cJSON_CreateNumber
   \   000035   85....       MOV     ?V0 + 4,?V0 + 0
   \   000038   85....       MOV     ?V0 + 5,?V0 + 1
   \   00003B   7402         MOV     A,#0x2
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?S_SHL
   \   000042   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000045   12....       LCALL   ?XLOAD_R2345
   \   000048   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00004B   7009         JNZ     ??cJSON_CreateDoubleArray_6
   \   00004D                ; Setup parameters for call to function cJSON_Delete
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??cJSON_Delete?relay
   \   000054   80B9         SJMP    ??cJSON_CreateDoubleArray_0
   \                     ??cJSON_CreateDoubleArray_6:
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   45..         ORL     A,?V0 + 1
   \   00005A   70C0         JNZ     ??cJSON_CreateDoubleArray_3
   \   00005C   12....       LCALL   ?Subroutine104 & 0xFFFF
   2647              }
   \                     ??CrossCallReturnLabel_581:
   \   00005F   80C6         SJMP    ??cJSON_CreateDoubleArray_4
   \                     ??cJSON_CreateDoubleArray_5:
   \   000061   8E82         MOV     DPL,R6
   \   000063   8F83         MOV     DPH,R7
   \   000065   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_477:
   \   000068   6003         JZ      ??CrossCallReturnLabel_60
   2648          
   2649              if (a && a->child) {
   2650                  a->child->prev = n;
   \   00006A   12....       LCALL   ?Subroutine42 & 0xFFFF
   2651              }
   2652          
   2653              return a;
   \                     ??CrossCallReturnLabel_60:
   \   00006D   EE           MOV     A,R6
   \   00006E   FA           MOV     R2,A
   \   00006F   EF           MOV     A,R7
   \   000070   FB           MOV     R3,A
   \                     ??cJSON_CreateDoubleArray_2:
   \   000071                REQUIRE ?Subroutine5
   \   000071                ; // Fall through to label ?Subroutine5
   2654          }
   2655          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2656          CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count)
   \                     cJSON_CreateStringArray:
   2657          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 8,R2
   \   000007   8B..         MOV     ?V0 + 9,R3
   \   000009   8C..         MOV     ?V0 + 6,R4
   \   00000B   8D..         MOV     ?V0 + 7,R5
   2658              size_t i = 0;
   2659              cJSON *n = NULL;
   \   00000D   75..00       MOV     ?V0 + 2,#0x0
   \   000010   75..00       MOV     ?V0 + 3,#0x0
   2660              cJSON *p = NULL;
   \   000013   75..00       MOV     ?V0 + 4,#0x0
   \   000016   75..00       MOV     ?V0 + 5,#0x0
   2661              cJSON *a = NULL;
   2662          
   2663              if ((count < 0) || (strings == NULL))
   \   000019   12....       LCALL   ??Subroutine202_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_498:
   \   00001C   4005         JC      ??cJSON_CreateStringArray_0
   \   00001E   EA           MOV     A,R2
   \   00001F   45..         ORL     A,?V0 + 9
   \   000021   7006         JNZ     ??cJSON_CreateStringArray_1
   2664              {
   2665                  return NULL;
   \                     ??cJSON_CreateStringArray_0:
   \   000023   7A00         MOV     R2,#0x0
   \   000025   7B00         MOV     R3,#0x0
   \   000027   8059         SJMP    ??cJSON_CreateStringArray_2
   2666              }
   2667          
   2668              a = cJSON_CreateArray();
   \                     ??cJSON_CreateStringArray_1:
   \   000029                ; Setup parameters for call to function cJSON_CreateArray
   \   000029   12....       LCALL   ?Subroutine124 & 0xFFFF
   2669          
   2670              for (i = 0; a && (i < (size_t)count); i++)
   \                     ??CrossCallReturnLabel_196:
   \   00002C   6050         JZ      ??CrossCallReturnLabel_31
   \   00002E   800E         SJMP    ??CrossCallReturnLabel_567
   2671              {
   2672                  n = cJSON_CreateString(strings[i]);
   2673                  if(!n)
   2674                  {
   2675                      cJSON_Delete(a);
   2676                      return NULL;
   2677                  }
   2678                  if(!i)
   2679                  {
   2680                      a->child = n;
   2681                  }
   2682                  else
   2683                  {
   2684                      suffix_object(p,n);
   \                     ??cJSON_CreateStringArray_3:
   \   000030                ; Setup parameters for call to function suffix_object
   \   000030   AC..         MOV     R4,?V0 + 2
   \   000032   AD..         MOV     R5,?V0 + 3
   \   000034   AA..         MOV     R2,?V0 + 4
   \   000036   AB..         MOV     R3,?V0 + 5
   \   000038   12....       LCALL   ??suffix_object?relay
   2685                  }
   2686                  p = n;
   \                     ??cJSON_CreateStringArray_4:
   \   00003B   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_567:
   \   00003E   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000041   502F         JNC     ??cJSON_CreateStringArray_5
   \   000043                ; Setup parameters for call to function cJSON_CreateString
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   C3           CLR     C
   \   000046   33           RLC     A
   \   000047   F8           MOV     R0,A
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   33           RLC     A
   \   00004B   F9           MOV     R1,A
   \   00004C   E5..         MOV     A,?V0 + 8
   \   00004E   28           ADD     A,R0
   \   00004F   F582         MOV     DPL,A
   \   000051   E5..         MOV     A,?V0 + 9
   \   000053   39           ADDC    A,R1
   \   000054   F583         MOV     DPH,A
   \   000056   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000059   EA           MOV     A,R2
   \   00005A   45..         ORL     A,?V0 + 3
   \   00005C   7009         JNZ     ??cJSON_CreateStringArray_6
   \   00005E                ; Setup parameters for call to function cJSON_Delete
   \   00005E   EE           MOV     A,R6
   \   00005F   FA           MOV     R2,A
   \   000060   EF           MOV     A,R7
   \   000061   FB           MOV     R3,A
   \   000062   12....       LCALL   ??cJSON_Delete?relay
   \   000065   80BC         SJMP    ??cJSON_CreateStringArray_0
   \                     ??cJSON_CreateStringArray_6:
   \   000067   E5..         MOV     A,?V0 + 0
   \   000069   45..         ORL     A,?V0 + 1
   \   00006B   70C3         JNZ     ??cJSON_CreateStringArray_3
   \   00006D   12....       LCALL   ?Subroutine104 & 0xFFFF
   2687              }
   \                     ??CrossCallReturnLabel_582:
   \   000070   80C9         SJMP    ??cJSON_CreateStringArray_4
   \                     ??cJSON_CreateStringArray_5:
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_478:
   \   000079   6003         JZ      ??CrossCallReturnLabel_31
   2688          
   2689              if (a && a->child) {
   2690                  a->child->prev = n;
   \   00007B   12....       LCALL   ?Subroutine27 & 0xFFFF
   2691              }
   2692              
   2693              return a;
   \                     ??CrossCallReturnLabel_31:
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   FB           MOV     R3,A
   \                     ??cJSON_CreateStringArray_2:
   \   000082   02....       LJMP    ?Subroutine5 & 0xFFFF
   2694          }
   2695          
   2696          /* Duplication */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2697          CJSON_PUBLIC(cJSON *) cJSON_Duplicate(const cJSON *item, cJSON_bool recurse)
   \                     cJSON_Duplicate:
   2698          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 8,R4
   \   00000B   8D..         MOV     ?V0 + 9,R5
   2699              cJSON *newitem = NULL;
   2700              cJSON *child = NULL;
   2701              cJSON *next = NULL;
   \   00000D   75..00       MOV     ?V0 + 4,#0x0
   \   000010   75..00       MOV     ?V0 + 5,#0x0
   2702              cJSON *newchild = NULL;
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   75..00       MOV     ?V0 + 3,#0x0
   2703          
   2704              /* Bail on bad ptr */
   2705              if (!item)
   \   000019   EA           MOV     A,R2
   \   00001A   45..         ORL     A,?V0 + 1
   \   00001C   7003         JNZ     $+5
   \   00001E   02....       LJMP    ??cJSON_Duplicate_0 & 0xFFFF
   2706              {
   2707                  goto fail;
   2708              }
   2709              /* Create new item */
   2710              newitem = cJSON_New_Item(&global_hooks);
   \   000021                ; Setup parameters for call to function cJSON_New_Item
   \   000021   7A..         MOV     R2,#global_hooks & 0xff
   \   000023   7B..         MOV     R3,#(global_hooks >> 8) & 0xff
   \   000025   12....       LCALL   ??cJSON_New_Item?relay
   \   000028   8A..         MOV     ?V0 + 6,R2
   \   00002A   8B..         MOV     ?V0 + 7,R3
   \   00002C   AE..         MOV     R6,?V0 + 6
   \   00002E   AF..         MOV     R7,?V0 + 7
   2711              if (!newitem)
   \   000030   EE           MOV     A,R6
   \   000031   4F           ORL     A,R7
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??cJSON_Duplicate_0 & 0xFFFF
   2712              {
   2713                  goto fail;
   2714              }
   2715              /* Copy over all vars */
   2716              newitem->type = item->type & (~cJSON_IsReference);
   \   000037   85..82       MOV     DPL,?V0 + 0
   \   00003A   85..83       MOV     DPH,?V0 + 1
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   54FE         ANL     A,#0xfe
   \   000049   F9           MOV     R1,A
   \   00004A   8E82         MOV     DPL,R6
   \   00004C   8F83         MOV     DPH,R7
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   2717              newitem->valueint = item->valueint;
   \                     ??CrossCallReturnLabel_435:
   \   000053   85..82       MOV     DPL,?V0 + 0
   \   000056   85..83       MOV     DPH,?V0 + 1
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   12....       LCALL   ??Subroutine192_0 & 0xFFFF
   2718              newitem->valuedouble = item->valuedouble;
   \                     ??CrossCallReturnLabel_436:
   \   000065   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000068   12....       LCALL   ?XLOAD_R2345
   \   00006B   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   00006E   12....       LCALL   ?XSTORE_R2345
   2719              if (item->valuestring)
   \   000071   85..82       MOV     DPL,?V0 + 0
   \   000074   85..83       MOV     DPH,?V0 + 1
   \   000077   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_483:
   \   00007A   6036         JZ      ??cJSON_Duplicate_1
   2720              {
   2721                  newitem->valuestring = (char*)cJSON_strdup((unsigned char*)item->valuestring, &global_hooks);
   \   00007C   EE           MOV     A,R6
   \   00007D   2408         ADD     A,#0x8
   \   00007F   F5..         MOV     ?V0 + 6,A
   \   000081   EF           MOV     A,R7
   \   000082   3400         ADDC    A,#0x0
   \   000084   F5..         MOV     ?V0 + 7,A
   \   000086                ; Setup parameters for call to function cJSON_strdup
   \   000086   7C..         MOV     R4,#global_hooks & 0xff
   \   000088   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   00008A   85..82       MOV     DPL,?V0 + 0
   \   00008D   85..83       MOV     DPH,?V0 + 1
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   A3           INC     DPTR
   \   000097   A3           INC     DPTR
   \   000098   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00009B   85..82       MOV     DPL,?V0 + 6
   \   00009E   85..83       MOV     DPH,?V0 + 7
   \   0000A1   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   2722                  if (!newitem->valuestring)
   \                     ??CrossCallReturnLabel_576:
   \   0000A4   85..82       MOV     DPL,?V0 + 6
   \   0000A7   85..83       MOV     DPH,?V0 + 7
   \   0000AA   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   2723                  {
   2724                      goto fail;
   2725                  }
   2726              }
   \                     ??CrossCallReturnLabel_467:
   \   0000AD   7003         JNZ     $+5
   \   0000AF   02....       LJMP    ??cJSON_Duplicate_2 & 0xFFFF
   2727              if (item->string)
   \                     ??cJSON_Duplicate_1:
   \   0000B2   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   0000B5   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_468:
   \   0000B8   603B         JZ      ??cJSON_Duplicate_3
   2728              {
   2729                  newitem->string = (item->type&cJSON_StringIsConst) ? item->string : (char*)cJSON_strdup((unsigned char*)item->string, &global_hooks);
   \   0000BA   85..82       MOV     DPL,?V0 + 0
   \   0000BD   85..83       MOV     DPH,?V0 + 1
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   A3           INC     DPTR
   \   0000C3   A3           INC     DPTR
   \   0000C4   A3           INC     DPTR
   \   0000C5   A3           INC     DPTR
   \   0000C6   A3           INC     DPTR
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   5402         ANL     A,#0x2
   \   0000CA   7012         JNZ     ??cJSON_Duplicate_4
   \   0000CC                ; Setup parameters for call to function cJSON_strdup
   \   0000CC   7C..         MOV     R4,#global_hooks & 0xff
   \   0000CE   7D..         MOV     R5,#(global_hooks >> 8) & 0xff
   \   0000D0   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   0000D3   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   0000D6   8A..         MOV     ?V0 + 6,R2
   \   0000D8   8B..         MOV     ?V0 + 7,R3
   \   0000DA   A8..         MOV     R0,?V0 + 6
   \   0000DC   A9..         MOV     R1,?V0 + 7
   \                     ??cJSON_Duplicate_4:
   \   0000DE   EE           MOV     A,R6
   \   0000DF   2410         ADD     A,#0x10
   \   0000E1   FA           MOV     R2,A
   \   0000E2   EF           MOV     A,R7
   \   0000E3   3400         ADDC    A,#0x0
   \   0000E5   FB           MOV     R3,A
   \   0000E6   8A82         MOV     DPL,R2
   \   0000E8   8B83         MOV     DPH,R3
   \   0000EA   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2730                  if (!newitem->string)
   \                     ??CrossCallReturnLabel_425:
   \   0000ED   8A82         MOV     DPL,R2
   \   0000EF   8B83         MOV     DPH,R3
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   49           ORL     A,R1
   \   0000F3   606E         JZ      ??cJSON_Duplicate_2
   2731                  {
   2732                      goto fail;
   2733                  }
   2734              }
   2735              /* If non-recursive, then we're done! */
   2736              if (!recurse)
   \                     ??cJSON_Duplicate_3:
   \   0000F5   E5..         MOV     A,?V0 + 8
   \   0000F7   45..         ORL     A,?V0 + 9
   \   0000F9   7006         JNZ     ??cJSON_Duplicate_5
   2737              {
   2738                  return newitem;
   \                     ??cJSON_Duplicate_6:
   \   0000FB   EE           MOV     A,R6
   \   0000FC   FA           MOV     R2,A
   \   0000FD   EF           MOV     A,R7
   \   0000FE   FB           MOV     R3,A
   \   0000FF   806D         SJMP    ??cJSON_Duplicate_7
   2739              }
   2740              /* Walk the ->next chain for the child. */
   2741              child = item->child;
   \                     ??cJSON_Duplicate_5:
   \   000101   85..82       MOV     DPL,?V0 + 0
   \   000104   85..83       MOV     DPH,?V0 + 1
   \   000107   A3           INC     DPTR
   \   000108   A3           INC     DPTR
   \   000109   A3           INC     DPTR
   \   00010A   A3           INC     DPTR
   \   00010B   800D         SJMP    ??cJSON_Duplicate_8
   2742              while (child != NULL)
   2743              {
   2744                  newchild = cJSON_Duplicate(child, true); /* Duplicate (with recurse) each item in the ->next chain */
   2745                  if (!newchild)
   2746                  {
   2747                      goto fail;
   2748                  }
   2749                  if (next != NULL)
   2750                  {
   2751                      /* If newitem->child already set, then crosswire ->prev and ->next and move on */
   2752                      next->next = newchild;
   2753                      newchild->prev = next;
   2754                      next = newchild;
   2755                  }
   2756                  else
   2757                  {
   2758                      /* Set newitem->child and move to it */
   2759                      newitem->child = newchild;
   \                     ??cJSON_Duplicate_9:
   \   00010D   12....       LCALL   ?Subroutine104 & 0xFFFF
   2760                      next = newchild;
   \                     ??CrossCallReturnLabel_583:
   \   000110   8A..         MOV     ?V0 + 4,R2
   \   000112   F5..         MOV     ?V0 + 5,A
   2761                  }
   2762                  child = child->next;
   \                     ??cJSON_Duplicate_10:
   \   000114   85..82       MOV     DPL,?V0 + 0
   \   000117   85..83       MOV     DPH,?V0 + 1
   \                     ??cJSON_Duplicate_8:
   \   00011A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   00011D   6036         JZ      ??cJSON_Duplicate_11
   \   00011F                ; Setup parameters for call to function cJSON_Duplicate
   \   00011F   7C01         MOV     R4,#0x1
   \   000121   7D00         MOV     R5,#0x0
   \   000123   AA..         MOV     R2,?V0 + 0
   \   000125   AB..         MOV     R3,?V0 + 1
   \   000127   12....       LCALL   ??cJSON_Duplicate?relay
   \   00012A   8A..         MOV     ?V0 + 2,R2
   \   00012C   8B..         MOV     ?V0 + 3,R3
   \   00012E   EA           MOV     A,R2
   \   00012F   45..         ORL     A,?V0 + 3
   \   000131   6030         JZ      ??cJSON_Duplicate_2
   \   000133   E5..         MOV     A,?V0 + 4
   \   000135   45..         ORL     A,?V0 + 5
   \   000137   60D4         JZ      ??cJSON_Duplicate_9
   \   000139   85..82       MOV     DPL,?V0 + 4
   \   00013C   85..83       MOV     DPH,?V0 + 5
   \   00013F   12....       LCALL   ??Subroutine219_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_577:
   \   000142   8A82         MOV     DPL,R2
   \   000144   F583         MOV     DPH,A
   \   000146   A3           INC     DPTR
   \   000147   A3           INC     DPTR
   \   000148   E5..         MOV     A,?V0 + 4
   \   00014A   F0           MOVX    @DPTR,A
   \   00014B   A3           INC     DPTR
   \   00014C   E5..         MOV     A,?V0 + 5
   \   00014E   F0           MOVX    @DPTR,A
   \   00014F   8A..         MOV     ?V0 + 4,R2
   \   000151   8B..         MOV     ?V0 + 5,R3
   \   000153   80BF         SJMP    ??cJSON_Duplicate_10
   2763              }
   \                     ??cJSON_Duplicate_11:
   \   000155   8E82         MOV     DPL,R6
   \   000157   8F83         MOV     DPH,R7
   \   000159   12....       LCALL   ??Subroutine198_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_479:
   \   00015C   609D         JZ      ??cJSON_Duplicate_6
   2764              if (newitem && newitem->child)
   2765              {
   2766                  newitem->child->prev = newchild;
   \   00015E   12....       LCALL   ?Subroutine27 & 0xFFFF
   2767              }
   \                     ??CrossCallReturnLabel_32:
   \   000161   8098         SJMP    ??cJSON_Duplicate_6
   2768          
   2769              return newitem;
   2770          
   2771          fail:
   2772              if (newitem != NULL)
   2773              {
   2774                  cJSON_Delete(newitem);
   \                     ??cJSON_Duplicate_2:
   \   000163                ; Setup parameters for call to function cJSON_Delete
   \   000163   EE           MOV     A,R6
   \   000164   FA           MOV     R2,A
   \   000165   EF           MOV     A,R7
   \   000166   FB           MOV     R3,A
   \   000167   12....       LCALL   ??cJSON_Delete?relay
   2775              }
   2776          
   2777              return NULL;
   \                     ??cJSON_Duplicate_0:
   \   00016A   7A00         MOV     R2,#0x0
   \   00016C   7B00         MOV     R3,#0x0
   \                     ??cJSON_Duplicate_7:
   \   00016E   02....       LJMP    ?Subroutine6 & 0xFFFF
   2778          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ??Subroutine211_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_537:
   \   000003   12....       LCALL   ??cJSON_strdup?relay
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_521:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   45..         ORL     A,?V0 + 1
   \   000007   22           RET
   2779          
   2780          static void skip_oneline_comment(char **input)
   2781          {
   2782              *input += static_strlen("//");
   2783          
   2784              for (; (*input)[0] != '\0'; ++(*input))
   2785              {
   2786                  if ((*input)[0] == '\n') {
   2787                      *input += static_strlen("\n");
   2788                      return;
   2789                  }
   2790              }
   2791          }
   2792          
   2793          static void skip_multiline_comment(char **input)
   2794          {
   2795              *input += static_strlen("/*");
   2796          
   2797              for (; (*input)[0] != '\0'; ++(*input))
   2798              {
   2799                  if (((*input)[0] == '*') && ((*input)[1] == '/'))
   2800                  {
   2801                      *input += static_strlen("*/");
   2802                      return;
   2803                  }
   2804              }
   2805          }
   2806          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2807          static void minify_string(char **input, char **output) {
   \                     minify_string:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2808              (*output)[0] = (*input)[0];
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_597:
   \   00000C   C0E0         PUSH    A
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000015   D0E0         POP     A
   \   000017   803C         SJMP    ??minify_string_0
   2809              *input += static_strlen("\"");
   2810              *output += static_strlen("\"");
   2811          
   2812          
   2813              for (; (*input)[0] != '\0'; (void)++(*input), ++(*output)) {
   2814                  (*output)[0] = (*input)[0];
   2815          
   2816                  if ((*input)[0] == '\"') {
   2817                      (*output)[0] = '\"';
   2818                      *input += static_strlen("\"");
   2819                      *output += static_strlen("\"");
   2820                      return;
   2821                  } else if (((*input)[0] == '\\') && ((*input)[1] == '\"')) {
   \                     ??minify_string_1:
   \   000019   8A82         MOV     DPL,R2
   \   00001B   8B83         MOV     DPH,R3
   \   00001D   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_592:
   \   000020   645C         XRL     A,#0x5c
   \   000022   7032         JNZ     ??minify_string_2
   \   000024   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_585:
   \   000027   6422         XRL     A,#0x22
   \   000029   702B         JNZ     ??minify_string_2
   2822                      (*output)[1] = (*input)[1];
   \   00002B   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_586:
   \   00002E   C0E0         PUSH    A
   \   000030   8C82         MOV     DPL,R4
   \   000032   8D83         MOV     DPH,R5
   \   000034   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000037   D0E0         POP     A
   \   000039   12....       LCALL   ?Subroutine102 & 0xFFFF
   2823                      *input += static_strlen("\"");
   \                     ??CrossCallReturnLabel_162:
   \   00003C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00003F   8A82         MOV     DPL,R2
   \   000041   8B83         MOV     DPH,R3
   \   000043   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2824                      *output += static_strlen("\"");
   \                     ??CrossCallReturnLabel_426:
   \   000046   8C82         MOV     DPL,R4
   \   000048   8D83         MOV     DPH,R5
   \   00004A   12....       LCALL   ?Subroutine33 & 0xFFFF
   2825                  }
   \                     ??CrossCallReturnLabel_43:
   \   00004D   8C82         MOV     DPL,R4
   \   00004F   8D83         MOV     DPH,R5
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   \   000054   E9           MOV     A,R1
   \                     ??minify_string_0:
   \   000055   F0           MOVX    @DPTR,A
   \                     ??minify_string_2:
   \   000056   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_598:
   \   000060   6029         JZ      ??CrossCallReturnLabel_0
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_593:
   \   000069   C0E0         PUSH    A
   \   00006B   8C82         MOV     DPL,R4
   \   00006D   8D83         MOV     DPH,R5
   \   00006F   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000072   D0E0         POP     A
   \   000074   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000077   12....       LCALL   ??Subroutine222_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_599:
   \   00007A   6422         XRL     A,#0x22
   \   00007C   709B         JNZ     ??minify_string_1
   \   00007E   8C82         MOV     DPL,R4
   \   000080   8D83         MOV     DPH,R5
   \   000082   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   000085   7422         MOV     A,#0x22
   \   000087   F0           MOVX    @DPTR,A
   \   000088   12....       LCALL   ?Subroutine16 & 0xFFFF
   2826              }
   \                     ??CrossCallReturnLabel_0:
   \   00008B   02....       LJMP    ??Subroutine186_0 & 0xFFFF
   2827          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine220_0
   \   000004                ; // Fall through to label ??Subroutine220_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine220_0:
   \   000000   12....       LCALL   ??Subroutine216_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_590:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine222_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002                REQUIRE ??Subroutine223_0
   \   000002                ; // Fall through to label ??Subroutine223_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine223_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine224_0
   \   000001                ; // Fall through to label ??Subroutine224_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine224_0:
   \   000000   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_607:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   E8           MOV     A,R0
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F   F0           MOVX    @DPTR,A
   \   000010   8C82         MOV     DPL,R4
   \   000012   8D83         MOV     DPH,R5
   \   000014   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   E8           MOV     A,R0
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   E9           MOV     A,R1
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   22           RET
   2828          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   08           INC     R0
   \   000001   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000004   E8           MOV     A,R0
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E9           MOV     A,R1
   \   000008   F0           MOVX    @DPTR,A
   \   000009                REQUIRE ??Subroutine221_0
   \   000009                ; // Fall through to label ??Subroutine221_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine221_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine222_0
   \   000006                ; // Fall through to label ??Subroutine222_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2829          CJSON_PUBLIC(void) cJSON_Minify(char *json)
   \                     cJSON_Minify:
   2830          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 4
   \   000004   74FC         MOV     A,#-0x4
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   12....       LCALL   ?Subroutine103 & 0xFFFF
   2831              char *into = json;
   \                     ??CrossCallReturnLabel_285:
   \   00000C   12....       LCALL   ??Subroutine226_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_614:
   \   00000F   7402         MOV     A,#0x2
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2832          
   2833              if (json == NULL)
   \                     ??CrossCallReturnLabel_427:
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   12....       LCALL   ??Subroutine200_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_469:
   \   000020   7013         JNZ     ??CrossCallReturnLabel_428
   \   000022   02....       LJMP    ??CrossCallReturnLabel_94 & 0xFFFF
   2834              {
   2835                  return;
   2836              }
   2837          
   2838              while (json[0] != '\0')
   2839              {
   2840                  switch (json[0])
   2841                  {
   2842                      case ' ':
   2843                      case '\t':
   2844                      case '\r':
   2845                      case '\n':
   2846                          json++;
   \                     ??cJSON_Minify_0:
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   2401         ADD     A,#0x1
   \   00002E   F8           MOV     R0,A
   \                     ??cJSON_Minify_1:
   \   00002F   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000032   12....       LCALL   ??Subroutine195_0 & 0xFFFF
   2847                          break;
   \                     ??CrossCallReturnLabel_428:
   \   000035   12....       LCALL   ??Subroutine221_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_600:
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??cJSON_Minify_2 & 0xFFFF
   \   00003D   85..82       MOV     DPL,?XSP + 0
   \   000040   85..83       MOV     DPH,?XSP + 1
   \   000043   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_594:
   \   000046   24F7         ADD     A,#-0x9
   \   000048   60DB         JZ      ??cJSON_Minify_0
   \   00004A   14           DEC     A
   \   00004B   60D8         JZ      ??cJSON_Minify_0
   \   00004D   24FD         ADD     A,#-0x3
   \   00004F   60D4         JZ      ??cJSON_Minify_0
   \   000051   24ED         ADD     A,#-0x13
   \   000053   60D0         JZ      ??cJSON_Minify_0
   \   000055   24FE         ADD     A,#-0x2
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??cJSON_Minify_3 & 0xFFFF
   \   00005C   24F3         ADD     A,#-0xd
   \   00005E   85..82       MOV     DPL,?XSP + 0
   \   000061   85..83       MOV     DPH,?XSP + 1
   \   000064   A3           INC     DPTR
   \   000065   6003         JZ      $+5
   \   000067   02....       LJMP    ??cJSON_Minify_4 & 0xFFFF
   2848          
   2849                      case '/':
   2850                          if (json[1] == '/')
   \   00006A   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   00006D   85..82       MOV     DPL,?XSP + 0
   \   000070   85..83       MOV     DPH,?XSP + 1
   \   000073   7021         JNZ     ??cJSON_Minify_5
   2851                          {
   2852                              skip_oneline_comment(&json);
   \   000075   E0           MOVX    A,@DPTR
   \   000076   2402         ADD     A,#0x2
   \   000078   08           INC     R0
   \                     ??cJSON_Minify_6:
   \   000079   12....       LCALL   ?Subroutine19 & 0xFFFF
   2853                          }
   \                     ??CrossCallReturnLabel_601:
   \   00007C   60B7         JZ      ??CrossCallReturnLabel_428
   \   00007E   85..82       MOV     DPL,?XSP + 0
   \   000081   85..83       MOV     DPH,?XSP + 1
   \   000084   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_595:
   \   000087   640A         XRL     A,#0xa
   \   000089   609A         JZ      ??cJSON_Minify_0
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   2401         ADD     A,#0x1
   \   000094   80E3         SJMP    ??cJSON_Minify_6
   2854                          else if (json[1] == '*')
   \                     ??cJSON_Minify_5:
   \   000096   12....       LCALL   ??Subroutine220_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_584:
   \   000099   642A         XRL     A,#0x2a
   \   00009B   7088         JNZ     ??cJSON_Minify_0
   2855                          {
   2856                              skip_multiline_comment(&json);
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   2402         ADD     A,#0x2
   \   0000A6   08           INC     R0
   \   0000A7   8009         SJMP    ??cJSON_Minify_7
   2857                          } else {
   \                     ??cJSON_Minify_8:
   \   0000A9   85..82       MOV     DPL,?XSP + 0
   \   0000AC   85..83       MOV     DPH,?XSP + 1
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   2401         ADD     A,#0x1
   \                     ??cJSON_Minify_7:
   \   0000B2   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_602:
   \   0000B5   7003         JNZ     $+5
   \   0000B7   02....       LJMP    ??CrossCallReturnLabel_428 & 0xFFFF
   \   0000BA   85..82       MOV     DPL,?XSP + 0
   \   0000BD   85..83       MOV     DPH,?XSP + 1
   \   0000C0   12....       LCALL   ??Subroutine223_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_596:
   \   0000C3   642A         XRL     A,#0x2a
   \   0000C5   70E2         JNZ     ??cJSON_Minify_8
   \   0000C7   85..82       MOV     DPL,?XSP + 0
   \   0000CA   85..83       MOV     DPH,?XSP + 1
   \   0000CD   A3           INC     DPTR
   \   0000CE   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0000D1   70D6         JNZ     ??cJSON_Minify_8
   \   0000D3   85..82       MOV     DPL,?XSP + 0
   \   0000D6   85..83       MOV     DPH,?XSP + 1
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   2402         ADD     A,#0x2
   \   0000DC   08           INC     R0
   \   0000DD   08           INC     R0
   \   0000DE   02....       LJMP    ??cJSON_Minify_1 & 0xFFFF
   2858                              json++;
   2859                          }
   2860                          break;
   2861          
   2862                      case '\"':
   2863                          minify_string(&json, (char**)&into);
   \                     ??cJSON_Minify_3:
   \   0000E1                ; Setup parameters for call to function minify_string
   \   0000E1   7402         MOV     A,#0x2
   \   0000E3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E6   AC82         MOV     R4,DPL
   \   0000E8   AD83         MOV     R5,DPH
   \   0000EA   85..82       MOV     DPL,?XSP + 0
   \   0000ED   85..83       MOV     DPH,?XSP + 1
   \   0000F0   AA82         MOV     R2,DPL
   \   0000F2   AB83         MOV     R3,DPH
   \   0000F4   12....       LCALL   ??minify_string?relay
   2864                          break;
   \   0000F7   02....       LJMP    ??CrossCallReturnLabel_428 & 0xFFFF
   2865          
   2866                      default:
   2867                          into[0] = json[0];
   \                     ??cJSON_Minify_4:
   \   0000FA   12....       LCALL   ??Subroutine224_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_591:
   \   0000FD   C0E0         PUSH    A
   \   0000FF   7402         MOV     A,#0x2
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_265:
   \   000107   D0E0         POP     A
   \   000109   12....       LCALL   ?Subroutine32 & 0xFFFF
   2868                          json++;
   2869                          into++;
   \                     ??CrossCallReturnLabel_37:
   \   00010C   7402         MOV     A,#0x2
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   12....       LCALL   ?Subroutine33 & 0xFFFF
   2870                  }
   2871              }
   \                     ??CrossCallReturnLabel_44:
   \   000114   7402         MOV     A,#0x2
   \   000116   12....       LCALL   ?XSTACK_DISP0_8
   \   000119   02....       LJMP    ??CrossCallReturnLabel_211 & 0xFFFF
   2872          
   2873              /* and null-terminate. */
   2874              *into = '\0';
   \                     ??cJSON_Minify_2:
   \   00011C   7402         MOV     A,#0x2
   \   00011E   12....       LCALL   ?XSTACK_DISP0_8
   \   000121   12....       LCALL   ?Subroutine62 & 0xFFFF
   2875          }
   \                     ??CrossCallReturnLabel_94:
   \   000124   7404         MOV     A,#0x4
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   02....       LJMP    ??Subroutine204_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   85..82       MOV     DPL,?XSP + 0
   \   000008   85..83       MOV     DPH,?XSP + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   12....       LCALL   ??Subroutine217_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_587:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   642F         XRL     A,#0x2f
   \   000006   22           RET
   2876          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2877          CJSON_PUBLIC(cJSON_bool) cJSON_IsInvalid(const cJSON * const item)
   \                     cJSON_IsInvalid:
   2878          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2879              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsInvalid_0
   2880              {
   2881                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   8018         SJMP    ??cJSON_IsInvalid_1
   2882              }
   2883          
   2884              return (item->type & 0xFF) == cJSON_Invalid;
   \                     ??cJSON_IsInvalid_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7004         JNZ     ??cJSON_IsInvalid_2
   \   000019   D2F0         SETB    B.0
   \   00001B   8002         SJMP    ??cJSON_IsInvalid_3
   \                     ??cJSON_IsInvalid_2:
   \   00001D   C2F0         CLR     B.0
   \                     ??cJSON_IsInvalid_3:
   \   00001F   A2F0         MOV     C,B.0
   \   000021   E4           CLR     A
   \   000022   33           RLC     A
   \   000023   FA           MOV     R2,A
   \                     ??cJSON_IsInvalid_1:
   \   000024   02....       LJMP    ?Subroutine9 & 0xFFFF
   2885          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   02....       LJMP    ??Subroutine204_0 & 0xFFFF
   2886          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2887          CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item)
   \                     cJSON_IsFalse:
   2888          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2889              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsFalse_0
   2890              {
   2891                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsFalse_1
   2892              }
   2893          
   2894              return (item->type & 0xFF) == cJSON_False;
   \                     ??cJSON_IsFalse_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6401         XRL     A,#0x1
   \   000019   7004         JNZ     ??cJSON_IsFalse_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsFalse_3
   \                     ??cJSON_IsFalse_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsFalse_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsFalse_1:
   \   000026   02....       LJMP    ?Subroutine9 & 0xFFFF
   2895          }
   2896          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2897          CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item)
   \                     cJSON_IsTrue:
   2898          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2899              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsTrue_0
   2900              {
   2901                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsTrue_1
   2902              }
   2903          
   2904              return (item->type & 0xff) == cJSON_True;
   \                     ??cJSON_IsTrue_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6402         XRL     A,#0x2
   \   000019   7004         JNZ     ??cJSON_IsTrue_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsTrue_3
   \                     ??cJSON_IsTrue_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsTrue_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsTrue_1:
   \   000026   80..         SJMP    ?Subroutine9
   2905          }
   2906          
   2907          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2908          CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item)
   \                     cJSON_IsBool:
   2909          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2910              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsBool_0
   2911              {
   2912                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsBool_1
   2913              }
   2914          
   2915              return (item->type & (cJSON_True | cJSON_False)) != 0;
   \                     ??cJSON_IsBool_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   5403         ANL     A,#0x3
   \   000019   6004         JZ      ??cJSON_IsBool_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsBool_3
   \                     ??cJSON_IsBool_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsBool_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsBool_1:
   \   000026   80..         SJMP    ?Subroutine9
   2916          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2917          CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item)
   \                     cJSON_IsNull:
   2918          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2919              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsNull_0
   2920              {
   2921                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsNull_1
   2922              }
   2923          
   2924              return (item->type & 0xFF) == cJSON_NULL;
   \                     ??cJSON_IsNull_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6404         XRL     A,#0x4
   \   000019   7004         JNZ     ??cJSON_IsNull_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsNull_3
   \                     ??cJSON_IsNull_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsNull_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsNull_1:
   \   000026   80..         SJMP    ?Subroutine9
   2925          }
   2926          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2927          CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item)
   \                     cJSON_IsNumber:
   2928          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2929              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsNumber_0
   2930              {
   2931                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsNumber_1
   2932              }
   2933          
   2934              return (item->type & 0xFF) == cJSON_Number;
   \                     ??cJSON_IsNumber_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6408         XRL     A,#0x8
   \   000019   7004         JNZ     ??cJSON_IsNumber_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsNumber_3
   \                     ??cJSON_IsNumber_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsNumber_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsNumber_1:
   \   000026                REQUIRE ?Subroutine9
   \   000026                ; // Fall through to label ?Subroutine9
   2935          }
   2936          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2937          CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
   \                     cJSON_IsString:
   2938          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2939              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsString_0
   2940              {
   2941                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsString_1
   2942              }
   2943          
   2944              return (item->type & 0xFF) == cJSON_String;
   \                     ??cJSON_IsString_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6410         XRL     A,#0x10
   \   000019   7004         JNZ     ??cJSON_IsString_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsString_3
   \                     ??cJSON_IsString_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsString_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsString_1:
   \   000026   80..         SJMP    ?Subroutine9
   2945          }
   2946          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2947          CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item)
   \                     cJSON_IsArray:
   2948          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2949              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsArray_0
   2950              {
   2951                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsArray_1
   2952              }
   2953          
   2954              return (item->type & 0xFF) == cJSON_Array;
   \                     ??cJSON_IsArray_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6420         XRL     A,#0x20
   \   000019   7004         JNZ     ??cJSON_IsArray_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsArray_3
   \                     ??cJSON_IsArray_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsArray_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsArray_1:
   \   000026   80..         SJMP    ?Subroutine9
   2955          }
   2956          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2957          CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item)
   \                     cJSON_IsObject:
   2958          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2959              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsObject_0
   2960              {
   2961                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsObject_1
   2962              }
   2963          
   2964              return (item->type & 0xFF) == cJSON_Object;
   \                     ??cJSON_IsObject_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6440         XRL     A,#0x40
   \   000019   7004         JNZ     ??cJSON_IsObject_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsObject_3
   \                     ??cJSON_IsObject_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsObject_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsObject_1:
   \   000026   80..         SJMP    ?Subroutine9
   2965          }
   2966          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2967          CJSON_PUBLIC(cJSON_bool) cJSON_IsRaw(const cJSON * const item)
   \                     cJSON_IsRaw:
   2968          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2969              if (item == NULL)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   7004         JNZ     ??cJSON_IsRaw_0
   2970              {
   2971                  return false;
   \   000008   7A00         MOV     R2,#0x0
   \   00000A   801A         SJMP    ??cJSON_IsRaw_1
   2972              }
   2973          
   2974              return (item->type & 0xFF) == cJSON_Raw;
   \                     ??cJSON_IsRaw_0:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   6480         XRL     A,#0x80
   \   000019   7004         JNZ     ??cJSON_IsRaw_2
   \   00001B   D2F0         SETB    B.0
   \   00001D   8002         SJMP    ??cJSON_IsRaw_3
   \                     ??cJSON_IsRaw_2:
   \   00001F   C2F0         CLR     B.0
   \                     ??cJSON_IsRaw_3:
   \   000021   A2F0         MOV     C,B.0
   \   000023   E4           CLR     A
   \   000024   33           RLC     A
   \   000025   FA           MOV     R2,A
   \                     ??cJSON_IsRaw_1:
   \   000026   02....       LJMP    ?Subroutine9 & 0xFFFF
   2975          }
   2976          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2977          CJSON_PUBLIC(cJSON_bool) cJSON_Compare(const cJSON * const a, const cJSON * const b, const cJSON_bool case_sensitive)
   \                     cJSON_Compare:
   2978          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 4,R2
   \   000007   8B..         MOV     ?V0 + 5,R3
   \   000009   EC           MOV     A,R4
   \   00000A   FE           MOV     R6,A
   \   00000B   ED           MOV     A,R5
   \   00000C   FF           MOV     R7,A
   \   00000D   7412         MOV     A,#0x12
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V0 + 6,A
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 7,A
   2979              if ((a == NULL) || (b == NULL) || ((a->type & 0xFF) != (b->type & 0xFF)))
   \   000019   EA           MOV     A,R2
   \   00001A   45..         ORL     A,?V0 + 5
   \   00001C   601E         JZ      ??cJSON_Compare_0
   \   00001E   EE           MOV     A,R6
   \   00001F   4F           ORL     A,R7
   \   000020   601A         JZ      ??cJSON_Compare_0
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F8           MOV     R0,A
   \   00002E   8E82         MOV     DPL,R6
   \   000030   8F83         MOV     DPH,R7
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   68           XRL     A,R0
   \   00003A   6007         JZ      ??cJSON_Compare_1
   2980              {
   2981                  return false;
   \                     ??cJSON_Compare_0:
   \   00003C   7A00         MOV     R2,#0x0
   \                     ??cJSON_Compare_2:
   \   00003E   7B00         MOV     R3,#0x0
   2982              }
   \   000040   02....       LJMP    ?Subroutine6 & 0xFFFF
   2983          
   2984              /* check if type is valid */
   2985              switch (a->type & 0xFF)
   \                     ??cJSON_Compare_1:
   \   000043   8A82         MOV     DPL,R2
   \   000045   8B83         MOV     DPH,R3
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   14           DEC     A
   \   00004F   601B         JZ      ??cJSON_Compare_3
   \   000051   14           DEC     A
   \   000052   6018         JZ      ??cJSON_Compare_3
   \   000054   24FE         ADD     A,#-0x2
   \   000056   6014         JZ      ??cJSON_Compare_3
   \   000058   24FC         ADD     A,#-0x4
   \   00005A   6010         JZ      ??cJSON_Compare_3
   \   00005C   24F8         ADD     A,#-0x8
   \   00005E   600C         JZ      ??cJSON_Compare_3
   \   000060   24F0         ADD     A,#-0x10
   \   000062   6008         JZ      ??cJSON_Compare_3
   \   000064   24E0         ADD     A,#-0x20
   \   000066   6004         JZ      ??cJSON_Compare_3
   \   000068   24C0         ADD     A,#-0x40
   \   00006A   70D0         JNZ     ??cJSON_Compare_0
   2986              {
   2987                  case cJSON_False:
   2988                  case cJSON_True:
   2989                  case cJSON_NULL:
   2990                  case cJSON_Number:
   2991                  case cJSON_String:
   2992                  case cJSON_Raw:
   2993                  case cJSON_Array:
   2994                  case cJSON_Object:
   2995                      break;
   2996          
   2997                  default:
   2998                      return false;
   2999              }
   3000          
   3001              /* identical objects are equal */
   3002              if (a == b)
   \                     ??cJSON_Compare_3:
   \   00006C   EE           MOV     A,R6
   \   00006D   65..         XRL     A,?V0 + 4
   \   00006F   7003         JNZ     ??cJSON_Compare_4
   \   000071   EF           MOV     A,R7
   \   000072   65..         XRL     A,?V0 + 5
   \                     ??cJSON_Compare_4:
   \   000074   7004         JNZ     ??cJSON_Compare_5
   3003              {
   3004                  return true;
   \                     ??cJSON_Compare_6:
   \   000076   7A01         MOV     R2,#0x1
   \   000078   80C4         SJMP    ??cJSON_Compare_2
   3005              }
   3006          
   3007              switch (a->type & 0xFF)
   \                     ??cJSON_Compare_5:
   \   00007A   8A82         MOV     DPL,R2
   \   00007C   8B83         MOV     DPH,R3
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   A3           INC     DPTR
   \   000081   A3           INC     DPTR
   \   000082   A3           INC     DPTR
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   14           DEC     A
   \   000086   60EE         JZ      ??cJSON_Compare_6
   \   000088   14           DEC     A
   \   000089   60EB         JZ      ??cJSON_Compare_6
   \   00008B   24FE         ADD     A,#-0x2
   \   00008D   60E7         JZ      ??cJSON_Compare_6
   \   00008F   24FC         ADD     A,#-0x4
   \   000091   6015         JZ      ??cJSON_Compare_7
   \   000093   24F8         ADD     A,#-0x8
   \   000095   602F         JZ      ??cJSON_Compare_8
   \   000097   24F0         ADD     A,#-0x10
   \   000099   6065         JZ      ??cJSON_Compare_9
   \   00009B   24E0         ADD     A,#-0x20
   \   00009D   7003         JNZ     $+5
   \   00009F   02....       LJMP    ??cJSON_Compare_10 & 0xFFFF
   \   0000A2   24C0         ADD     A,#-0x40
   \   0000A4   6020         JZ      ??cJSON_Compare_8
   \   0000A6   8094         SJMP    ??cJSON_Compare_0
   3008              {
   3009                  /* in these cases and equal type is enough */
   3010                  case cJSON_False:
   3011                  case cJSON_True:
   3012                  case cJSON_NULL:
   3013                      return true;
   3014          
   3015                  case cJSON_Number:
   3016                      if (compare_double(a->valuedouble, b->valuedouble))
   \                     ??cJSON_Compare_7:
   \   0000A8                ; Setup parameters for call to function compare_double
   \   0000A8   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   0000AB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AE   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   0000B1   12....       LCALL   ?XLOAD_R2345
   \   0000B4   12....       LCALL   ??compare_double?relay
   \   0000B7   7404         MOV     A,#0x4
   \   0000B9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BC   8B..         MOV     ?V0 + 1,R3
   \   0000BE   EA           MOV     A,R2
   \   0000BF   45..         ORL     A,?V0 + 1
   \   0000C1   70B3         JNZ     ??cJSON_Compare_6
   \   0000C3   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3017                      {
   3018                          return true;
   3019                      }
   3020                      return false;
   3021          
   3022                  case cJSON_String:
   3023                  case cJSON_Raw:
   3024                      if ((a->valuestring == NULL) || (b->valuestring == NULL))
   \                     ??cJSON_Compare_8:
   \   0000C6   8A82         MOV     DPL,R2
   \   0000C8   8B83         MOV     DPH,R3
   \   0000CA   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_484:
   \   0000CD   7003         JNZ     $+5
   \   0000CF   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   \   0000D2   8E82         MOV     DPL,R6
   \   0000D4   8F83         MOV     DPH,R7
   \   0000D6   12....       LCALL   ??Subroutine197_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_485:
   \   0000D9   7003         JNZ     $+5
   \   0000DB   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3025                      {
   3026                          return false;
   3027                      }
   3028                      if (strcmp(a->valuestring, b->valuestring) == 0)
   \   0000DE                ; Setup parameters for call to function strcmp
   \   0000DE   8E82         MOV     DPL,R6
   \   0000E0   8F83         MOV     DPH,R7
   \   0000E2   A3           INC     DPTR
   \   0000E3   A3           INC     DPTR
   \   0000E4   A3           INC     DPTR
   \   0000E5   A3           INC     DPTR
   \   0000E6   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_530:
   \   0000E9   8A82         MOV     DPL,R2
   \   0000EB   8B83         MOV     DPH,R3
   \   0000ED   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   0000F0   12....       LCALL   ??strcmp?relay
   \   0000F3   8B..         MOV     ?V0 + 1,R3
   \   0000F5   EA           MOV     A,R2
   \   0000F6   45..         ORL     A,?V0 + 1
   \   0000F8   6003         JZ      $+5
   \   0000FA   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   \   0000FD   02....       LJMP    ??cJSON_Compare_6 & 0xFFFF
   3029                      {
   3030                          return true;
   3031                      }
   3032          
   3033                      return false;
   3034          
   3035                  case cJSON_Array:
   3036                  {
   3037                      cJSON *a_element = a->child;
   \                     ??cJSON_Compare_9:
   \   000100   8A82         MOV     DPL,R2
   \   000102   8B83         MOV     DPH,R3
   \   000104   A3           INC     DPTR
   \   000105   A3           INC     DPTR
   \   000106   A3           INC     DPTR
   \   000107   A3           INC     DPTR
   \   000108   12....       LCALL   ?Subroutine38 & 0xFFFF
   3038                      cJSON *b_element = b->child;
   \                     ??CrossCallReturnLabel_55:
   \   00010B   802D         SJMP    ??cJSON_Compare_11
   3039          
   3040                      for (; (a_element != NULL) && (b_element != NULL);)
   \                     ??cJSON_Compare_12:
   \   00010D   EE           MOV     A,R6
   \   00010E   4F           ORL     A,R7
   \   00010F   7003         JNZ     $+5
   \   000111   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3041                      {
   3042                          if (!cJSON_Compare(a_element, b_element, case_sensitive))
   \   000114                ; Setup parameters for call to function cJSON_Compare
   \   000114   78..         MOV     R0,#?V0 + 6
   \   000116   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000119   EE           MOV     A,R6
   \   00011A   FC           MOV     R4,A
   \   00011B   EF           MOV     A,R7
   \   00011C   FD           MOV     R5,A
   \   00011D   AA..         MOV     R2,?V0 + 0
   \   00011F   AB..         MOV     R3,?V0 + 1
   \   000121   12....       LCALL   ??cJSON_Compare?relay
   \   000124   7402         MOV     A,#0x2
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   8B..         MOV     ?V0 + 3,R3
   \   00012B   EA           MOV     A,R2
   \   00012C   45..         ORL     A,?V0 + 3
   \   00012E   7003         JNZ     $+5
   \   000130   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3043                          {
   3044                              return false;
   3045                          }
   3046          
   3047                          a_element = a_element->next;
   \   000133   12....       LCALL   ?Subroutine60 & 0xFFFF
   3048                          b_element = b_element->next;
   \                     ??CrossCallReturnLabel_516:
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \                     ??cJSON_Compare_11:
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   FE           MOV     R6,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   FF           MOV     R7,A
   3049                      }
   \   00013F   E5..         MOV     A,?V0 + 0
   \   000141   45..         ORL     A,?V0 + 1
   \   000143   70C8         JNZ     ??cJSON_Compare_12
   3050          
   3051                      /* one of the arrays is longer than the other */
   3052                      if (a_element != b_element) {
   \   000145   EE           MOV     A,R6
   \   000146   4F           ORL     A,R7
   \   000147   7003         JNZ     $+5
   \   000149   02....       LJMP    ??cJSON_Compare_6 & 0xFFFF
   \   00014C   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3053                          return false;
   3054                      }
   3055          
   3056                      return true;
   3057                  }
   3058          
   3059                  case cJSON_Object:
   3060                  {
   3061                      cJSON *a_element = NULL;
   3062                      cJSON *b_element = NULL;
   3063                      cJSON_ArrayForEach(a_element, a)
   \                     ??cJSON_Compare_10:
   \   00014F   8A82         MOV     DPL,R2
   \   000151   8B83         MOV     DPH,R3
   \   000153   A3           INC     DPTR
   \   000154   A3           INC     DPTR
   \   000155   A3           INC     DPTR
   \   000156   A3           INC     DPTR
   \   000157   8048         SJMP    ??cJSON_Compare_13
   3064                      {
   3065                          /* TODO This has O(n^2) runtime, which is horrible! */
   3066                          b_element = get_object_item(b, a_element->string, case_sensitive);
   \                     ??cJSON_Compare_14:
   \   000159                ; Setup parameters for call to function get_object_item
   \   000159   78..         MOV     R0,#?V0 + 6
   \   00015B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015E   E5..         MOV     A,?V0 + 2
   \   000160   12....       LCALL   ??Subroutine227_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_637:
   \   000163   E5..         MOV     A,?V0 + 3
   \   000165   12....       LCALL   ??Subroutine228_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_653:
   \   000168   12....       LCALL   ??get_object_item?relay
   \   00016B   7402         MOV     A,#0x2
   \   00016D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000170   8A..         MOV     ?V0 + 0,R2
   \   000172   8B..         MOV     ?V0 + 1,R3
   3067                          if (b_element == NULL)
   \   000174   EA           MOV     A,R2
   \   000175   45..         ORL     A,?V0 + 1
   \   000177   7003         JNZ     $+5
   \   000179   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3068                          {
   3069                              return false;
   3070                          }
   3071          
   3072                          if (!cJSON_Compare(a_element, b_element, case_sensitive))
   \   00017C                ; Setup parameters for call to function cJSON_Compare
   \   00017C   78..         MOV     R0,#?V0 + 6
   \   00017E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000181   AC..         MOV     R4,?V0 + 0
   \   000183   AD..         MOV     R5,?V0 + 1
   \   000185   AA..         MOV     R2,?V0 + 2
   \   000187   AB..         MOV     R3,?V0 + 3
   \   000189   12....       LCALL   ??cJSON_Compare?relay
   \   00018C   7402         MOV     A,#0x2
   \   00018E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000191   8B..         MOV     ?V0 + 1,R3
   \   000193   EA           MOV     A,R2
   \   000194   45..         ORL     A,?V0 + 1
   \   000196   7003         JNZ     $+5
   \   000198   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3073                          {
   3074                              return false;
   3075                          }
   3076                      }
   \   00019B   85..82       MOV     DPL,?V0 + 2
   \   00019E   85..83       MOV     DPH,?V0 + 3
   \                     ??cJSON_Compare_13:
   \   0001A1   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   0001A4   E5..         MOV     A,?V0 + 2
   \   0001A6   45..         ORL     A,?V0 + 3
   \   0001A8   70AF         JNZ     ??cJSON_Compare_14
   \   0001AA   8E82         MOV     DPL,R6
   \   0001AC   8F83         MOV     DPH,R7
   \   0001AE   A3           INC     DPTR
   \   0001AF   A3           INC     DPTR
   \   0001B0   A3           INC     DPTR
   \   0001B1   A3           INC     DPTR
   \                     ??cJSON_Compare_15:
   \   0001B2   12....       LCALL   ?Subroutine59 & 0xFFFF
   3077          
   3078                      /* doing this twice, once on a and b to prevent true comparison if a subset of b
   3079                       * TODO: Do this the proper way, this is just a fix for now */
   3080                      cJSON_ArrayForEach(b_element, b)
   \                     ??CrossCallReturnLabel_89:
   \   0001B5   7003         JNZ     $+5
   \   0001B7   02....       LJMP    ??cJSON_Compare_6 & 0xFFFF
   3081                      {
   3082                          a_element = get_object_item(a, b_element->string, case_sensitive);
   \   0001BA                ; Setup parameters for call to function get_object_item
   \   0001BA   78..         MOV     R0,#?V0 + 6
   \   0001BC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001BF   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   0001C2   12....       LCALL   ??Subroutine209_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_527:
   \   0001C5   AA..         MOV     R2,?V0 + 4
   \   0001C7   AB..         MOV     R3,?V0 + 5
   \   0001C9   12....       LCALL   ??get_object_item?relay
   \   0001CC   7402         MOV     A,#0x2
   \   0001CE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001D1   8A..         MOV     ?V0 + 2,R2
   \   0001D3   8B..         MOV     ?V0 + 3,R3
   3083                          if (a_element == NULL)
   \   0001D5   EA           MOV     A,R2
   \   0001D6   45..         ORL     A,?V0 + 3
   \   0001D8   7003         JNZ     $+5
   \   0001DA   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3084                          {
   3085                              return false;
   3086                          }
   3087          
   3088                          if (!cJSON_Compare(b_element, a_element, case_sensitive))
   \   0001DD                ; Setup parameters for call to function cJSON_Compare
   \   0001DD   78..         MOV     R0,#?V0 + 6
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001E2   AC..         MOV     R4,?V0 + 2
   \   0001E4   AD..         MOV     R5,?V0 + 3
   \   0001E6   AA..         MOV     R2,?V0 + 0
   \   0001E8   AB..         MOV     R3,?V0 + 1
   \   0001EA   12....       LCALL   ??cJSON_Compare?relay
   \   0001ED   7402         MOV     A,#0x2
   \   0001EF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001F2   8B..         MOV     ?V0 + 3,R3
   \   0001F4   EA           MOV     A,R2
   \   0001F5   45..         ORL     A,?V0 + 3
   \   0001F7   7003         JNZ     $+5
   \   0001F9   02....       LJMP    ??cJSON_Compare_0 & 0xFFFF
   3089                          {
   3090                              return false;
   3091                          }
   3092                      }
   \   0001FC   85..82       MOV     DPL,?V0 + 0
   \   0001FF   85..83       MOV     DPH,?V0 + 1
   \   000202   80AE         SJMP    ??cJSON_Compare_15
   3093          
   3094                      return true;
   3095                  }
   3096          
   3097                  default:
   3098                      return false;
   3099              }
   3100          }
   3101          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   12....       LCALL   ?CALL_IND
   \   000006                REQUIRE ??Subroutine204_0
   \   000006                ; // Fall through to label ??Subroutine204_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3102          CJSON_PUBLIC(void *) cJSON_malloc(size_t size)
   \                     cJSON_malloc:
   3103          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3104              return global_hooks.allocate(size);
   \   000004                ; Setup parameters for indirect call
   \   000004   90....       MOV     DPTR,#global_hooks
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
   3105          }
   3106          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3107          CJSON_PUBLIC(void) cJSON_free(void *object)
   \                     cJSON_free:
   3108          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3109              global_hooks.deallocate(object);
   \   000004                ; Setup parameters for indirect call
   \   000004   90....       MOV     DPTR,#global_hooks + 2
   \   000007   02....       LJMP    ?Subroutine0 & 0xFFFF
   3110          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for global_hooks>`:
   \   000000   ....         DW ??malloc?relay
   \   000002   ....         DW ??free?relay
   \   000004   ....         DW ??realloc?relay

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??malloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    malloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??realloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    realloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??free?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    free

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetErrorPtr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetErrorPtr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetStringValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetStringValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetNumberValue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetNumberValue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Version?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Version

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??case_insensitive_strcmp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    case_insensitive_strcmp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_strdup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_strdup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_InitHooks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_InitHooks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_New_Item?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_New_Item

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Delete?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Delete

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_number?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_number

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_SetNumberHelper?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_SetNumberHelper

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_SetValuestring?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_SetValuestring

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ensure?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ensure

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??update_offset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    update_offset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??compare_double?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    compare_double

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_number?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_number

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_hex4?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_hex4

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??utf16_literal_to_utf8?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    utf16_literal_to_utf8

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_string_ptr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_string_ptr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??buffer_skip_whitespace?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    buffer_skip_whitespace

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ParseWithOpts?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ParseWithOpts

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ParseWithLengthOpts?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ParseWithLengthOpts

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Parse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Parse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ParseWithLength?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ParseWithLength

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Print?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Print

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_PrintUnformatted?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_PrintUnformatted

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_PrintBuffered?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_PrintBuffered

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_PrintPreallocated?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_PrintPreallocated

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_value?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_value

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_value?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_value

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_array?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_array

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_array?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_array

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??parse_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    parse_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??print_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    print_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetArraySize?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetArraySize

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??get_array_item?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    get_array_item

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetArrayItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetArrayItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??get_object_item?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    get_object_item

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetObjectItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetObjectItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_GetObjectItemCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_GetObjectItemCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_HasObjectItem?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_HasObjectItem

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??suffix_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    suffix_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??create_reference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    create_reference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??add_item_to_array?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    add_item_to_array

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemToArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemToArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??add_item_to_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    add_item_to_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemToObjectCS?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemToObjectCS

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemReferenceToArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemReferenceToArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddItemReferenceToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddItemReferenceToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddNullToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddNullToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddTrueToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddTrueToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddFalseToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddFalseToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddBoolToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddBoolToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddNumberToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddNumberToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddStringToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddStringToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddRawToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddRawToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddObjectToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddObjectToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_AddArrayToObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_AddArrayToObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemViaPointer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemViaPointer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemFromArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemFromArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DeleteItemFromArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DeleteItemFromArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemFromObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemFromObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DetachItemFromObjectCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DetachItemFromObjectCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DeleteItemFromObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DeleteItemFromObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_DeleteItemFromObjectCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_DeleteItemFromObjectCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_InsertItemInArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_InsertItemInArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemViaPointer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemViaPointer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemInArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemInArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??replace_item_in_object?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    replace_item_in_object

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemInObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemInObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_ReplaceItemInObjectCaseSensitive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_ReplaceItemInObjectCaseSensitive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateNull?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateNull

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateTrue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateTrue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateFalse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateFalse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateBool?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateBool

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateNumber?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateNumber

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateStringReference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateStringReference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateObjectReference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateObjectReference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateArrayReference?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateArrayReference

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateRaw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateRaw

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateIntArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateIntArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateFloatArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateFloatArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateDoubleArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateDoubleArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_CreateStringArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_CreateStringArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Duplicate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Duplicate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??minify_string?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    minify_string

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Minify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Minify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsInvalid?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsInvalid

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsFalse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsFalse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsTrue?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsTrue

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsBool?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsBool

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsNull?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsNull

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsNumber?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsNumber

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsString?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsString

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsArray?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsArray

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsObject?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsObject

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_IsRaw?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_IsRaw

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_Compare?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_Compare

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_malloc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_malloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??cJSON_free?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    cJSON_free

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%i.%i.%i">`:
   \   000000   25692E25     DB "%i.%i.%i"
   \            692E2569
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000009   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000011   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000019   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "null">`:
   \   000000   6E756C6C     DB "null"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%1.15g">`:
   \   000000   25312E31     DB "%1.15g"
   \            356700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%lg">`:
   \   000000   256C6700     DB "%lg"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%1.17g">`:
   \   000000   25312E31     DB "%1.17g"
   \            376700  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\"\\"">`:
   \   000000   222200       DB "\"\""

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "u%04x">`:
   \   000000   75253034     DB "u%04x"
   \            7800    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\357\\273\\277">`:
   \   000000   EFBBBF00     DB "\357\273\277"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(unsigned char const *)0, 0, 0, 0,`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1`:
   \   000000   0000         DW 0H
   \   000002   0000         DW 0
   \   000004   0000         DW 0
   \   000006   0000         DW 0
   \   000008   0000         DW 0
   \   00000A   0000         DW 0
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "false">`:
   \   000000   66616C73     DB "false"
   \            6500    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "true">`:
   \   000000   74727565     DB "true"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_46fffe00:
   \   000000   00FEFF46     DD 46FFFE00H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_c6fffffe:
   \   000000   FEFFFFC6     DD 0C6FFFFFEH

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_34000000:
   \   000000   00000034     DD 34000000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_10000:
   \   000000   00000100     DD 65536

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_80:
   \   000000   80000000     DD 128

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_800:
   \   000000   00080000     DD 2048

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_110000:
   \   000000   00001100     DD 1114112

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     add_item_to_array                  0      0     26
       -> suffix_object                 0      0     20
     add_item_to_object                 0      0     38
       -> cJSON_strdup                  0      0     32
       -> add_item_to_array             0      0     32
     buffer_skip_whitespace             4      0     30
     cJSON_AddArrayToObject             0      0     20
       -> cJSON_CreateArray             0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddBoolToObject              0      0     22
       -> cJSON_CreateBool              0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddFalseToObject             0      0     20
       -> cJSON_CreateFalse             0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddItemReferenceToArray      0      0      9
       -> create_reference              0      0     18
       -> add_item_to_array             0      0     18
     cJSON_AddItemReferenceToObject     0      0     20
       -> create_reference              0      0     32
       -> add_item_to_object            0      0     36
     cJSON_AddItemToArray               2      0      0
       -> add_item_to_array             4      0      0
     cJSON_AddItemToObject              0      0     20
       -> add_item_to_object            0      0     36
     cJSON_AddItemToObjectCS            0      0     20
       -> add_item_to_object            0      0     36
     cJSON_AddNullToObject              0      0     20
       -> cJSON_CreateNull              0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddNumberToObject            0      0     26
       -> cJSON_CreateNumber            0      0     32
       -> add_item_to_object            0      0     44
       -> cJSON_Delete                  0      0     32
     cJSON_AddObjectToObject            0      0     20
       -> cJSON_CreateObject            0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddRawToObject               0      0     22
       -> cJSON_CreateRaw               0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddStringToObject            0      0     22
       -> cJSON_CreateString            0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_AddTrueToObject              0      0     20
       -> cJSON_CreateTrue              0      0     28
       -> add_item_to_object            0      0     40
       -> cJSON_Delete                  0      0     28
     cJSON_Compare                      0      0     42
       -> compare_double                0      0     44
       -> strcmp                        0      0     36
       -> cJSON_Compare                 0      0     40
       -> get_object_item               0      0     40
       -> cJSON_Compare                 0      0     40
       -> get_object_item               0      0     40
       -> cJSON_Compare                 0      0     40
     cJSON_CreateArray                  0      0     32
       -> cJSON_New_Item                0      0     20
     cJSON_CreateArrayReference         0      0     10
       -> cJSON_New_Item                0      0     20
     cJSON_CreateBool                   0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateDoubleArray            0      0     20
       -> cJSON_CreateArray             0      0     40
       -> suffix_object                 0      0     40
       -> cJSON_CreateNumber            0      0     40
       -> cJSON_Delete                  0      0     40
     cJSON_CreateFalse                  0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateFloatArray             0      0     20
       -> cJSON_CreateArray             0      0     40
       -> suffix_object                 0      0     40
       -> cJSON_CreateNumber            0      0     40
       -> cJSON_Delete                  0      0     40
     cJSON_CreateIntArray               0      0     22
       -> cJSON_CreateArray             0      0     44
       -> suffix_object                 0      0     44
       -> cJSON_CreateNumber            0      0     44
       -> cJSON_Delete                  0      0     44
     cJSON_CreateNull                   0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateNumber                 0      0     38
       -> cJSON_New_Item                0      0     32
     cJSON_CreateObject                 0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_CreateObjectReference        0      0     10
       -> cJSON_New_Item                0      0     20
     cJSON_CreateRaw                    0      0     26
       -> cJSON_New_Item                0      0     24
       -> cJSON_strdup                  0      0     24
       -> cJSON_Delete                  0      0     24
     cJSON_CreateString                 0      0     32
       -> cJSON_New_Item                0      0     24
       -> cJSON_strdup                  0      0     24
       -> cJSON_Delete                  0      0     24
     cJSON_CreateStringArray            0      0     20
       -> cJSON_CreateArray             0      0     40
       -> suffix_object                 0      0     40
       -> cJSON_CreateString            0      0     40
       -> cJSON_Delete                  0      0     40
     cJSON_CreateStringReference        0      0     10
       -> cJSON_New_Item                0      0     20
     cJSON_CreateTrue                   0      0     24
       -> cJSON_New_Item                0      0     20
     cJSON_Delete                       0      0     40
       -> cJSON_Delete                  0      0     20
     cJSON_DeleteItemFromArray          2      0      0
       -> cJSON_DetachItemFromArray     4      0      0
       -> cJSON_Delete                  4      0      0
     cJSON_DeleteItemFromObject         2      0      0
       -> cJSON_DetachItemFromObject
                                        4      0      0
       -> cJSON_Delete                  4      0      0
     cJSON_DeleteItemFromObjectCaseSensitive
                                        2      0      0
       -> cJSON_DetachItemFromObjectCaseSensitive
                                        4      0      0
       -> cJSON_Delete                  4      0      0
     cJSON_DetachItemFromArray          0      0      9
       -> get_array_item                0      0     18
       -> cJSON_DetachItemViaPointer
                                        0      0     18
     cJSON_DetachItemFromObject         0      0      9
       -> cJSON_GetObjectItem           0      0     18
       -> cJSON_DetachItemViaPointer
                                        0      0     18
     cJSON_DetachItemFromObjectCaseSensitive
                                        0      0      9
       -> cJSON_GetObjectItemCaseSensitive
                                        0      0     18
       -> cJSON_DetachItemViaPointer
                                        0      0     18
     cJSON_DetachItemViaPointer         0      0     18
     cJSON_Duplicate                    0      0     36
       -> cJSON_New_Item                0      0     36
       -> cJSON_strdup                  0      0     36
       -> cJSON_strdup                  0      0     36
       -> cJSON_Duplicate               0      0     36
       -> cJSON_Delete                  0      0     36
     cJSON_GetArrayItem                 2      0      0
       -> get_array_item                4      0      0
     cJSON_GetArraySize                 2      0      0
     cJSON_GetErrorPtr                  2      0      0
     cJSON_GetNumberValue               0      0     16
       -> cJSON_IsNumber                0      0     32
     cJSON_GetObjectItem                0      0     22
       -> get_object_item               0      0     24
     cJSON_GetObjectItemCaseSensitive
                                        0      0     21
       -> get_object_item               0      0     24
     cJSON_GetStringValue               0      0     10
       -> cJSON_IsString                0      0     20
     cJSON_HasObjectItem                0      0     10
       -> cJSON_GetObjectItem           0      0     20
     cJSON_InitHooks                    2      0      0
     cJSON_InsertItemInArray            0      0     14
       -> get_array_item                0      0     24
       -> add_item_to_array             0      0     24
     cJSON_IsArray                      2      0      0
     cJSON_IsBool                       2      0      0
     cJSON_IsFalse                      2      0      0
     cJSON_IsInvalid                    2      0      0
     cJSON_IsNull                       2      0      0
     cJSON_IsNumber                     2      0     16
     cJSON_IsObject                     2      0      0
     cJSON_IsRaw                        2      0      0
     cJSON_IsString                     2      0     10
     cJSON_IsTrue                       2      0      0
     cJSON_Minify                       3      0      4
       -> minify_string                 4      0      8
     cJSON_New_Item                     0      0     42
       -> memset                        0      0     24
     cJSON_Parse                        0      0     12
       -> cJSON_ParseWithOpts           0      0     24
     cJSON_ParseWithLength              0      0     14
       -> cJSON_ParseWithLengthOpts     0      0     28
     cJSON_ParseWithLengthOpts          2      0     46
       -> cJSON_New_Item                0      0     60
       -> strncmp                       0      0     64
       -> buffer_skip_whitespace        0      0     60
       -> parse_value                   0      0     60
       -> buffer_skip_whitespace        0      0     60
       -> cJSON_Delete                  0      0     60
     cJSON_ParseWithOpts                0      0     26
       -> strlen                        0      0     28
       -> cJSON_ParseWithLengthOpts     0      0     28
     cJSON_Print                        0      0     12
       -> print                         0      0     24
     cJSON_PrintBuffered                2      0     32
       -> print_value                   0      0     60
     cJSON_PrintPreallocated            2      0     32
       -> print_value                   0      0     56
     cJSON_PrintUnformatted             0      0     12
       -> print                         0      0     24
     cJSON_ReplaceItemInArray           0      0     14
       -> get_array_item                0      0     24
       -> cJSON_ReplaceItemViaPointer
                                        0      0     24
     cJSON_ReplaceItemInObject          0      0     18
       -> replace_item_in_object        0      0     32
     cJSON_ReplaceItemInObjectCaseSensitive
                                        0      0     18
       -> replace_item_in_object        0      0     32
     cJSON_ReplaceItemViaPointer        0      0     27
       -> cJSON_Delete                  0      0     22
     cJSON_SetNumberHelper              0      0     20
     cJSON_SetValuestring               0      0     14
       -> strlen                        0      0     28
       -> strlen                        0      0     28
       -> strcpy                        0      0     28
       -> cJSON_strdup                  0      0     28
       -> cJSON_free                    0      0     28
     cJSON_Version                      0      0     16
       -> sprintf                       0      0     32
     cJSON_free                         2      0     14
     cJSON_malloc                       2      0      0
     cJSON_strdup                       0      0     34
       -> strlen                        0      0     28
       -> memcpy                        0      0     32
     case_insensitive_strcmp            0      0     21
     compare_double                     0      0     74
     create_reference                   0      0     30
       -> cJSON_New_Item                0      0     24
       -> memcpy                        0      0     28
     ensure                             2      0     62
       -> memcpy                        0      0     32
     free                               2      0      0
       -> __xdata_free                  4      0      0
     get_array_item                     2      0     12
     get_object_item                    0      0     32
       -> strcmp                        0      0     24
       -> case_insensitive_strcmp       0      0     24
     malloc                             2      0      0
       -> __xdata_malloc                4      0      0
     minify_string                      1      0     13
     parse_array                        2      0     28
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_New_Item                0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> parse_value                   0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_Delete                  0      0     32
     parse_hex4                         0      0     28
     parse_number                       2      0     98
       -> strtod                        0      0    172
     parse_object                       2      0     28
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_New_Item                0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> parse_string                  0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> parse_value                   0      0     32
       -> buffer_skip_whitespace        0      0     32
       -> cJSON_Delete                  0      0     32
     parse_string                       2      0     38
       -> utf16_literal_to_utf8         0      0     44
     parse_value                        2      0     44
       -> strncmp                       0      0     28
       -> strncmp                       0      0     28
       -> strncmp                       0      0     28
       -> parse_string                  0      0     24
       -> parse_number                  0      0     24
       -> parse_array                   0      0     24
       -> parse_object                  0      0     24
     print                              2      0     48
       -> memset                        0      0     72
       -> print_value                   0      0     68
       -> update_offset                 0      0     68
       -> memcpy                        0      0     72
     print_array                        0      0     28
       -> ensure                        0      0     28
       -> ensure                        0      0     28
       -> print_value                   0      0     28
       -> update_offset                 0      0     28
       -> ensure                        0      0     28
     print_number                       2      0     64
       -> sprintf                       0      0     92
       -> sprintf                       0      0    100
       -> sscanf                        0      0     96
       -> compare_double                0      0    100
       -> sprintf                       0      0    100
       -> ensure                        0      0     92
     print_object                       0      0     28
       -> ensure                        0      0     28
       -> ensure                        0      0     28
       -> ensure                        0      0     28
       -> print_string_ptr              0      0     28
       -> update_offset                 0      0     28
       -> ensure                        0      0     28
       -> print_value                   0      0     28
       -> update_offset                 0      0     28
       -> ensure                        0      0     28
     print_string_ptr                   1      0     34
       -> ensure                        0      0     36
       -> strcpy                        0      0     36
       -> ensure                        0      0     36
       -> memcpy                        0      0     40
       -> sprintf                       0      0     40
     print_value                        0      0     50
       -> ensure                        0      0     28
       -> strcpy                        0      0     28
       -> ensure                        0      0     28
       -> strcpy                        0      0     28
       -> ensure                        0      0     28
       -> strcpy                        0      0     28
       -> print_number                  0      0     28
       -> strlen                        0      0     28
       -> ensure                        0      0     28
       -> memcpy                        0      0     32
       -> print_string_ptr              0      0     28
       -> print_array                   0      0     28
       -> print_object                  0      0     28
     realloc                            2      0      0
       -> __xdata_realloc               4      0      0
     replace_item_in_object             0      0     34
       -> cJSON_free                    0      0     28
       -> cJSON_strdup                  0      0     28
       -> get_object_item               0      0     36
       -> cJSON_ReplaceItemViaPointer
                                        0      0     32
     suffix_object                      2      0     22
     update_offset                      0      0     44
       -> strlen                        0      0     20
     utf16_literal_to_utf8              1      0     40
       -> parse_hex4                    0      0     36
       -> parse_hex4                    0      0     36


   Segment part sizes:

     Function/Label                                   Bytes
     --------------                                   -----
     malloc                                             14
     realloc                                            14
     free                                               14
     global_error                                        4
     cJSON_GetErrorPtr                                  20
     ?Subroutine147                                      7
     ??Subroutine201_0                                   6
     ??Subroutine204_0                                   7
     ??Subroutine226_0                                   4
     cJSON_GetStringValue                               35
     ??Subroutine160_0                                   5
     ?Subroutine67                                       4
     ??Subroutine187_0                                   4
     ??Subroutine188_0                                   4
     ??Subroutine211_0                                   6
     cJSON_GetNumberValue                               65
     ??Subroutine151_0                                   5
     ??Subroutine176_0                                   5
     ?Subroutine81                                      10
     cJSON_Version                                      55
     version                                            15
     case_insensitive_strcmp                           143
     ?Subroutine20                                      17
     ??Subroutine178_0                                   4
     ??Subroutine186_0                                   5
     global_hooks                                        6
     cJSON_strdup                                       73
     ??Subroutine162_0                                   4
     ?Subroutine140                                      1
     ??Subroutine163_0                                   6
     ?Subroutine126                                      6
     ?Subroutine146                                      1
     ??Subroutine164_0                                   6
     ?Subroutine90                                      11
     ??Subroutine189_0                                   5
     cJSON_InitHooks                                   120
     ??Subroutine195_0                                   6
     ??Subroutine199_0                                   2
     ??Subroutine200_0                                   6
     ?Subroutine102                                      6
     cJSON_New_Item                                     61
     cJSON_Delete                                      157
     ?Subroutine23                                      10
     ??Subroutine197_0                                   4
     ??Subroutine198_0                                   2
     ?Subroutine127                                      8
     ?Subroutine144                                      1
     ??Subroutine227_0                                   5
     ?Subroutine38                                      12
     parse_number                                      394
     ?Subroutine88                                       1
     ??Subroutine150_0                                   9
     ?Subroutine78                                       4
     ?Subroutine138                                     11
     ?Subroutine25                                      24
     ?Subroutine135                                      8
     ?Subroutine80                                       8
     ??Subroutine165_0                                   8
     ?Subroutine92                                      14
     ?Subroutine139                                      4
     ??Subroutine179_0                                   9
     ?Subroutine134                                      2
     ??Subroutine210_0                                   2
     ??Subroutine212_0                                   5
     ?Subroutine5                                        5
     ??Subroutine219_0                                   6
     cJSON_SetNumberHelper                             160
     cJSON_SetValuestring                              186
     ?Subroutine63                                      15
     ?Subroutine110                                     11
     ?Subroutine64                                       7
     ensure                                            303
     ?Subroutine26                                      20
     ?Subroutine51                                      13
     ?Subroutine96                                       6
     ??Subroutine161_0                                   8
     ?Subroutine36                                       8
     ?Subroutine33                                       4
     ?Subroutine128                                     10
     ?Subroutine22                                       7
     ?Subroutine34                                      11
     ??Subroutine225_0                                   2
     update_offset                                      66
     compare_double                                    134
     ?Subroutine2                                        3
     print_number                                      366
     ?Subroutine77                                       5
     ?Subroutine76                                       9
     ??Subroutine169_0                                  10
     ??Subroutine177_0                                   6
     ?Subroutine142                                     10
     ?Subroutine82                                      10
     parse_hex4                                        116
     ??Subroutine180_0                                   9
     utf16_literal_to_utf8                             366
     ?Subroutine114                                     10
     ?Subroutine6                                        5
     ?Subroutine56                                       8
     ??Subroutine203_0                                   8
     parse_string                                      603
     ?Subroutine46                                       6
     ??Subroutine152_0                                   2
     ??Subroutine153_0                                   8
     ?Subroutine86                                      10
     ?Subroutine69                                       6
     ?Subroutine53                                       4
     ?Subroutine133                                     12
     ?Subroutine97                                      15
     ?Subroutine28                                       8
     ?Subroutine143                                      6
     ?Subroutine106                                      5
     ?Subroutine45                                       5
     ?Subroutine95                                       6
     ??Subroutine192_0                                   2
     ??Subroutine193_0                                   1
     ??Subroutine194_0                                   1
     ?Subroutine62                                       6
     ?Subroutine32                                      22
     print_string_ptr                                  457
     buffer_skip_whitespace                            138
     ??Subroutine155_0                                   4
     ??Subroutine156_0                                   3
     ??Subroutine157_0                                   4
     ??Subroutine170_0                                   4
     ?Subroutine137                                      9
     ?Subroutine149                                      9
     ?Subroutine148                                      7
     cJSON_ParseWithOpts                                64
     ??Subroutine174_0                                   6
     cJSON_ParseWithLengthOpts                         460
     ?Subroutine50                                      10
     ?Subroutine123                                      9
     ??Subroutine171_0                                   9
     ??Subroutine175_0                                   8
     ??Subroutine158_0                                   2
     ??Subroutine159_0                                   3
     cJSON_Parse                                        25
     cJSON_ParseWithLength                              28
     print                                             419
     ?Subroutine30                                      15
     ?Subroutine122                                     10
     ??Subroutine172_0                                   9
     ?Subroutine72                                      10
     ??Subroutine207_0                                   4
     cJSON_Print                                        18
     ?Subroutine12                                       8
     cJSON_PrintUnformatted                             20
     cJSON_PrintBuffered                               182
     ?Subroutine103                                     10
     ??Subroutine181_0                                   3
     ??Subroutine182_0                                   5
     ??Subroutine206_0                                   8
     ?Subroutine61                                       8
     cJSON_PrintPreallocated                           154
     parse_value                                       393
     ?Subroutine73                                      18
     ?Subroutine18                                       4
     ??Subroutine166_0                                  11
     ?Subroutine17                                      19
     ?Subroutine15                                       9
     ??Subroutine167_0                                   9
     ?Subroutine131                                     12
     ?Subroutine91                                       2
     ?Subroutine52                                       4
     print_value                                       195
     ?Subroutine113                                      2
     ??Subroutine168_0                                   2
     ?Subroutine65                                       7
     ??Subroutine154_0                                   2
     parse_array                                       337
     ?Subroutine58                                       6
     ?Subroutine35                                      11
     ?Subroutine24                                      15
     ?Subroutine11                                       5
     ?Subroutine100                                      2
     ?Subroutine54                                       6
     ?Subroutine129                                     11
     ?Subroutine132                                      4
     ?Subroutine98                                       8
     ?Subroutine55                                       4
     print_array                                       140
     ?Subroutine120                                      8
     ?Subroutine83                                       6
     ??Subroutine173_0                                   7
     ?Subroutine145                                     18
     ?Subroutine39                                      12
     ?Subroutine112                                     18
     ?Subroutine111                                     14
     ?Subroutine141                                      7
     ?Subroutine57                                      14
     ?Subroutine40                                      15
     ?Subroutine21                                       3
     ??Subroutine183_0                                  12
     ??Subroutine184_0                                   2
     ??Subroutine185_0                                   6
     ?Subroutine4                                        2
     ??Subroutine196_0                                   6
     ?Subroutine60                                       6
     parse_object                                      421
     ?Subroutine29                                      23
     ?Subroutine99                                       7
     ?Subroutine94                                       4
     ??Subroutine205_0                                   2
     print_object                                      413
     ?Subroutine105                                      4
     ?Subroutine85                                       7
     ?Subroutine89                                       9
     ?Subroutine14                                       7
     ?Subroutine43                                      14
     ??Subroutine229_0                                  10
     cJSON_GetArraySize                                 51
     get_array_item                                     48
     cJSON_GetArrayItem                                 21
     ??Subroutine202_0                                   2
     get_object_item                                   114
     ?Subroutine31                                       7
     ??Subroutine228_0                                   3
     ?Subroutine1                                        8
     cJSON_GetObjectItem                                13
     cJSON_GetObjectItemCaseSensitive
                                                        14
     cJSON_HasObjectItem                                21
     ?Subroutine10                                       5
     suffix_object                                      23
     ??Subroutine218_0                                   2
     create_reference                                   87
     ??Subroutine213_0                                  14
     add_item_to_array                                 109
     ?Subroutine68                                       5
     cJSON_AddItemToArray                               10
     add_item_to_object                                216
     ?Subroutine7                                       24
     cJSON_AddItemToObject                              16
     ??Subroutine190_0                                   6
     ?Subroutine48                                       9
     cJSON_AddItemToObjectCS                            16
     ?Subroutine44                                      10
     cJSON_AddItemReferenceToArray                      43
     cJSON_AddItemReferenceToObject                     82
     ?Subroutine119                                      8
     cJSON_AddNullToObject                              62
     ?Subroutine79                                      10
     ??Subroutine191_0                                   8
     cJSON_AddTrueToObject                              62
     cJSON_AddFalseToObject                             62
     cJSON_AddBoolToObject                              71
     cJSON_AddNumberToObject                            81
     cJSON_AddStringToObject                            64
     ?Subroutine47                                      11
     cJSON_AddRawToObject                               71
     cJSON_AddObjectToObject                            63
     cJSON_AddArrayToObject                             63
     cJSON_DetachItemViaPointer                        151
     ?Subroutine74                                       9
     ?Subroutine49                                      10
     cJSON_DetachItemFromArray                          29
     ?Subroutine121                                     12
     cJSON_DeleteItemFromArray                           7
     ?Subroutine8                                        5
     ?Subroutine3                                       11
     cJSON_DetachItemFromObject                         15
     cJSON_DetachItemFromObjectCaseSensitive
                                                        15
     cJSON_DeleteItemFromObject                          9
     cJSON_DeleteItemFromObjectCaseSensitive
                                                         9
     cJSON_InsertItemInArray                           140
     ??Subroutine209_0                                   6
     ?Subroutine37                                      13
     cJSON_ReplaceItemViaPointer                       211
     ?Subroutine75                                       9
     ?Subroutine41                                       2
     ??Subroutine208_0                                   2
     ?Subroutine101                                      8
     cJSON_ReplaceItemInArray                           44
     replace_item_in_object                            165
     ?Subroutine109                                      8
     cJSON_ReplaceItemInObject                          13
     ?Subroutine13                                      18
     cJSON_ReplaceItemInObjectCaseSensitive
                                                        15
     cJSON_CreateNull                                   28
     ??Subroutine214_0                                  10
     cJSON_CreateTrue                                   28
     cJSON_CreateFalse                                  28
     cJSON_CreateBool                                   37
     ?Subroutine116                                      4
     cJSON_CreateNumber                                147
     ?Subroutine107                                      4
     cJSON_CreateString                                 42
     ?Subroutine115                                      8
     ?Subroutine84                                      45
     cJSON_CreateStringReference                        43
     cJSON_CreateObjectReference                        28
     ?Subroutine93                                      19
     cJSON_CreateArrayReference                         28
     cJSON_CreateRaw                                    42
     cJSON_CreateArray                                  20
     cJSON_CreateObject                                 28
     cJSON_CreateIntArray                              166
     ?Subroutine87                                       6
     ??Subroutine215_0                                  13
     ?Subroutine124                                     20
     ?Subroutine117                                     10
     ?Subroutine130                                      8
     ??Subroutine216_0                                   1
     ??Subroutine217_0                                   5
     ?Subroutine27                                      12
     ?Subroutine104                                      6
     ?Subroutine108                                     20
     cJSON_CreateFloatArray                            115
     ?Subroutine125                                     11
     ?Subroutine118                                     13
     ?Subroutine42                                      12
     cJSON_CreateDoubleArray                           113
     cJSON_CreateStringArray                           133
     cJSON_Duplicate                                   369
     ?Subroutine66                                       7
     ?Subroutine59                                       8
     minify_string                                     142
     ?Subroutine71                                       4
     ??Subroutine220_0                                   5
     ??Subroutine222_0                                   2
     ??Subroutine223_0                                   1
     ??Subroutine224_0                                   5
     ?Subroutine16                                      33
     ?Subroutine19                                       9
     ??Subroutine221_0                                   6
     cJSON_Minify                                      300
     ?Subroutine136                                     12
     ?Subroutine70                                       7
     cJSON_IsInvalid                                    39
     ?Subroutine9                                        5
     cJSON_IsFalse                                      41
     cJSON_IsTrue                                       40
     cJSON_IsBool                                       40
     cJSON_IsNull                                       40
     cJSON_IsNumber                                     38
     cJSON_IsString                                     40
     cJSON_IsArray                                      40
     cJSON_IsObject                                     40
     cJSON_IsRaw                                        41
     cJSON_Compare                                     516
     ?Subroutine0                                        6
     cJSON_malloc                                       10
     cJSON_free                                         10
     ?<Initializer for global_hooks>                     6
     ??malloc?relay                                      6
     ??realloc?relay                                     6
     ??free?relay                                        6
     ??cJSON_GetErrorPtr?relay                           6
     ??cJSON_GetStringValue?relay                        6
     ??cJSON_GetNumberValue?relay                        6
     ??cJSON_Version?relay                               6
     ??case_insensitive_strcmp?relay                     6
     ??cJSON_strdup?relay                                6
     ??cJSON_InitHooks?relay                             6
     ??cJSON_New_Item?relay                              6
     ??cJSON_Delete?relay                                6
     ??parse_number?relay                                6
     ??cJSON_SetNumberHelper?relay                       6
     ??cJSON_SetValuestring?relay                        6
     ??ensure?relay                                      6
     ??update_offset?relay                               6
     ??compare_double?relay                              6
     ??print_number?relay                                6
     ??parse_hex4?relay                                  6
     ??utf16_literal_to_utf8?relay                       6
     ??parse_string?relay                                6
     ??print_string_ptr?relay                            6
     ??buffer_skip_whitespace?relay                      6
     ??cJSON_ParseWithOpts?relay                         6
     ??cJSON_ParseWithLengthOpts?relay                   6
     ??cJSON_Parse?relay                                 6
     ??cJSON_ParseWithLength?relay                       6
     ??print?relay                                       6
     ??cJSON_Print?relay                                 6
     ??cJSON_PrintUnformatted?relay                      6
     ??cJSON_PrintBuffered?relay                         6
     ??cJSON_PrintPreallocated?relay                     6
     ??parse_value?relay                                 6
     ??print_value?relay                                 6
     ??parse_array?relay                                 6
     ??print_array?relay                                 6
     ??parse_object?relay                                6
     ??print_object?relay                                6
     ??cJSON_GetArraySize?relay                          6
     ??get_array_item?relay                              6
     ??cJSON_GetArrayItem?relay                          6
     ??get_object_item?relay                             6
     ??cJSON_GetObjectItem?relay                         6
     ??cJSON_GetObjectItemCaseSensitive?relay            6
     ??cJSON_HasObjectItem?relay                         6
     ??suffix_object?relay                               6
     ??create_reference?relay                            6
     ??add_item_to_array?relay                           6
     ??cJSON_AddItemToArray?relay                        6
     ??add_item_to_object?relay                          6
     ??cJSON_AddItemToObject?relay                       6
     ??cJSON_AddItemToObjectCS?relay                     6
     ??cJSON_AddItemReferenceToArray?relay               6
     ??cJSON_AddItemReferenceToObject?relay              6
     ??cJSON_AddNullToObject?relay                       6
     ??cJSON_AddTrueToObject?relay                       6
     ??cJSON_AddFalseToObject?relay                      6
     ??cJSON_AddBoolToObject?relay                       6
     ??cJSON_AddNumberToObject?relay                     6
     ??cJSON_AddStringToObject?relay                     6
     ??cJSON_AddRawToObject?relay                        6
     ??cJSON_AddObjectToObject?relay                     6
     ??cJSON_AddArrayToObject?relay                      6
     ??cJSON_DetachItemViaPointer?relay                  6
     ??cJSON_DetachItemFromArray?relay                   6
     ??cJSON_DeleteItemFromArray?relay                   6
     ??cJSON_DetachItemFromObject?relay                  6
     ??cJSON_DetachItemFromObjectCaseSensitive?relay     6
     ??cJSON_DeleteItemFromObject?relay                  6
     ??cJSON_DeleteItemFromObjectCaseSensitive?relay     6
     ??cJSON_InsertItemInArray?relay                     6
     ??cJSON_ReplaceItemViaPointer?relay                 6
     ??cJSON_ReplaceItemInArray?relay                    6
     ??replace_item_in_object?relay                      6
     ??cJSON_ReplaceItemInObject?relay                   6
     ??cJSON_ReplaceItemInObjectCaseSensitive?relay      6
     ??cJSON_CreateNull?relay                            6
     ??cJSON_CreateTrue?relay                            6
     ??cJSON_CreateFalse?relay                           6
     ??cJSON_CreateBool?relay                            6
     ??cJSON_CreateNumber?relay                          6
     ??cJSON_CreateString?relay                          6
     ??cJSON_CreateStringReference?relay                 6
     ??cJSON_CreateObjectReference?relay                 6
     ??cJSON_CreateArrayReference?relay                  6
     ??cJSON_CreateRaw?relay                             6
     ??cJSON_CreateArray?relay                           6
     ??cJSON_CreateObject?relay                          6
     ??cJSON_CreateIntArray?relay                        6
     ??cJSON_CreateFloatArray?relay                      6
     ??cJSON_CreateDoubleArray?relay                     6
     ??cJSON_CreateStringArray?relay                     6
     ??cJSON_Duplicate?relay                             6
     ??minify_string?relay                               6
     ??cJSON_Minify?relay                                6
     ??cJSON_IsInvalid?relay                             6
     ??cJSON_IsFalse?relay                               6
     ??cJSON_IsTrue?relay                                6
     ??cJSON_IsBool?relay                                6
     ??cJSON_IsNull?relay                                6
     ??cJSON_IsNumber?relay                              6
     ??cJSON_IsString?relay                              6
     ??cJSON_IsArray?relay                               6
     ??cJSON_IsObject?relay                              6
     ??cJSON_IsRaw?relay                                 6
     ??cJSON_Compare?relay                               6
     ??cJSON_malloc?relay                                6
     ??cJSON_free?relay                                  6
     ?<Constant "%i.%i.%i">                              9
     ?<Constant {0}>                                    26
     ?<Constant "null">                                  5
     ?<Constant "%1.15g">                                7
     ?<Constant "%lg">                                   4
     ?<Constant "%1.17g">                                7
     ?<Constant "\"\"">                                  3
     ?<Constant "u%04x">                                 6
     ?<Constant "\357\273\277">                          4
     ?<Constant {(unsigned char const *)0, 0, 0, 0,     14
     ?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,     18
     ?<Constant {(unsigned char *)0, 0, 0, 0, 0, 0,_1   18
     ?<Constant "false">                                 6
     ?<Constant "true">                                  5
     __Constant_0                                        4
     __Constant_46fffe00                                 4
     __Constant_c6fffffe                                 4
     __Constant_34000000                                 4
     __Constant_10000                                    4
     __Constant_80                                       4
     __Constant_800                                      4
     __Constant_110000                                   4

 
 14 237 bytes in segment BANKED_CODE
    654 bytes in segment BANK_RELAYS
      6 bytes in segment XDATA_I
      6 bytes in segment XDATA_ID
    164 bytes in segment XDATA_ROM_C
     19 bytes in segment XDATA_Z
 
 14 837 bytes of CODE  memory (+ 60 bytes shared)
    132 bytes of CONST memory (+ 32 bytes shared)
     25 bytes of XDATA memory

Errors: none
Warnings: 2
